class-dump: /Applications/OmniWeb.app/Contents/Frameworks/WebKit.framework/Versions/A/WebKit

/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

struct AtomicString {
    struct String _field1;
};

struct BackForwardList;

struct CGContext;

struct CSSMutableStyleDeclaration;

struct CSSStyleDeclaration {
    void **_field1;
    int _field2;
    struct StyleBase *_field3;
    _Bool _field4;
};

struct CachedImage {
    void **_field1;
    struct HashCountedSet<WebCore::CachedResourceClient*, WTF::PtrHash<WebCore::CachedResourceClient*>, WTF::HashTraits<WebCore::CachedResourceClient*>> _field2;
    struct String _field3;
    struct String _field4;
    struct Request *_field5;
    struct ResourceResponse _field6;
    struct RefPtr<WebCore::SharedBuffer> _field7;
    int _field8;
    int _field9;
    _Bool _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    double _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    struct CachedResource *_field20;
    struct CachedResource *_field21;
    struct CachedResource *_field22;
    struct CachedResource *_field23;
    _Bool _field24;
    struct DocLoader *_field25;
    void **_field26;
    struct Image *_field27;
    int _field28;
};

struct CachedResource;

struct Chrome;

struct Command {
    struct RefPtr<WebCore::Frame> _field1;
    struct EditorInternalCommand *_field2;
    int _field3;
};

struct CompositeEditCommand;

struct ContextMenuController;

struct DOMWindow;

struct DeprecatedChar;

struct DeprecatedString {
    struct DeprecatedStringData **dataHandle;
    struct DeprecatedStringData internalData;
};

struct DeprecatedStringData {
    unsigned int refCount;
    unsigned int _length;
    struct DeprecatedChar *_unicode;
    char *_ascii;
    unsigned int _maxUnicode:30;
    unsigned int _isUnicodeValid:1;
    unsigned int _isHeapAllocated:1;
    unsigned int _maxAscii:31;
    unsigned int _isAsciiValid:1;
    char _internalBuffer[20];
};

struct DeprecatedValueList<WTF::RefPtr<WebCore::RegisteredEventListener>>;

struct DocLoader;

struct DocPtr<WebCore::Document> {
    struct Document *_field1;
};

struct Document;

struct DocumentLoader {
    void **_field1;
    int _field2;
    _Bool _field3;
    struct Frame *_field4;
    struct RefPtr<WebCore::MainResourceLoader> _field5;
    struct HashSet<WTF::RefPtr<WebCore::ResourceLoader>, WTF::PtrHash<WTF::RefPtr<WebCore::ResourceLoader>>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader>>> _field6;
    struct HashSet<WTF::RefPtr<WebCore::ResourceLoader>, WTF::PtrHash<WTF::RefPtr<WebCore::ResourceLoader>>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader>>> _field7;
    struct HashSet<WTF::RefPtr<WebCore::ResourceLoader>, WTF::PtrHash<WTF::RefPtr<WebCore::ResourceLoader>>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader>>> _field8;
    struct RefPtr<WebCore::SharedBuffer> _field9;
    struct ResourceRequest _field10;
    struct SubstituteData _field11;
    struct ResourceRequest _field12;
    struct ResourceRequest _field13;
    struct ResourceRequest _field14;
    struct ResourceResponse _field15;
    struct ResourceError _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    struct String _field24;
    struct String _field25;
    struct NavigationAction _field26;
    struct ResourceRequest _field27;
    struct Vector<WebCore::ResourceResponse, 0ul> _field28;
    _Bool _field29;
};

struct DragController;

struct EditCommand {
    void **_field1;
    int _field2;
    struct RefPtr<WebCore::Document> _field3;
    struct Selection _field4;
    struct Selection _field5;
    struct RefPtr<WebCore::Element> _field6;
    struct RefPtr<WebCore::Element> _field7;
    struct RefPtr<WebCore::CSSMutableStyleDeclaration> _field8;
    struct CompositeEditCommand *_field9;
};

struct EditorClient;

struct EditorInternalCommand;

struct Element;

struct Event;

struct EventRecord {
    unsigned short _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct Point _field4;
    unsigned short _field5;
};

struct EventTarget;

struct FocusController;

struct FormData;

struct FormState;

struct FormSubmission;

struct Frame {
    void **_field1;
    int _field2;
    struct FramePrivate *_field3;
};

struct FrameLoader {
    struct Frame *_field1;
    struct FrameLoaderClient *_field2;
    int _field3;
    int _field4;
    struct RefPtr<WebCore::DocumentLoader> _field5;
    struct RefPtr<WebCore::DocumentLoader> _field6;
    struct RefPtr<WebCore::DocumentLoader> _field7;
    int _field8;
    struct PolicyCheck _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    struct String _field18;
    int _field19;
    struct HashSet<WebCore::String, WebCore::StringHash, WTF::HashTraits<WebCore::String>> _field20;
    struct OwnPtr<WebCore::FormSubmission> _field21;
    _Bool _field22;
    _Bool _field23;
    struct String _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    struct KURL _field29;
    struct KURL _field30;
    struct OwnPtr<WebCore::IconLoader> _field31;
    _Bool _field32;
    _Bool _field33;
    struct OwnPtr<WebCore::ScheduledRedirection> _field34;
    _Bool _field35;
    _Bool _field36;
    _Bool _field37;
    struct String _field38;
    struct RefPtr<WebCore::TextResourceDecoder> _field39;
    _Bool _field40;
    struct RefPtr<WebCore::HTMLFormElement> _field41;
    struct HashMap<WebCore::String, WebCore::String, WebCore::StringHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<WebCore::String>> _field42;
    struct KURL _field43;
    struct Timer<WebCore::FrameLoader> _field44;
    struct Timer<WebCore::FrameLoader> _field45;
    struct Timer<WebCore::FrameLoader> _field46;
    struct Frame *_field47;
    struct HashSet<WebCore::Frame*, WTF::PtrHash<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>> _field48;
    _Bool _field49;
    _Bool _field50;
    _Bool _field51;
    _Bool _field52;
    struct RefPtr<WebCore::HistoryItem> _field53;
    struct RefPtr<WebCore::HistoryItem> _field54;
    struct RefPtr<WebCore::HistoryItem> _field55;
    _Bool _field56;
};

struct FrameLoaderClient;

struct FramePrivate;

struct HTMLFormElement;

struct HTMLFrameOwnerElement {
    void **_field1;
    int _field2;
    struct Node *_field3;
    struct DocPtr<WebCore::Document> _field4;
    struct Node *_field5;
    struct Node *_field6;
    struct RenderObject *_field7;
    struct OwnPtr<WebCore::NodeListsNodeData> _field8;
    short _field9;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    void **_field10;
    struct DeprecatedValueList<WTF::RefPtr<WebCore::RegisteredEventListener>> *_field11;
    struct Node *_field12;
    struct Node *_field13;
    struct QualifiedName _field14;
    struct RefPtr<WebCore::NamedAttrMap> _field15;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    struct RefPtr<WebCore::CSSMutableStyleDeclaration> _field16;
    struct Frame *_field17;
    _Bool _field18;
};

struct HashCountedSet<WebCore::CachedResourceClient*, WTF::PtrHash<WebCore::CachedResourceClient*>, WTF::HashTraits<WebCore::CachedResourceClient*>> {
    struct HashMap<WebCore::CachedResourceClient*, unsigned int, WTF::PtrHash<WebCore::CachedResourceClient*>, WTF::HashTraits<WebCore::CachedResourceClient*>, WTF::HashTraits<unsigned int>> m_impl;
};

struct HashMap<WebCore::CachedResourceClient*, unsigned int, WTF::PtrHash<WebCore::CachedResourceClient*>, WTF::HashTraits<WebCore::CachedResourceClient*>, WTF::HashTraits<unsigned int>> {
    struct HashTable<int, std::pair<int, int>, WTF::PairFirstExtractor<std::pair<int, int>>, WTF::IntHash<int32_t>, WTF::PairHashTraits<WTF::HashTraits<int32_t>, WTF::HashTraits<int32_t>>, WTF::HashTraits<int32_t>> m_impl;
};

struct HashMap<WebCore::String, WebCore::String, WebCore::CaseFoldingHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<WebCore::String>> {
    struct HashTable<WebCore::StringImpl*, std::pair<WebCore::StringImpl*, int>, WTF::PairFirstExtractor<std::pair<WebCore::StringImpl*, int>>, WebCore::CaseFoldingHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::StringImpl*>, WTF::HashTraits<int32_t>>, WTF::HashTraits<WebCore::StringImpl*>> m_impl;
};

struct HashMap<WebCore::String, WebCore::String, WebCore::StringHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<WebCore::String>> {
    struct HashTable<WebCore::StringImpl*, std::pair<WebCore::StringImpl*, int>, WTF::PairFirstExtractor<std::pair<WebCore::StringImpl*, int>>, WebCore::StringHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::StringImpl*>, WTF::HashTraits<int32_t>>, WTF::HashTraits<WebCore::StringImpl*>> _field1;
};

struct HashMap<WebHistoryDateKey, WTF::RetainPtr<NSMutableArray>, WTF::IntHash<long long unsigned int>, WTF::HashTraits<long long int>, WTF::HashTraits<WTF::RetainPtr<NSMutableArray>>> {
    struct HashTable<long long int, std::pair<long long int, WTF::RetainPtr<NSMutableArray>>, WTF::PairFirstExtractor<std::pair<long long int, WTF::RetainPtr<NSMutableArray>>>, WTF::IntHash<long long unsigned int>, WTF::PairHashTraits<WTF::HashTraits<long long int>, WTF::HashTraits<WTF::RetainPtr<NSMutableArray>>>, WTF::HashTraits<long long int>> _field1;
};

struct HashMap<long unsigned int, WTF::RetainPtr<objc_object*>, WTF::IntHash<uintptr_t>, WTF::HashTraits<long unsigned int>, WTF::HashTraits<WTF::RetainPtr<objc_object*>>> {
    struct HashTable<long unsigned int, std::pair<long unsigned int, WTF::RetainPtr<objc_object*>>, WTF::PairFirstExtractor<std::pair<long unsigned int, WTF::RetainPtr<objc_object*>>>, WTF::IntHash<uintptr_t>, WTF::PairHashTraits<WTF::HashTraits<long unsigned int>, WTF::HashTraits<WTF::RetainPtr<objc_object*>>>, WTF::HashTraits<long unsigned int>> _field1;
};

struct HashSet<WTF::RefPtr<WebCore::ResourceLoader>, WTF::PtrHash<WTF::RefPtr<WebCore::ResourceLoader>>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader>>> {
    struct HashTable<int, int, WTF::IdentityExtractor<int>, WTF::IntHash<int32_t>, WTF::HashTraits<int32_t>, WTF::HashTraits<int32_t>> m_impl;
};

struct HashSet<WebCore::Frame*, WTF::PtrHash<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>> {
    struct HashTable<int, int, WTF::IdentityExtractor<int>, WTF::IntHash<int32_t>, WTF::HashTraits<int32_t>, WTF::HashTraits<int32_t>> _field1;
};

struct HashSet<WebCore::String, WebCore::StringHash, WTF::HashTraits<WebCore::String>> {
    struct HashTable<WebCore::StringImpl*, WebCore::StringImpl*, WTF::IdentityExtractor<WebCore::StringImpl*>, WebCore::StringHash, WTF::HashTraits<WebCore::StringImpl*>, WTF::HashTraits<WebCore::StringImpl*>> _field1;
};

struct HashSet<long unsigned int, WTF::IntHash<uintptr_t>, WTF::HashTraits<long unsigned int>> {
    struct HashTable<long unsigned int, long unsigned int, WTF::IdentityExtractor<long unsigned int>, WTF::IntHash<uintptr_t>, WTF::HashTraits<long unsigned int>, WTF::HashTraits<long unsigned int>> m_impl;
};

struct HashTable<WebCore::StringImpl*, WebCore::StringImpl*, WTF::IdentityExtractor<WebCore::StringImpl*>, WebCore::StringHash, WTF::HashTraits<WebCore::StringImpl*>, WTF::HashTraits<WebCore::StringImpl*>> {
    struct StringImpl **_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HashTable<WebCore::StringImpl*, std::pair<WebCore::StringImpl*, int>, WTF::PairFirstExtractor<std::pair<WebCore::StringImpl*, int>>, WebCore::CaseFoldingHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::StringImpl*>, WTF::HashTraits<int32_t>>, WTF::HashTraits<WebCore::StringImpl*>> {
    struct pair<WebCore::StringImpl*, int> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<WebCore::StringImpl*, std::pair<WebCore::StringImpl*, int>, WTF::PairFirstExtractor<std::pair<WebCore::StringImpl*, int>>, WebCore::StringHash, WTF::PairHashTraits<WTF::HashTraits<WebCore::StringImpl*>, WTF::HashTraits<int32_t>>, WTF::HashTraits<WebCore::StringImpl*>> {
    struct pair<WebCore::StringImpl*, int> *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct HashTable<int, int, WTF::IdentityExtractor<int>, WTF::IntHash<int32_t>, WTF::HashTraits<int32_t>, WTF::HashTraits<int32_t>> {
    int *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<int, std::pair<int, int>, WTF::PairFirstExtractor<std::pair<int, int>>, WTF::IntHash<int32_t>, WTF::PairHashTraits<WTF::HashTraits<int32_t>, WTF::HashTraits<int32_t>>, WTF::HashTraits<int32_t>> {
    struct pair<int, int> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<long long int, std::pair<long long int, WTF::RetainPtr<NSMutableArray>>, WTF::PairFirstExtractor<std::pair<long long int, WTF::RetainPtr<NSMutableArray>>>, WTF::IntHash<long long unsigned int>, WTF::PairHashTraits<WTF::HashTraits<long long int>, WTF::HashTraits<WTF::RetainPtr<NSMutableArray>>>, WTF::HashTraits<long long int>> {
    struct pair<long long int, WTF::RetainPtr<NSMutableArray>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<long unsigned int, long unsigned int, WTF::IdentityExtractor<long unsigned int>, WTF::IntHash<uintptr_t>, WTF::HashTraits<long unsigned int>, WTF::HashTraits<long unsigned int>> {
    unsigned long *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HashTable<long unsigned int, std::pair<long unsigned int, WTF::RetainPtr<objc_object*>>, WTF::PairFirstExtractor<std::pair<long unsigned int, WTF::RetainPtr<objc_object*>>>, WTF::IntHash<uintptr_t>, WTF::PairHashTraits<WTF::HashTraits<long unsigned int>, WTF::HashTraits<WTF::RetainPtr<objc_object*>>>, WTF::HashTraits<long unsigned int>> {
    struct pair<long unsigned int, WTF::RetainPtr<objc_object*>> *m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};

struct HistoryItem;

struct HitTestResult {
    struct RefPtr<WebCore::Node> _field1;
    struct RefPtr<WebCore::Node> _field2;
    struct IntPoint _field3;
    struct IntPoint _field4;
    struct RefPtr<WebCore::Element> _field5;
    struct RefPtr<WebCore::PlatformScrollbar> _field6;
};

struct IconLoader;

struct Image;

struct InspectorController;

struct IntPoint {
    int m_x;
    int m_y;
};

struct KURL {
    struct DeprecatedString urlString;
    _Bool m_isValid;
    int schemeEndPos;
    int userStartPos;
    int userEndPos;
    int passwordEndPos;
    int hostEndPos;
    int portEndPos;
    int pathEndPos;
    int queryEndPos;
    int fragmentEndPos;
};

struct KeyboardEvent {
    void **_field1;
    int _field2;
    struct AtomicString _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    struct EventTarget *_field10;
    unsigned short _field11;
    struct RefPtr<WebCore::EventTarget> _field12;
    unsigned long long _field13;
    struct RefPtr<WebCore::Event> _field14;
    struct RefPtr<WebCore::DOMWindow> _field15;
    int _field16;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    struct PlatformKeyboardEvent *_field17;
    struct String _field18;
    unsigned int _field19;
    unsigned int :1;
    struct Vector<WebCore::KeypressCommand, 0ul> _field20;
};

struct KeypressCommand;

struct MainResourceLoader;

struct NPClass;

struct NPObject {
    struct NPClass *_field1;
    unsigned int _field2;
};

struct NP_CGContext {
    struct CGContext *context;
    struct OpaqueWindowPtr *window;
};

struct NP_GLContext {
    struct _CGLContextObject *context;
    struct OpaqueWindowPtr *window;
};

struct NP_Port {
    struct OpaqueGrafPtr *port;
    int portx;
    int porty;
};

struct NamedAttrMap;

struct NavigationAction {
    struct KURL m_URL;
    int m_type;
    struct RefPtr<WebCore::Event> m_event;
};

struct NetscapePlugInStreamLoader {
    void **_field1;
    int _field2;
    struct RefPtr<WebCore::ResourceHandle> _field3;
    struct ResourceRequest _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    struct RefPtr<WebCore::Frame> _field11;
    struct RefPtr<WebCore::DocumentLoader> _field12;
    struct ResourceResponse _field13;
    unsigned long _field14;
    struct KURL _field15;
    struct RefPtr<WebCore::SharedBuffer> _field16;
    _Bool _field17;
    struct ResourceRequest _field18;
    struct NetscapePlugInStreamLoaderClient *_field19;
};

struct NetscapePlugInStreamLoaderClient;

struct Node {
    void **_field1;
    int _field2;
    struct Node *_field3;
    struct DocPtr<WebCore::Document> _field4;
    struct Node *_field5;
    struct Node *_field6;
    struct RenderObject *_field7;
    struct OwnPtr<WebCore::NodeListsNodeData> _field8;
    short _field9;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct NodeListsNodeData;

struct OpaqueCFragConnectionID;

struct OpaqueControlRef;

struct OpaqueEventHandlerCallRef;

struct OpaqueEventHandlerRef;

struct OpaqueEventRef;

struct OpaqueGrafPtr;

struct OpaqueJSContext;

struct OpaqueMenuRef;

struct OpaquePortState;

struct OpaqueWindowPtr;

struct OwnPtr<WebCore::Chrome> {
    struct Chrome *m_ptr;
};

struct OwnPtr<WebCore::ContextMenuController> {
    struct ContextMenuController *m_ptr;
};

struct OwnPtr<WebCore::DragController> {
    struct DragController *m_ptr;
};

struct OwnPtr<WebCore::FocusController> {
    struct FocusController *m_ptr;
};

struct OwnPtr<WebCore::FormSubmission> {
    struct FormSubmission *_field1;
};

struct OwnPtr<WebCore::IconLoader> {
    struct IconLoader *_field1;
};

struct OwnPtr<WebCore::InspectorController> {
    struct InspectorController *m_ptr;
};

struct OwnPtr<WebCore::NodeListsNodeData> {
    struct NodeListsNodeData *_field1;
};

struct OwnPtr<WebCore::ProgressTracker> {
    struct ProgressTracker *m_ptr;
};

struct OwnPtr<WebCore::ScheduledRedirection> {
    struct ScheduledRedirection *_field1;
};

struct OwnPtr<WebCore::SelectionController> {
    struct SelectionController *m_ptr;
};

struct OwnPtr<WebCore::Settings> {
    struct Settings *m_ptr;
};

struct Page {
    struct OwnPtr<WebCore::Chrome> _field1;
    struct OwnPtr<WebCore::SelectionController> _field2;
    struct OwnPtr<WebCore::DragController> _field3;
    struct OwnPtr<WebCore::FocusController> _field4;
    struct OwnPtr<WebCore::ContextMenuController> _field5;
    struct OwnPtr<WebCore::InspectorController> _field6;
    struct OwnPtr<WebCore::Settings> _field7;
    struct OwnPtr<WebCore::ProgressTracker> _field8;
    struct RefPtr<WebCore::BackForwardList> _field9;
    struct RefPtr<WebCore::Frame> _field10;
    struct RefPtr<WebCore::Node> _field11;
    struct EditorClient *_field12;
    int _field13;
    struct String _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    struct InspectorController *_field18;
    struct String _field19;
    struct String _field20;
    _Bool _field21;
    int _field22;
};

struct PassRefPtr<WebCore::BackForwardList> {
    struct BackForwardList *_field1;
};

struct PassRefPtr<WebCore::EditCommand> {
    struct EditCommand *_field1;
};

struct PassRefPtr<WebCore::HistoryItem> {
    struct HistoryItem *_field1;
};

struct PlatformKeyboardEvent;

struct PlatformScrollbar;

struct Point {
    short _field1;
    short _field2;
};

struct PolicyCheck {
    struct ResourceRequest _field1;
    struct RefPtr<WebCore::FormState> _field2;
    struct String _field3;
    void *_field4;
    void *_field5;
    void *_field6;
    void *_field7;
};

struct Position {
    struct RefPtr<WebCore::Node> m_node;
    int m_offset;
};

struct ProgressTracker;

struct QualifiedName {
    struct QualifiedNameImpl *_field1;
};

struct QualifiedNameImpl;

struct Range {
    int _field1;
    struct RefPtr<WebCore::Document> _field2;
    struct RefPtr<WebCore::Node> _field3;
    unsigned int _field4;
    struct RefPtr<WebCore::Node> _field5;
    unsigned int _field6;
    _Bool _field7;
};

struct RefPtr<WebCore::BackForwardList> {
    struct BackForwardList *m_ptr;
};

struct RefPtr<WebCore::CSSMutableStyleDeclaration> {
    struct CSSMutableStyleDeclaration *m_ptr;
};

struct RefPtr<WebCore::DOMWindow> {
    struct DOMWindow *_field1;
};

struct RefPtr<WebCore::Document> {
    struct Document *m_ptr;
};

struct RefPtr<WebCore::DocumentLoader> {
    struct DocumentLoader *m_ptr;
};

struct RefPtr<WebCore::Element> {
    struct Element *m_ptr;
};

struct RefPtr<WebCore::Event> {
    struct Event *m_ptr;
};

struct RefPtr<WebCore::EventTarget> {
    struct EventTarget *_field1;
};

struct RefPtr<WebCore::FormData> {
    struct FormData *m_ptr;
};

struct RefPtr<WebCore::FormState> {
    struct FormState *_field1;
};

struct RefPtr<WebCore::Frame> {
    struct Frame *m_ptr;
};

struct RefPtr<WebCore::HTMLFormElement> {
    struct HTMLFormElement *_field1;
};

struct RefPtr<WebCore::HistoryItem> {
    struct HistoryItem *_field1;
};

struct RefPtr<WebCore::MainResourceLoader> {
    struct MainResourceLoader *m_ptr;
};

struct RefPtr<WebCore::NamedAttrMap> {
    struct NamedAttrMap *_field1;
};

struct RefPtr<WebCore::Node> {
    struct Node *m_ptr;
};

struct RefPtr<WebCore::PlatformScrollbar> {
    struct PlatformScrollbar *m_ptr;
};

struct RefPtr<WebCore::ResourceHandle> {
    struct ResourceHandle *m_ptr;
};

struct RefPtr<WebCore::SharedBuffer> {
    struct SharedBuffer *m_ptr;
};

struct RefPtr<WebCore::StringImpl> {
    struct StringImpl *m_ptr;
};

struct RefPtr<WebCore::TextResourceDecoder> {
    struct TextResourceDecoder *_field1;
};

struct RenderObject;

struct Request;

struct ResourceError {
    struct String m_domain;
    int m_errorCode;
    struct String m_failingURL;
    struct String m_localizedDescription;
    _Bool m_dataIsUpToDate;
    struct RetainPtr<NSError> m_platformError;
    _Bool m_isNull;
};

struct ResourceHandle;

struct ResourceRequest {
    struct KURL m_url;
    int m_cachePolicy;
    double m_timeoutInterval;
    struct KURL m_mainDocumentURL;
    struct String m_httpMethod;
    struct HashMap<WebCore::String, WebCore::String, WebCore::CaseFoldingHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<WebCore::String>> m_httpHeaderFields;
    struct RefPtr<WebCore::FormData> m_httpBody;
    _Bool m_allowHTTPCookies;
    _Bool m_resourceRequestUpdated;
    _Bool m_platformRequestUpdated;
    struct RetainPtr<NSURLRequest> m_nsRequest;
};

struct ResourceResponse {
    struct KURL m_url;
    struct String m_mimeType;
    long long m_expectedContentLength;
    struct String m_textEncodingName;
    struct String m_suggestedFilename;
    int m_httpStatusCode;
    struct String m_httpStatusText;
    struct HashMap<WebCore::String, WebCore::String, WebCore::CaseFoldingHash, WTF::HashTraits<WebCore::String>, WTF::HashTraits<WebCore::String>> m_httpHeaderFields;
    int m_expirationDate;
    int m_lastModifiedDate;
    _Bool m_isUpToDate;
    _Bool m_isNull;
    struct RetainPtr<NSURLResponse> m_nsResponse;
};

struct RetainPtr<NSError> {
    NSError *m_ptr;
};

struct RetainPtr<NSURLRequest> {
    NSURLRequest *m_ptr;
};

struct RetainPtr<NSURLResponse> {
    NSURLResponse *m_ptr;
};

struct RetainPtr<objc_object*> {
    id m_ptr;
};

struct ScheduledRedirection;

struct SecurityOrigin {
    int _field1;
    struct String _field2;
    struct String _field3;
    unsigned short _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
};

struct Selection {
    struct Position m_base;
    struct Position m_extent;
    struct Position m_start;
    struct Position m_end;
    int m_affinity;
    int m_granularity;
    int m_state;
    _Bool m_baseIsFirst;
};

struct SelectionController;

struct Settings;

struct SharedBuffer;

struct String {
    struct RefPtr<WebCore::StringImpl> m_impl;
};

struct StringImpl;

struct StyleBase;

struct SubstituteData {
    struct RefPtr<WebCore::SharedBuffer> m_content;
    struct String m_mimeType;
    struct String m_textEncoding;
    struct KURL m_failingURL;
    struct KURL m_responseURL;
};

struct TextResourceDecoder;

struct Timer<WebCore::FrameLoader> {
    void **_field1;
    double _field2;
    double _field3;
    int _field4;
    unsigned int _field5;
    struct FrameLoader *_field6;
    struct {
        int *_field1;
    } _field7;
};

struct Vector<WebCore::KeypressCommand, 0ul> {
    unsigned int _field1;
    struct VectorBuffer<WebCore::KeypressCommand, 0ul> _field2;
};

struct Vector<WebCore::ResourceResponse, 0ul> {
    unsigned int m_size;
    struct VectorBuffer<WebCore::ResourceResponse, 0ul> m_impl;
};

struct VectorBuffer<WebCore::KeypressCommand, 0ul> {
    struct KeypressCommand *_field1;
    unsigned int _field2;
};

struct VectorBuffer<WebCore::ResourceResponse, 0ul> {
    struct ResourceResponse *m_buffer;
    unsigned int m_capacity;
};

struct WebDocumentLoaderMac {
    void **_field1;
    int _field2;
    _Bool _field3;
    struct Frame *_field4;
    struct RefPtr<WebCore::MainResourceLoader> _field5;
    struct HashSet<WTF::RefPtr<WebCore::ResourceLoader>, WTF::PtrHash<WTF::RefPtr<WebCore::ResourceLoader>>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader>>> _field6;
    struct HashSet<WTF::RefPtr<WebCore::ResourceLoader>, WTF::PtrHash<WTF::RefPtr<WebCore::ResourceLoader>>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader>>> _field7;
    struct HashSet<WTF::RefPtr<WebCore::ResourceLoader>, WTF::PtrHash<WTF::RefPtr<WebCore::ResourceLoader>>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader>>> _field8;
    struct RefPtr<WebCore::SharedBuffer> _field9;
    struct ResourceRequest _field10;
    struct SubstituteData _field11;
    struct ResourceRequest _field12;
    struct ResourceRequest _field13;
    struct ResourceRequest _field14;
    struct ResourceResponse _field15;
    struct ResourceError _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    struct String _field24;
    struct String _field25;
    struct NavigationAction _field26;
    struct ResourceRequest _field27;
    struct Vector<WebCore::ResourceResponse, 0ul> _field28;
    _Bool _field29;
    WebDataSource *_field30;
    _Bool _field31;
    struct RetainPtr<objc_object*> _field32;
    struct RetainPtr<objc_object*> _field33;
    struct HashSet<long unsigned int, WTF::IntHash<uintptr_t>, WTF::HashTraits<long unsigned int>> _field34;
};

struct WebHTMLViewInterpretKeyEventsParameters {
    struct KeyboardEvent *_field1;
    char _field2;
    char _field3;
    char _field4;
};

struct WebNetscapePlugInStreamLoaderClient {
    void **_field1;
    struct RetainPtr<objc_object*> _field2;
};

struct _CGLContextObject;

struct _NPNetscapeFuncs {
    unsigned short size;
    unsigned short version;
    void *geturl;
    void *posturl;
    void *requestread;
    void *newstream;
    void *write;
    void *destroystream;
    void *status;
    void *uagent;
    void *memalloc;
    void *memfree;
    void *memflush;
    void *reloadplugins;
    void *getJavaEnv;
    void *getJavaPeer;
    void *geturlnotify;
    void *posturlnotify;
    void *getvalue;
    void *setvalue;
    void *invalidaterect;
    void *invalidateregion;
    void *forceredraw;
    void *getstringidentifier;
    void *getstringidentifiers;
    void *getintidentifier;
    void *identifierisstring;
    void *utf8fromidentifier;
    void *intfromidentifier;
    void *createobject;
    void *retainobject;
    void *releaseobject;
    void *invoke;
    void *invokeDefault;
    void *evaluate;
    void *getproperty;
    void *setproperty;
    void *removeproperty;
    void *hasproperty;
    void *hasmethod;
    void *releasevariantvalue;
    void *setexception;
    void *pushpopupsenabledstate;
    void *poppopupsenabledstate;
    void *enumerate;
};

struct _NPP {
    void *_field1;
    void *_field2;
};

struct _NPPluginFuncs {
    unsigned short size;
    unsigned short version;
    void *newp;
    void *destroy;
    void *setwindow;
    void *newstream;
    void *destroystream;
    void *asfile;
    void *writeready;
    void *write;
    void *print;
    void *event;
    void *urlnotify;
    void *javaClass;
    void *getvalue;
    void *setvalue;
};

struct _NPRect {
    unsigned short top;
    unsigned short left;
    unsigned short bottom;
    unsigned short right;
};

struct _NPStream {
    void *pdata;
    void *ndata;
    char *url;
    unsigned int end;
    unsigned int lastmodified;
    void *notifyData;
    char *headers;
};

struct _NPWindow {
    void *window;
    int x;
    int y;
    unsigned int width;
    unsigned int height;
    struct _NPRect clipRect;
    int type;
};

struct _NSPoint {
    float x;
    float y;
};

struct _NSRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct _NSRect {
    struct _NSPoint origin;
    struct _NSSize size;
};

struct _NSSize {
    float width;
    float height;
};

struct _NSZone;

struct _WebFrameLoadDelegateImplementationCache {
    void *didClearWindowObjectForFrameFunc;
    void *windowScriptObjectAvailableFunc;
    void *didHandleOnloadEventsForFrameFunc;
    void *didReceiveServerRedirectForProvisionalLoadForFrameFunc;
    void *didCancelClientRedirectForFrameFunc;
    void *willPerformClientRedirectToURLDelayFireDateForFrameFunc;
    void *didChangeLocationWithinPageForFrameFunc;
    void *willCloseFrameFunc;
    void *didStartProvisionalLoadForFrameFunc;
    void *didReceiveTitleForFrameFunc;
    void *didCommitLoadForFrameFunc;
    void *didFailProvisionalLoadWithErrorForFrameFunc;
    void *didFailLoadWithErrorForFrameFunc;
    void *didFinishLoadForFrameFunc;
    void *didFirstLayoutInFrameFunc;
    void *didReceiveIconForFrameFunc;
    void *didFinishDocumentLoadForFrameFunc;
};

struct _WebResourceDelegateImplementationCache {
    void *didCancelAuthenticationChallengeFunc;
    void *didReceiveAuthenticationChallengeFunc;
    void *identifierForRequestFunc;
    void *willSendRequestFunc;
    void *didReceiveResponseFunc;
    void *didReceiveContentLengthFunc;
    void *didFinishLoadingFromDataSourceFunc;
    void *didFailLoadingWithErrorFromDataSourceFunc;
    void *didLoadResourceFromMemoryCacheFunc;
    void *willCacheResponseFunc;
    void *plugInFailedWithErrorFunc;
};

struct __AGLContextRec;

struct __AXUIElement;

struct __CFBundle;

struct __CFRunLoopTimer;

struct _jobject;

struct pair<WebCore::StringImpl*, int>;

struct pair<int, int>;

struct pair<long long int, WTF::RetainPtr<NSMutableArray>>;

struct pair<long unsigned int, WTF::RetainPtr<objc_object*>>;

union PluginPort {
    struct NP_Port qdPort;
    struct NP_CGContext cgPort;
    struct NP_GLContext aglPort;
};

/*
 * File: /Applications/OmniWeb.app/Contents/Frameworks/WebKit.framework/Versions/A/WebKit
 * Arch: PowerPC (ppc)
 *       Current version: 525.19.0, Compatibility version: 1.0.0
 */

@protocol NSCoding
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSObject
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)fp8;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12 withObject:(id)fp16;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)fp8;
- (BOOL)isMemberOfClass:(Class)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned int)retainCount;
- (id)description;
@end

@protocol NSTextInput
- (void)insertText:(id)fp8;
- (void)doCommandBySelector:(SEL)fp8;
- (void)setMarkedText:(id)fp8 selectedRange:(struct _NSRange)fp12;
- (void)unmarkText;
- (BOOL)hasMarkedText;
- (long)conversationIdentifier;
- (id)attributedSubstringFromRange:(struct _NSRange)fp8;
- (struct _NSRange)markedRange;
- (struct _NSRange)selectedRange;
- (struct _NSRect)firstRectForCharacterRange:(struct _NSRange)fp8;
- (unsigned int)characterIndexForPoint:(struct _NSPoint)fp8;
- (id)validAttributesForMarkedText;
@end

@protocol NSUserInterfaceValidations
- (BOOL)validateUserInterfaceItem:(id)fp8;
@end

@protocol NSValidatedUserInterfaceItem
- (SEL)action;
- (int)tag;
@end

@protocol OmniWebPluginResourceInfo
- (id)sourceURL;
- (id)MIMEType;
- (id)headers;
- (long long)size;
@end

@protocol WebCoreBridgeHolder
- (id)webCoreBridge;
@end

@protocol WebCoreFrameBridge
- (id)window;
- (id)firstResponder;
- (void)makeFirstResponder:(id)fp8;
- (void)runOpenPanelForFileButtonWithResultListener:(id)fp8;
- (struct _jobject *)getAppletInView:(id)fp8;
- (struct _jobject *)pollForAppletInView:(id)fp8;
- (void)issuePasteCommand;
- (void)setIsSelected:(BOOL)fp8 forView:(id)fp12;
- (void)dashboardRegionsChanged:(id)fp8;
- (void)willPopupMenu:(id)fp8;
- (struct _NSRect)customHighlightRect:(id)fp8 forLine:(struct _NSRect)fp12 representedNode:(struct Node *)fp28;
- (void)paintCustomHighlight:(id)fp8 forBox:(struct _NSRect)fp12 onLine:(struct _NSRect)fp28 behindText:(BOOL)fp44 entireLine:(BOOL)fp48 representedNode:(struct Node *)fp52;
- (int)keyboardUIMode;
- (id)imageTitleForFilename:(id)fp8 size:(struct _NSSize)fp12;
- (BOOL)shouldFilterImageForElement:(id)fp8 fromURL:(id)fp12;
- (void)imageElement:(id)fp8 didNotLoadFromURL:(id)fp12;
- (void)setIsUnrequestedPopUpOpenedBy:(id)fp8;
- (id)omniWebStringForKey:(id)fp8;
- (id)dragImageAndOffset:(struct _NSSize *)fp8 forLinkElement:(id)fp12;
@end

@protocol WebCoreFrameView
- (void)setHorizontalScrollingMode:(int)fp8;
- (void)setVerticalScrollingMode:(int)fp8;
- (void)setScrollingMode:(int)fp8;
- (int)horizontalScrollingMode;
- (int)verticalScrollingMode;
- (void)setScrollBarsSuppressed:(BOOL)fp8 repaintOnUnsuppress:(BOOL)fp12;
@end

@protocol WebCoreHistoryProvider <NSObject>
- (BOOL)containsURL:(const unsigned short *)fp8 length:(unsigned int)fp12;
@end

@protocol WebCorePluginInfo <NSObject>
- (id)name;
- (id)filename;
- (id)pluginDescription;
- (id)MIMETypeEnumerator;
- (id)descriptionForMIMEType:(id)fp8;
- (id)extensionsForMIMEType:(id)fp8;
@end

@protocol WebCoreRenderTreeCopier <NSObject>
- (id)nodeWithName:(id)fp8 position:(struct _NSPoint)fp12 rect:(struct _NSRect)fp20 view:(id)fp36 children:(id)fp40;
@end

@protocol WebCoreViewFactory
- (void)drawUnloadedImage:(id)fp8 inRect:(struct _NSRect)fp12;
- (id)pluginsInfo;
- (void)refreshPlugins:(BOOL)fp8;
- (id)pluginNameForMIMEType:(id)fp8;
- (BOOL)pluginSupportsMIMEType:(id)fp8;
- (id)inputElementAltText;
- (id)resetButtonDefaultLabel;
- (id)searchableIndexIntroduction;
- (id)submitButtonDefaultLabel;
- (id)fileButtonChooseFileLabel;
- (id)fileButtonNoFileSelectedLabel;
- (id)copyImageUnknownFileLabel;
- (id)contextMenuItemTagOpenLinkInNewWindow;
- (id)contextMenuItemTagDownloadLinkToDisk;
- (id)contextMenuItemTagCopyLinkToClipboard;
- (id)contextMenuItemTagOpenImageInNewWindow;
- (id)contextMenuItemTagDownloadImageToDisk;
- (id)contextMenuItemTagCopyImageToClipboard;
- (id)contextMenuItemTagOpenFrameInNewWindow;
- (id)contextMenuItemTagCopy;
- (id)contextMenuItemTagGoBack;
- (id)contextMenuItemTagGoForward;
- (id)contextMenuItemTagStop;
- (id)contextMenuItemTagReload;
- (id)contextMenuItemTagCut;
- (id)contextMenuItemTagPaste;
- (id)contextMenuItemTagNoGuessesFound;
- (id)contextMenuItemTagIgnoreSpelling;
- (id)contextMenuItemTagLearnSpelling;
- (id)contextMenuItemTagSearchInSpotlight;
- (id)contextMenuItemTagSearchWeb;
- (id)contextMenuItemTagLookUpInDictionary;
- (id)contextMenuItemTagOpenLink;
- (id)contextMenuItemTagIgnoreGrammar;
- (id)contextMenuItemTagSpellingMenu;
- (id)contextMenuItemTagShowSpellingPanel:(_Bool)fp8;
- (id)contextMenuItemTagCheckSpelling;
- (id)contextMenuItemTagCheckSpellingWhileTyping;
- (id)contextMenuItemTagCheckGrammarWithSpelling;
- (id)contextMenuItemTagFontMenu;
- (id)contextMenuItemTagShowFonts;
- (id)contextMenuItemTagBold;
- (id)contextMenuItemTagItalic;
- (id)contextMenuItemTagUnderline;
- (id)contextMenuItemTagOutline;
- (id)contextMenuItemTagStyles;
- (id)contextMenuItemTagShowColors;
- (id)contextMenuItemTagSpeechMenu;
- (id)contextMenuItemTagStartSpeaking;
- (id)contextMenuItemTagStopSpeaking;
- (id)contextMenuItemTagWritingDirectionMenu;
- (id)contextMenuItemTagDefaultDirection;
- (id)contextMenuItemTagLeftToRight;
- (id)contextMenuItemTagRightToLeft;
- (id)contextMenuItemTagInspectElement;
- (id)searchMenuNoRecentSearchesText;
- (id)searchMenuRecentSearchesText;
- (id)searchMenuClearRecentSearchesText;
- (id)defaultLanguageCode;
- (BOOL)objectIsTextMarker:(id)fp8;
- (BOOL)objectIsTextMarkerRange:(id)fp8;
- (id)textMarkerWithBytes:(const void *)fp8 length:(unsigned long)fp12;
- (BOOL)getBytes:(void *)fp8 fromTextMarker:(id)fp12 length:(unsigned long)fp16;
- (id)textMarkerRangeWithStart:(id)fp8 end:(id)fp12;
- (id)startOfTextMarkerRange:(id)fp8;
- (id)endOfTextMarkerRange:(id)fp8;
- (void)accessibilityHandleFocusChanged;
- (struct __AXUIElement *)AXUIElementForElement:(id)fp8;
- (void)unregisterUniqueIdForUIElement:(id)fp8;
- (id)bridgeForView:(id)fp8;
- (id)AXWebAreaText;
- (id)AXLinkText;
- (id)AXListMarkerText;
- (id)AXImageMapText;
- (id)AXHeadingText;
- (id)unknownFileSizeText;
@end

@protocol WebDocumentDOM <NSObject>
- (id)DOMDocument;
- (BOOL)canSaveAsWebArchive;
@end

@protocol WebDocumentElement <NSObject>
- (id)elementAtPoint:(struct _NSPoint)fp8;
- (id)elementAtPoint:(struct _NSPoint)fp8 allowShadowContent:(BOOL)fp16;
@end

@protocol WebDocumentIncrementalSearching
- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20 startInSelection:(BOOL)fp24;
@end

@protocol WebDocumentRepresentation <NSObject>
- (void)setDataSource:(id)fp8;
- (void)receivedData:(id)fp8 withDataSource:(id)fp12;
- (void)receivedError:(id)fp8 withDataSource:(id)fp12;
- (void)finishedLoadingWithDataSource:(id)fp8;
- (BOOL)canProvideDocumentSource;
- (id)documentSource;
- (id)title;
@end

@protocol WebDocumentSearching <NSObject>
- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20;
@end

@protocol WebDocumentSelection <WebDocumentText>
- (id)pasteboardTypesForSelection;
- (void)writeSelectionWithPasteboardTypes:(id)fp8 toPasteboard:(id)fp12;
- (id)selectionTextRects;
- (struct _NSRect)selectionRect;
- (id)selectionImageForcingBlackText:(BOOL)fp8;
- (id)selectionImageForcingWhiteText:(BOOL)fp8;
- (struct _NSRect)selectionImageRect;
- (id)selectionView;
@end

@protocol WebDocumentText <NSObject>
- (BOOL)supportsTextEncoding;
- (id)string;
- (id)attributedString;
- (id)selectedString;
- (id)selectedAttributedString;
- (void)selectAll;
- (void)deselectAll;
@end

@protocol WebDocumentView <NSObject>
- (void)setDataSource:(id)fp8;
- (void)dataSourceUpdated:(id)fp8;
- (void)setNeedsLayout:(BOOL)fp8;
- (void)layout;
- (void)viewWillMoveToHostWindow:(id)fp8;
- (void)viewDidMoveToHostWindow;
@end

@protocol WebFormDelegate <NSObject>
- (void)textFieldDidBeginEditing:(id)fp8 inFrame:(id)fp12;
- (void)textFieldDidEndEditing:(id)fp8 inFrame:(id)fp12;
- (void)textDidChangeInTextField:(id)fp8 inFrame:(id)fp12;
- (void)textDidChangeInTextArea:(id)fp8 inFrame:(id)fp12;
- (BOOL)textField:(id)fp8 doCommandBySelector:(SEL)fp12 inFrame:(id)fp16;
- (BOOL)textField:(id)fp8 shouldHandleEvent:(id)fp12 inFrame:(id)fp16;
- (void)frame:(id)fp8 sourceFrame:(id)fp12 willSubmitForm:(id)fp16 withValues:(id)fp20 submissionListener:(id)fp24;
@end

@protocol WebFormSubmissionListener <NSObject>
- (void)continue;
@end

@protocol WebMultipleTextMatches <NSObject>
- (void)setMarkedTextMatchesAreHighlighted:(BOOL)fp8;
- (BOOL)markedTextMatchesAreHighlighted;
- (unsigned int)markAllMatchesForText:(id)fp8 caseSensitive:(BOOL)fp12 limit:(unsigned int)fp16;
- (void)unmarkAllTextMatches;
- (id)rectsForTextMatches;
@end

@protocol WebPlugInStreamLoaderDelegate
- (void)startStreamWithResponse:(id)fp8;
- (void)destroyStreamWithError:(id)fp8;
- (void)cancelLoadAndDestroyStreamWithError:(id)fp8;
- (void)receivedData:(id)fp8;
- (void)finishedLoading;
@end

@protocol WebPluginManualLoader
- (void)pluginView:(id)fp8 receivedResponse:(id)fp12;
- (void)pluginView:(id)fp8 receivedData:(id)fp12;
- (void)pluginView:(id)fp8 receivedError:(id)fp12;
- (void)pluginViewFinishedLoading:(id)fp8;
@end

@protocol WebPolicyDecisionListener <NSObject>
- (void)use;
- (void)download;
- (void)ignore;
@end

@protocol WebScriptDebugListener <NSObject>
- (void)webView:(id)fp8 didLoadMainResourceForDataSource:(id)fp12;
- (void)webView:(id)fp8 didParseSource:(id)fp12 baseLineNumber:(unsigned int)fp16 fromURL:(id)fp20 sourceId:(int)fp24 forWebFrame:(id)fp28;
- (void)webView:(id)fp8 failedToParseSource:(id)fp12 baseLineNumber:(unsigned int)fp16 fromURL:(id)fp20 withError:(id)fp24 forWebFrame:(id)fp28;
- (void)webView:(id)fp8 didEnterCallFrame:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 willExecuteStatement:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 willLeaveCallFrame:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 exceptionWasRaised:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
@end

@protocol WebScriptDebugServer <NSObject>
- (oneway void)addListener:(id)fp8;
- (oneway void)removeListener:(id)fp8;
- (oneway void)step;
- (oneway void)pause;
- (oneway void)resume;
- (oneway char)isPaused;
@end

@protocol WebScriptDebugger
- (id)globalObject;
- (id)newWrapperForFrame:(id)fp8;
- (void)parsedSource:(id)fp8 fromURL:(id)fp12 sourceId:(int)fp16 startLine:(int)fp20 errorLine:(int)fp24 errorMessage:(id)fp28;
- (void)enteredFrame:(id)fp8 sourceId:(int)fp12 line:(int)fp16;
- (void)hitStatement:(id)fp8 sourceId:(int)fp12 line:(int)fp16;
- (void)leavingFrame:(id)fp8 sourceId:(int)fp12 line:(int)fp16;
- (void)exceptionRaised:(id)fp8 sourceId:(int)fp12 line:(int)fp16;
@end

@protocol _WebDocumentTextSizing <NSObject>
- (void)_makeTextSmaller:(id)fp8;
- (void)_makeTextLarger:(id)fp8;
- (void)_makeTextStandardSize:(id)fp8;
- (BOOL)_tracksCommonSizeFactor;
- (void)_textSizeMultiplierChanged;
- (BOOL)_canMakeTextSmaller;
- (BOOL)_canMakeTextLarger;
- (BOOL)_canMakeTextStandardSize;
@end

@protocol _WebDocumentViewState <NSObject>
- (struct _NSPoint)scrollPoint;
- (void)setScrollPoint:(struct _NSPoint)fp8;
- (id)viewState;
- (void)setViewState:(id)fp8;
@end

@interface CarbonWindowAdapter : NSWindow
{
    struct OpaqueWindowPtr *_windowRef;
    BOOL _windowRefIsOwned;
    BOOL _carbon;
    void *_handleEventUPP;
    struct OpaqueEventHandlerRef *_eventHandler;
    BOOL _passingCarbonWindowActivationEvents;
}

+ (Class)frameViewClassForStyleMask:(unsigned int)fp8;
- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (id)initWithCarbonWindowRef:(struct OpaqueWindowPtr *)fp8 takingOwnership:(BOOL)fp12 disableOrdering:(BOOL)fp16 carbon:(BOOL)fp20;
- (void)setViewsNeedDisplay:(BOOL)fp8;
- (id)initWithCarbonWindowRef:(struct OpaqueWindowPtr *)fp8 takingOwnership:(BOOL)fp12;
- (void)dealloc;
- (void)finalize;
- (struct OpaqueWindowPtr *)windowRef;
- (BOOL)_hasWindowRef;
- (BOOL)_managesWindowRef;
- (void)_removeWindowRef;
- (unsigned long)_carbonWindowClass;
- (BOOL)reconcileToCarbonWindowBounds;
- (void)sendSuperEvent:(id)fp8;
- (void)relinquishFocus;
- (BOOL)makeFirstResponder:(id)fp8;
- (void)_cancelKey:(id)fp8;
- (void)_commonAwake;
- (id)_destroyRealWindow:(BOOL)fp8;
- (void)_oldPlaceWindow:(struct _NSRect)fp8;
- (void)_termWindowIfOwner;
- (void)_windowMovedToRect:(struct _NSRect)fp8;
- (struct _NSRect)constrainFrameRect:(struct _NSRect)fp8 toScreen:(id)fp24;
- (void)selectKeyViewFollowingView:(id)fp8;
- (void)selectKeyViewPrecedingView:(id)fp8;
- (void)makeKeyWindow;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)setContentView:(id)fp8;
- (BOOL)worksWhenModal;
- (void)_setModalWindowLevel;
- (id)_clearModalWindowLevel;
- (unsigned long)carbonHICommandIDFromActionSelector:(SEL)fp8;
- (void)sendCarbonProcessHICommandEvent:(unsigned long)fp8;
- (unsigned char)sendCarbonUpdateHICommandStatusEvent:(unsigned long)fp8 withMenuRef:(struct OpaqueMenuRef *)fp12 andMenuItemIndex:(unsigned short)fp16;
- (void)_handleRootBoundsChanged;
- (void)_handleContentBoundsChanged;
- (long)_handleCarbonEvent:(struct OpaqueEventRef *)fp8 callRef:(struct OpaqueEventHandlerCallRef *)fp12;
- (void)_reallyDoOrderWindow:(int)fp8 relativeTo:(int)fp12 findKey:(BOOL)fp16 forCounter:(BOOL)fp20 force:(BOOL)fp24 isModal:(BOOL)fp28;
- (struct _NSRect)_growBoxRect;

@end

@interface CarbonWindowContentView : NSView
{
}

@end

@interface CarbonWindowFrame : NSView
{
    unsigned int _styleMask;
}

+ (struct _NSRect)frameRectForContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24;
+ (struct _NSRect)contentRectForFrameRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24;
+ (struct _NSSize)minFrameSizeForMinContentSize:(struct _NSSize)fp8 styleMask:(unsigned int)fp16;
- (struct _NSRect)titlebarRect;
- (struct _NSRect)frameRectForContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24;
- (struct _NSRect)contentRectForFrameRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24;
- (struct _NSSize)minFrameSizeForMinContentSize:(struct _NSSize)fp8 styleMask:(unsigned int)fp16;
- (id)initWithFrame:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 owner:(id)fp28;
- (void)dealloc;
- (void)_setFrameNeedsDisplay:(BOOL)fp8;
- (void)_setSheet:(BOOL)fp8;
- (void)_updateButtonState;
- (BOOL)_canHaveToolbar;
- (BOOL)_toolbarIsInTransition;
- (BOOL)_toolbarIsShown;
- (BOOL)_toolbarIsHidden;
- (void)_showToolbarWithAnimation:(BOOL)fp8;
- (void)_hideToolbarWithAnimation:(BOOL)fp8;
- (float)_distanceFromToolbarBaseToTitlebar;
- (id)closeButton;
- (unsigned int)styleMask;
- (struct _NSRect)dragRectForFrameRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (id)minimizeButton;
- (void)setTitle:(id)fp8;
- (id)title;
- (float)_sheetHeightAdjustment;
- (float)_maxTitlebarTitleRect;
- (void)_clearDragMargins;
- (void)_resetDragMargins;

@end

@interface HIViewAdapter : NSObject
{
}

+ (void)bindHIViewToNSView:(struct OpaqueControlRef *)fp8 nsView:(id)fp12;
+ (struct OpaqueControlRef *)getHIViewForNSView:(id)fp8;
+ (void)unbindNSView:(id)fp8;

@end

@interface MenuItemProxy : NSObject <NSValidatedUserInterfaceItem>
{
    int _tag;
    SEL _action;
}

- (id)initWithAction:(SEL)fp8;
- (SEL)action;
- (int)tag;

@end

@interface WebArchive : NSObject <NSCoding, NSCopying>
{
    WebArchivePrivate *_private;
}

- (id)init;
- (id)initWithMainResource:(id)fp8 subresources:(id)fp12 subframeArchives:(id)fp16;
- (id)_initWithPropertyList:(id)fp8;
- (id)initWithData:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)mainResource;
- (id)subresources;
- (id)subframeArchives;
- (id)_propertyListRepresentation;
- (id)data;

@end

@interface WebArchivePrivate : NSObject
{
    WebResource *mainResource;
    NSArray *subresources;
    NSArray *subframeArchives;
}

- (void)dealloc;

@end

@interface WebArchiver : NSObject
{
}

+ (id)_subframeArchivesForFrame:(id)fp8;
+ (id)archiveFrame:(id)fp8;
+ (id)archiveMainResourceForFrame:(id)fp8;
+ (id)_archiveCurrentStateForFrame:(id)fp8;
+ (id)_archiveWithMarkupString:(id)fp8 fromFrame:(id)fp12 nodes:(id)fp16;
+ (id)archiveRange:(id)fp8;
+ (id)archiveNode:(id)fp8;
+ (id)archiveSelectionInFrame:(id)fp8;

@end

@interface NonBlockingPanel : NSPanel
{
}

- (BOOL)_blocksActionWhenModal:(SEL)fp8;

@end

@interface WebAuthenticationPanel : NSObject
{
    id mainLabel;
    id panel;
    id password;
    id smallLabel;
    id username;
    id imageView;
    id remember;
    BOOL nibLoaded;
    BOOL usingSheet;
    id callback;
    SEL selector;
    NSURLAuthenticationChallenge *challenge;
}

- (id)initWithCallback:(id)fp8 selector:(SEL)fp12;
- (void)dealloc;
- (void)cancel:(id)fp8;
- (void)logIn:(id)fp8;
- (BOOL)loadNib;
- (void)setUpForChallenge:(id)fp8;
- (void)runAsModalDialogWithChallenge:(id)fp8;
- (void)runAsSheetOnWindow:(id)fp8 withChallenge:(id)fp12;
- (void)sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;

@end

@interface WebBackForwardList : NSObject
{
    WebBackForwardListPrivate *_private;
}

- (id)init;
- (void)dealloc;
- (void)finalize;
- (void)_close;
- (void)addItem:(id)fp8;
- (void)removeItem:(id)fp8;
- (BOOL)containsItem:(id)fp8;
- (void)goBack;
- (void)goForward;
- (void)goToItem:(id)fp8;
- (id)backItem;
- (id)currentItem;
- (id)forwardItem;
- (id)backListWithLimit:(int)fp8;
- (id)forwardListWithLimit:(int)fp8;
- (int)capacity;
- (void)setCapacity:(int)fp8;
- (id)description;
- (void)setPageCacheSize:(unsigned int)fp8;
- (unsigned int)pageCacheSize;
- (int)backListCount;
- (int)forwardListCount;
- (id)itemAtIndex:(int)fp8;

@end

@interface WebBackForwardList (WebBackForwardListInternal)
- (id)initWithBackForwardList:(struct PassRefPtr<WebCore::BackForwardList>)fp8;
@end

@interface WebBaseNetscapePluginStreamFossil : NSObject <OmniWebPluginResourceInfo>
{
    NSURL *_sourceURL;
    NSString *_mimeType;
    NSDictionary *_headers;
    long long _size;
}

+ (id)fossilWithStream:(id)fp8;
- (id)_initWithSourceURL:(id)fp8 mimeType:(id)fp12 headers:(id)fp16 size:(long long)fp20;
- (void)dealloc;
- (id)sourceURL;
- (id)MIMEType;
- (id)headers;
- (long long)size;

@end

@interface WebBaseNetscapePluginStream : NSObject <WebPlugInStreamLoaderDelegate>
{
    NSMutableData *deliveryData;
    NSURL *requestURL;
    NSURL *responseURL;
    NSString *MIMEType;
    struct _NPP *plugin;
    unsigned short transferMode;
    int offset;
    struct _NPStream stream;
    NSString *path;
    int fileDescriptor;
    BOOL sendNotification;
    void *notifyData;
    char *headers;
    WebBaseNetscapePluginView *pluginView;
    short reason;
    BOOL isTerminated;
    void *NPP_NewStream;
    void *NPP_DestroyStream;
    void *NPP_StreamAsFile;
    void *NPP_WriteReady;
    void *NPP_Write;
    void *NPP_URLNotify;
    NSURLResponse *_urlResponse;
}

+ (struct _NPP *)ownerForStream:(struct _NPStream *)fp8;
+ (short)reasonForError:(id)fp8;
- (id)_pluginCancelledConnectionError;
- (id)errorForReason:(short)fp8;
- (id)initWithRequestURL:(id)fp8 plugin:(struct _NPP *)fp12 notifyData:(void *)fp16 sendNotification:(BOOL)fp20;
- (void)dealloc;
- (void)finalize;
- (unsigned short)transferMode;
- (struct _NPP *)plugin;
- (void)setRequestURL:(id)fp8;
- (void)setResponseURL:(id)fp8;
- (void)setPlugin:(struct _NPP *)fp8;
- (void)setMIMEType:(id)fp8;
- (void)startStreamResponseURL:(id)fp8 expectedContentLength:(long long)fp12 lastModifiedDate:(id)fp20 MIMEType:(id)fp24 headers:(id)fp28;
- (void)startStreamWithResponse:(id)fp8;
- (void)_destroyStream;
- (void)_destroyStreamWithReason:(short)fp8;
- (void)cancelLoadWithError:(id)fp8;
- (void)destroyStreamWithError:(id)fp8;
- (void)cancelLoadAndDestroyStreamWithError:(id)fp8;
- (void)_deliverData;
- (void)_deliverDataToFile:(id)fp8;
- (void)finishedLoading;
- (void)receivedData:(id)fp8;

@end

@interface WebBaseNetscapePluginStream (OmniExtensions) <OmniWebPluginResourceInfo>
- (id)sourceURL;
- (id)MIMEType;
- (id)headers;
- (long long)size;
@end

@interface WebPluginRequest : NSObject
{
    NSURLRequest *_request;
    NSString *_frameName;
    void *_notifyData;
    BOOL _didStartFromUserGesture;
    BOOL _sendNotification;
}

- (id)initWithRequest:(id)fp8 frameName:(id)fp12 notifyData:(void *)fp16 sendNotification:(BOOL)fp20 didStartFromUserGesture:(BOOL)fp24;
- (void)dealloc;
- (id)request;
- (id)frameName;
- (BOOL)isCurrentEventUserGesture;
- (BOOL)sendNotification;
- (void *)notifyData;

@end

@interface WebBaseNetscapePluginView : NSView <WebPluginManualLoader>
{
    WebNetscapePluginPackage *pluginPackage;
    NSURL *sourceURL;
    WebFrame *_webFrame;
    BOOL _loadManually;
    WebNetscapePluginStream *_manualStream;
    unsigned int _dataLengthReceived;
    NSError *_error;
    int mode;
    unsigned int argsCount;
    char **cAttributes;
    char **cValues;
    struct _NPP *plugin;
    struct _NPWindow window;
    struct _NPWindow lastSetWindow;
    union PluginPort nPort;
    union PluginPort lastSetPort;
    int drawingModel;
    struct __AGLContextRec *aglContext;
    NSWindow *aglWindow;
    struct OpaqueGrafPtr *offscreenGWorld;
    BOOL isStarted;
    BOOL inSetWindow;
    BOOL suspendKeyUpEvents;
    BOOL hasFocus;
    BOOL currentEventIsUserGesture;
    BOOL isTransparent;
    BOOL isCompletelyObscured;
    BOOL shouldStopSoon;
    unsigned int pluginFunctionCallDepth;
    DOMElement *element;
    int specifiedHeight;
    int specifiedWidth;
    NSString *MIMEType;
    NSURL *baseURL;
    int trackingTag;
    NSMutableArray *streams;
    NSMutableDictionary *pendingFrameLoads;
    NSTimer *nullEventTimer;
    void *NPP_New;
    void *NPP_Destroy;
    void *NPP_SetWindow;
    void *NPP_NewStream;
    void *NPP_DestroyStream;
    void *NPP_StreamAsFile;
    void *NPP_WriteReady;
    void *NPP_Write;
    void *NPP_Print;
    void *NPP_HandleEvent;
    void *NPP_URLNotify;
    void *NPP_GetValue;
    void *NPP_SetValue;
    struct OpaqueEventHandlerRef *keyEventHandler;
    BOOL isFiltered;
    NSMutableArray *_streamFossils;
}

+ (void)initialize;
+ (void)getCarbonEvent:(struct EventRecord *)fp8;
+ (void)setCurrentPluginView:(id)fp8;
+ (id)currentPluginView;
- (void)getCarbonEvent:(struct EventRecord *)fp8;
- (unsigned short)modifiersForEvent:(id)fp8;
- (void)getCarbonEvent:(struct EventRecord *)fp8 withEvent:(id)fp12;
- (BOOL)superviewsHaveSuperviews;
- (void)fixWindowPort;
- (struct _NSRect)visibleRect;
- (struct OpaquePortState *)saveAndSetNewPortStateForUpdate:(BOOL)fp8;
- (struct OpaquePortState *)saveAndSetNewPortState;
- (void)restorePortState:(struct OpaquePortState *)fp8;
- (BOOL)sendEvent:(struct EventRecord *)fp8;
- (void)sendActivateEvent:(BOOL)fp8;
- (BOOL)sendUpdateEvent;
- (void)sendNullEvent;
- (void)stopNullEvents;
- (void)restartNullEvents;
- (BOOL)acceptsFirstResponder;
- (void)installKeyEventHandler;
- (void)removeKeyEventHandler;
- (void)setHasFocus:(BOOL)fp8;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)rightMouseDown:(id)fp8;
- (void)rightMouseUp:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (unsigned long)keyMessageForEvent:(id)fp8;
- (void)keyUp:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)sendModifierEventWithKeyCode:(int)fp8 character:(BOOL)fp12;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)selectAll:(id)fp8;
- (BOOL)isNewWindowEqualToOldWindow;
- (void)updateAndSetWindow;
- (void)setWindowIfNecessary;
- (void)removeTrackingRect;
- (void)resetTrackingRect;
- (BOOL)canStart;
- (void)didStart;
- (void)addWindowObservers;
- (void)removeWindowObservers;
- (BOOL)start;
- (void)stop;
- (BOOL)isStarted;
- (id)dataSource;
- (id)webFrame;
- (id)webView;
- (id)currentWindow;
- (struct _NPP *)plugin;
- (id)pluginPackage;
- (void)setPluginPackage:(id)fp8;
- (void)setMIMEType:(id)fp8;
- (void)setBaseURL:(id)fp8;
- (void)setAttributeKeys:(id)fp8 andValues:(id)fp12;
- (void)setMode:(int)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 pluginPackage:(id)fp24 URL:(id)fp28 baseURL:(id)fp32 MIMEType:(id)fp36 attributeKeys:(id)fp40 attributeValues:(id)fp44 loadManually:(BOOL)fp48 DOMElement:(id)fp52;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)fini;
- (void)disconnectStream:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isFlipped;
- (void)renewGState;
- (void)tellQuickTimeToChill;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewWillMoveToSuperview:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToHostWindow:(id)fp8;
- (void)viewDidMoveToHostWindow;
- (void)windowWillClose:(id)fp8;
- (void)windowBecameKey:(id)fp8;
- (void)windowResignedKey:(id)fp8;
- (void)windowDidMiniaturize:(id)fp8;
- (void)windowDidDeminiaturize:(id)fp8;
- (void)loginWindowDidSwitchFromUser:(id)fp8;
- (void)loginWindowDidSwitchToUser:(id)fp8;
- (void)preferencesHaveChanged:(id)fp8;
- (struct NPObject *)createPluginScriptableObject;
- (void)willCallPlugInFunction;
- (void)didCallPlugInFunction;
- (void)pluginView:(id)fp8 receivedResponse:(id)fp12;
- (void)pluginView:(id)fp8 receivedData:(id)fp12;
- (void)pluginView:(id)fp8 receivedError:(id)fp12;
- (void)pluginViewFinishedLoading:(id)fp8;

@end

@interface NSData (PluginExtras)
- (BOOL)_web_startsWithBlankLine;
- (int)_web_locationAfterFirstBlankLine;
@end

@interface WebBaseNetscapePluginView (Internal)
- (short)_createPlugin;
- (void)_destroyPlugin;
- (void)_viewHasMoved;
- (id)_printedPluginBitmap;
- (BOOL)_createAGLContextIfNeeded;
- (BOOL)_createWindowedAGLContext;
- (BOOL)_createWindowlessAGLContext;
- (struct _CGLContextObject *)_cglContext;
- (BOOL)_getAGLOffscreenBuffer:(void **)fp8 width:(int *)fp12 height:(int *)fp16;
- (void)_destroyAGLContext;
- (void)_reshapeAGLWindow;
- (void)_hideAGLWindow;
- (id)_aglOffscreenImageForDrawingInRect:(struct _NSRect)fp8;
- (void)_redeliverStream;
@end

@interface WebBaseNetscapePluginView (WebNPPCallbacks)
- (id)requestWithURLCString:(const char *)fp8;
- (void)evaluateJavaScriptPluginRequest:(id)fp8;
- (void)webFrame:(id)fp8 didFinishLoadWithReason:(short)fp12;
- (void)webFrame:(id)fp8 didFinishLoadWithError:(id)fp12;
- (void)loadPluginRequest:(id)fp8;
- (short)loadRequest:(id)fp8 inTarget:(const char *)fp12 withNotifyData:(void *)fp16 sendNotification:(BOOL)fp20;
- (short)getURLNotify:(const char *)fp8 target:(const char *)fp12 notifyData:(void *)fp16;
- (short)getURL:(const char *)fp8 target:(const char *)fp12;
- (short)_postURL:(const char *)fp8 target:(const char *)fp12 len:(unsigned long)fp16 buf:(const char *)fp20 file:(unsigned char)fp24 notifyData:(void *)fp28 sendNotification:(BOOL)fp32 allowHeaders:(BOOL)fp36;
- (short)postURLNotify:(const char *)fp8 target:(const char *)fp12 len:(unsigned long)fp16 buf:(const char *)fp20 file:(unsigned char)fp24 notifyData:(void *)fp28;
- (short)postURL:(const char *)fp8 target:(const char *)fp12 len:(unsigned long)fp16 buf:(const char *)fp20 file:(unsigned char)fp24;
- (short)newStream:(char *)fp8 target:(const char *)fp12 stream:(struct _NPStream **)fp16;
- (short)write:(struct _NPStream *)fp8 len:(long)fp12 buffer:(void *)fp16;
- (short)destroyStream:(struct _NPStream *)fp8 reason:(short)fp12;
- (const char *)userAgent;
- (void)status:(const char *)fp8;
- (void)invalidateRect:(struct _NPRect *)fp8;
- (_Bool)isOpaque;
- (void)invalidateRegion:(void *)fp8;
- (void)forceRedraw;
- (short)getVariable:(int)fp8 value:(void *)fp12;
- (short)setVariable:(int)fp8 value:(void *)fp12;
@end

@interface WebBaseNetscapePluginView (OmniExtensions)
- (void)setIsFiltered:(BOOL)fp8;
- (BOOL)_omni_isFiltered;
- (id)_omni_blockedURL;
- (void)loadFilteredContent;
- (id)sourceURL;
- (id)MIMEType;
- (id)resources;
@end

@interface WebBasePluginPackage : NSObject <WebCorePluginInfo>
{
    NSMutableSet *pluginDatabases;
    NSString *name;
    NSString *path;
    NSString *pluginDescription;
    NSBundle *bundle;
    struct __CFBundle *cfBundle;
    NSDictionary *MIMEToDescription;
    NSDictionary *MIMEToExtensions;
    NSMutableDictionary *extensionToMIME;
    void *BP_CreatePluginMIMETypesPreferences;
}

+ (id)pluginWithPath:(id)fp8;
+ (id)preferredLocalizationName;
- (id)pathByResolvingSymlinksAndAliasesInPath:(id)fp8;
- (id)initWithPath:(id)fp8;
- (BOOL)getPluginInfoFromBundleAndMIMEDictionary:(id)fp8;
- (id)pListForPath:(id)fp8 createFile:(BOOL)fp12;
- (BOOL)getPluginInfoFromPLists;
- (BOOL)load;
- (void)dealloc;
- (void)finalize;
- (id)name;
- (id)path;
- (id)filename;
- (id)pluginDescription;
- (id)extensionEnumerator;
- (id)MIMETypeEnumerator;
- (id)descriptionForMIMEType:(id)fp8;
- (id)MIMETypeForExtension:(id)fp8;
- (id)extensionsForMIMEType:(id)fp8;
- (id)bundle;
- (void)setName:(id)fp8;
- (void)setPath:(id)fp8;
- (void)setPluginDescription:(id)fp8;
- (void)setMIMEToDescriptionDictionary:(id)fp8;
- (void)setMIMEToExtensionsDictionary:(id)fp8;
- (id)description;
- (BOOL)isQuickTimePlugIn;
- (BOOL)isJavaPlugIn;
- (BOOL)isNativeLibraryData:(id)fp8;
- (unsigned long)versionNumber;
- (void)wasAddedToPluginDatabase:(id)fp8;
- (void)wasRemovedFromPluginDatabase:(id)fp8;

@end

@interface NSArray (WebPluginExtensions)
- (id)_web_lowercaseStrings;
@end

@interface WebCache : NSObject
{
}

+ (id)statistics;
+ (void)empty;
+ (void)setDisabled:(BOOL)fp8;
+ (BOOL)isDisabled;

@end

@interface WebClipView : NSClipView
{
    BOOL _haveAdditionalClip;
    struct _NSRect _additionalClip;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)resetAdditionalClip;
- (void)setAdditionalClip:(struct _NSRect)fp8;
- (BOOL)hasAdditionalClip;
- (struct _NSRect)additionalClip;
- (struct _NSRect)_focusRingVisibleRect;
- (void)scrollWheel:(id)fp8;

@end

@interface WebCoreStatistics : NSObject
{
}

+ (id)statistics;
+ (unsigned long)javaScriptObjectsCount;
+ (unsigned long)javaScriptGlobalObjectsCount;
+ (unsigned long)javaScriptProtectedObjectsCount;
+ (unsigned long)javaScriptProtectedGlobalObjectsCount;
+ (id)javaScriptProtectedObjectTypeCounts;
+ (void)garbageCollectJavaScriptObjects;
+ (void)garbageCollectJavaScriptObjectsOnAlternateThreadForDebugging:(BOOL)fp8;
+ (unsigned long)iconPageURLMappingCount;
+ (unsigned long)iconRetainedPageURLCount;
+ (unsigned long)iconRecordCount;
+ (unsigned long)iconsWithDataCount;
+ (BOOL)shouldPrintExceptions;
+ (void)setShouldPrintExceptions:(BOOL)fp8;
+ (void)emptyCache;
+ (void)setCacheDisabled:(BOOL)fp8;
+ (void)startIgnoringWebCoreNodeLeaks;
+ (void)stopIgnoringWebCoreNodeLeaks;
+ (unsigned long)javaScriptNoGCAllowedObjectsCount;
+ (unsigned long)javaScriptReferencedObjectsCount;
+ (id)javaScriptRootObjectClasses;
+ (unsigned long)javaScriptInterpretersCount;
+ (id)javaScriptRootObjectTypeCounts;

@end

@interface WebFrame (WebKitDebug)
- (id)renderTreeAsExternalRepresentation;
@end

@interface DOMHTMLObjectElement (WebDOMHTMLObjectElementOperations)
- (id)contentFrame;
@end

@interface DOMHTMLIFrameElement (WebDOMHTMLIFrameElementOperations)
- (id)contentFrame;
@end

@interface DOMHTMLFrameElement (WebDOMHTMLFrameElementOperations)
- (id)contentFrame;
@end

@interface DOMHTMLTableCellElement (WebDOMHTMLTableCellElementOperationsPrivate)
- (id)_web_background;
- (id)_subresourceURLs;
@end

@interface DOMHTMLTableElement (WebDOMHTMLTableElementOperationsPrivate)
- (id)_web_background;
- (id)_subresourceURLs;
@end

@interface DOMHTMLParamElement (WebDOMHTMLParamElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMHTMLObjectElement (WebDOMHTMLObjectElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMHTMLEmbedElement (WebDOMHTMLEmbedElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMProcessingInstruction (WebDOMProcessingInstructionOperationsPrivate)
- (id)_stylesheetURL;
- (id)_subresourceURLs;
@end

@interface DOMSVGCursorElement (WebDOMSVGCursorElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMSVGScriptElement (WebDOMSVGScriptElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMSVGImageElement (WebDOMSVGImageElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMHTMLImageElement (WebDOMHTMLImageElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMHTMLScriptElement (WebDOMHTMLScriptElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMHTMLLinkElement (WebDOMHTMLLinkElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMHTMLInputElement (WebDOMHTMLInputElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMHTMLBodyElement (WebDOMHTMLBodyElementOperationsPrivate)
- (id)_subresourceURLs;
@end

@interface DOMRange (WebDOMRangeOperations)
- (id)_bridge;
- (id)webArchive;
- (id)markupString;
@end

@interface DOMDocument (WebDOMDocumentOperationsPrivate)
- (id)_createRangeWithNode:(id)fp8;
- (id)_documentRange;
@end

@interface DOMDocument (WebDOMDocumentOperations)
- (id)webFrame;
- (id)URLWithAttributeString:(id)fp8;
@end

@interface DOMNode (WebDOMNodeOperations)
- (id)_bridge;
- (id)webArchive;
- (id)markupString;
- (id)_URLsFromSelectors:(SEL)fp8;
- (id)_subresourceURLs;
@end

@interface WebDataSource : NSObject
{
    WebDataSourcePrivate *_private;
}

- (id)initWithRequest:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (id)data;
- (id)representation;
- (id)webFrame;
- (id)initialRequest;
- (id)request;
- (id)response;
- (id)textEncodingName;
- (BOOL)isLoading;
- (id)pageTitle;
- (id)unreachableURL;
- (id)webArchive;
- (id)mainResource;
- (id)subresources;
- (id)subresourceForURL:(id)fp8;
- (void)addSubresource:(id)fp8;

@end

@interface WebDataSourcePrivate : NSObject
{
    struct WebDocumentLoaderMac *loader;
    id representation;
    WebUnarchivingState *unarchivingState;
    BOOL representationFinishedLoading;
}

- (void)dealloc;
- (void)finalize;

@end

@interface WebDataSource (WebInternal)
+ (id)_repTypesAllowImageTypeOmission:(BOOL)fp8;
- (void)_finishedLoading;
- (void)_receivedData:(id)fp8;
- (void)_setMainDocumentError:(id)fp8;
- (void)_clearUnarchivingState;
- (void)_revertToProvisionalState;
- (id)_archivedSubresourceForURL:(id)fp8;
- (void)_replaceSelectionWithArchive:(id)fp8 selectReplacement:(BOOL)fp12;
- (id)_documentFragmentWithArchive:(id)fp8;
- (id)_documentFragmentWithImageResource:(id)fp8;
- (id)_imageElementWithImageResource:(id)fp8;
- (id)_URL;
- (id)_popSubframeArchiveWithName:(id)fp8;
- (id)_bridge;
- (id)_webView;
- (BOOL)_isDocumentHTML;
- (void)_makeRepresentation;
- (void)_addToUnarchiveState:(id)fp8;
- (struct DocumentLoader *)_documentLoader;
- (id)_initWithDocumentLoader:(struct WebDocumentLoaderMac *)fp8;
@end

@interface WebDataSource (WebPrivate)
- (id)_mainDocumentError;
- (void)_addSubframeArchives:(id)fp8;
- (id)_fileWrapperForURL:(id)fp8;
- (id)_responseMIMEType;
@end

@interface WebDataSource (WebFileInternal)
+ (Class)_representationClassForMIMEType:(id)fp8;
- (void)_setRepresentation:(id)fp8;
@end

@interface WebDatabaseManager : NSObject
{
}

+ (id)sharedWebDatabaseManager;
- (id)origins;
- (id)databasesWithOrigin:(id)fp8;
- (id)detailsForDatabase:(id)fp8 withOrigin:(id)fp12;
- (void)deleteAllDatabases;
- (void)deleteOrigin:(id)fp8;
- (void)deleteDatabase:(id)fp8 withOrigin:(id)fp12;

@end

@interface WebDefaultUIDelegate (WebContextMenu)
- (id)menuItemWithTag:(int)fp8 target:(id)fp12 representedObject:(id)fp16;
- (void)appendDefaultItems:(id)fp8 toArray:(id)fp12;
- (id)webView:(id)fp8 contextMenuItemsForElement:(id)fp12 defaultMenuItems:(id)fp16;
@end

@interface WebDefaultEditingDelegate : NSObject
{
}

+ (id)sharedEditingDelegate;
- (BOOL)webView:(id)fp8 shouldShowDeleteInterfaceForElement:(id)fp12;
- (BOOL)webView:(id)fp8 shouldBeginEditingInDOMRange:(id)fp12;
- (BOOL)webView:(id)fp8 shouldEndEditingInDOMRange:(id)fp12;
- (BOOL)webView:(id)fp8 shouldInsertNode:(id)fp12 replacingDOMRange:(id)fp16 givenAction:(int)fp20;
- (BOOL)webView:(id)fp8 shouldInsertText:(id)fp12 replacingDOMRange:(id)fp16 givenAction:(int)fp20;
- (BOOL)webView:(id)fp8 shouldDeleteDOMRange:(id)fp12;
- (BOOL)webView:(id)fp8 shouldChangeSelectedDOMRange:(id)fp12 toDOMRange:(id)fp16 affinity:(int)fp20 stillSelecting:(BOOL)fp24;
- (BOOL)webView:(id)fp8 shouldApplyStyle:(id)fp12 toElementsInDOMRange:(id)fp16;
- (BOOL)webView:(id)fp8 shouldMoveRangeAfterDelete:(id)fp12 replacingRange:(id)fp16;
- (BOOL)webView:(id)fp8 shouldChangeTypingStyle:(id)fp12 toStyle:(id)fp16;
- (BOOL)webView:(id)fp8 doCommandBySelector:(SEL)fp12;
- (void)webView:(id)fp8 didWriteSelectionToPasteboard:(id)fp12;
- (void)webView:(id)fp8 didSetSelectionTypesForPasteboard:(id)fp12;
- (void)webViewDidBeginEditing:(id)fp8;
- (void)webViewDidChange:(id)fp8;
- (void)webViewDidEndEditing:(id)fp8;
- (void)webViewDidChangeTypingStyle:(id)fp8;
- (void)webViewDidChangeSelection:(id)fp8;
- (id)undoManagerForWebView:(id)fp8;

@end

@interface WebDefaultPolicyDelegate : NSObject
{
}

+ (id)sharedPolicyDelegate;
- (void)webView:(id)fp8 unableToImplementPolicyWithError:(id)fp12 frame:(id)fp16;
- (void)webView:(id)fp8 decidePolicyForMIMEType:(id)fp12 request:(id)fp16 frame:(id)fp20 decisionListener:(id)fp24;
- (void)webView:(id)fp8 decidePolicyForNavigationAction:(id)fp12 request:(id)fp16 frame:(id)fp20 decisionListener:(id)fp24;
- (void)webView:(id)fp8 decidePolicyForNewWindowAction:(id)fp12 request:(id)fp16 newFrameName:(id)fp20 decisionListener:(id)fp24;
- (BOOL)webView:(id)fp8 shouldGoToHistoryItem:(id)fp12;

@end

@interface WebDefaultScriptDebugDelegate : NSObject
{
}

+ (id)sharedScriptDebugDelegate;
- (void)webView:(id)fp8 didParseSource:(id)fp12 fromURL:(id)fp16 sourceId:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 didParseSource:(id)fp12 baseLineNumber:(unsigned int)fp16 fromURL:(id)fp20 sourceId:(int)fp24 forWebFrame:(id)fp28;
- (void)webView:(id)fp8 failedToParseSource:(id)fp12 baseLineNumber:(unsigned int)fp16 fromURL:(id)fp20 withError:(id)fp24 forWebFrame:(id)fp28;
- (void)webView:(id)fp8 didEnterCallFrame:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 willExecuteStatement:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 willLeaveCallFrame:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 exceptionWasRaised:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;

@end

@interface WebDefaultUIDelegate : NSObject
{
    NSMenu *defaultMenu;
}

+ (id)sharedUIDelegate;
- (id)webView:(id)fp8 createWebViewWithRequest:(id)fp12 windowFeatures:(id)fp16;
- (void)webViewShow:(id)fp8;
- (void)webViewClose:(id)fp8;
- (void)webViewFocus:(id)fp8;
- (void)webViewUnfocus:(id)fp8;
- (id)webViewFirstResponder:(id)fp8;
- (void)webView:(id)fp8 makeFirstResponder:(id)fp12;
- (void)webView:(id)fp8 setStatusText:(id)fp12;
- (id)webViewStatusText:(id)fp8;
- (void)webView:(id)fp8 mouseDidMoveOverElement:(id)fp12 modifierFlags:(unsigned int)fp16;
- (BOOL)webViewAreToolbarsVisible:(id)fp8;
- (void)webView:(id)fp8 setToolbarsVisible:(BOOL)fp12;
- (BOOL)webViewIsStatusBarVisible:(id)fp8;
- (void)webView:(id)fp8 setStatusBarVisible:(BOOL)fp12;
- (BOOL)webViewIsResizable:(id)fp8;
- (void)webView:(id)fp8 setResizable:(BOOL)fp12;
- (void)webView:(id)fp8 setFrame:(struct _NSRect)fp12;
- (struct _NSRect)webViewFrame:(id)fp8;
- (void)webView:(id)fp8 runJavaScriptAlertPanelWithMessage:(id)fp12 initiatedByFrame:(id)fp16;
- (BOOL)webView:(id)fp8 runJavaScriptConfirmPanelWithMessage:(id)fp12 initiatedByFrame:(id)fp16;
- (id)webView:(id)fp8 runJavaScriptTextInputPanelWithPrompt:(id)fp12 defaultText:(id)fp16 initiatedByFrame:(id)fp20;
- (void)webView:(id)fp8 runOpenPanelForFileButtonWithResultListener:(id)fp12;
- (void)webView:(id)fp8 printFrameView:(id)fp12;
- (BOOL)webView:(id)fp8 shouldBeginDragForElement:(id)fp12 dragImage:(id)fp16 mouseDownEvent:(id)fp20 mouseDraggedEvent:(id)fp24;
- (unsigned int)webView:(id)fp8 dragDestinationActionMaskForDraggingInfo:(id)fp12;
- (void)webView:(id)fp8 willPerformDragDestinationAction:(int)fp12 forDraggingInfo:(id)fp16;
- (unsigned int)webView:(id)fp8 dragSourceActionMaskForPoint:(struct _NSPoint)fp12;
- (void)webView:(id)fp8 willPerformDragSourceAction:(int)fp12 fromPoint:(struct _NSPoint)fp16 withPasteboard:(id)fp24;
- (void)webView:(id)fp8 didDrawRect:(struct _NSRect)fp12;
- (void)webView:(id)fp8 didScrollDocumentInFrameView:(id)fp12;
- (void)webView:(id)fp8 setIsUnrequestedPopUpOpenedBy:(id)fp12;
- (BOOL)webView:(id)fp8 shouldHandleKeyDown:(unsigned short)fp12 forFrame:(id)fp16;
- (id)webView:(id)fp8 dragImageAndOffset:(struct _NSSize *)fp12 forLinkElement:(id)fp16;
- (id)omniWebStringForKey:(id)fp8;
- (id)userAgentForURL:(id)fp8;
- (void)webView:(id)fp8 willPopupMenu:(id)fp12;
- (void)webView:(id)fp8 contextMenuItemSelected:(id)fp12 forElement:(id)fp16;

@end

@interface WebDownload : NSURLDownload
{
    WebDownloadInternal *_webInternal;
}

- (void)_setRealDelegate:(id)fp8;
- (id)init;
- (void)dealloc;
- (id)initWithRequest:(id)fp8 delegate:(id)fp12;
- (id)_initWithLoadingConnection:(id)fp8 request:(id)fp12 response:(id)fp16 delegate:(id)fp20 proxy:(id)fp24;
- (id)_initWithRequest:(id)fp8 delegate:(id)fp12 directory:(id)fp16;
- (void)connection:(id)fp8 willStopBufferingData:(id)fp12;

@end

@interface WebDownloadInternal : NSObject
{
    id realDelegate;
}

- (void)dealloc;
- (void)setRealDelegate:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (void)downloadDidBegin:(id)fp8;
- (id)download:(id)fp8 willSendRequest:(id)fp12 redirectResponse:(id)fp16;
- (void)download:(id)fp8 didReceiveAuthenticationChallenge:(id)fp12;
- (void)download:(id)fp8 didCancelAuthenticationChallenge:(id)fp12;
- (void)download:(id)fp8 didReceiveResponse:(id)fp12;
- (void)download:(id)fp8 didReceiveDataOfLength:(unsigned int)fp12;
- (BOOL)download:(id)fp8 shouldDecodeSourceDataOfMIMEType:(id)fp12;
- (void)download:(id)fp8 decideDestinationWithSuggestedFilename:(id)fp12;
- (void)download:(id)fp8 didCreateDestination:(id)fp12;
- (void)downloadDidFinish:(id)fp8;
- (void)download:(id)fp8 didFailWithError:(id)fp12;
- (id)download:(id)fp8 shouldBeginChildDownloadOfSource:(id)fp12 delegate:(id *)fp16;
- (void)download:(id)fp8 didBeginChildDownload:(id)fp12;

@end

@interface WebDynamicScrollBarsView : NSScrollView <WebCoreFrameView>
{
    int hScroll;
    int vScroll;
    BOOL hScrollModeLocked;
    BOOL vScrollModeLocked;
    BOOL suppressLayout;
    BOOL suppressScrollers;
    BOOL inUpdateScrollers;
}

- (void)setSuppressLayout:(BOOL)fp8;
- (void)setScrollBarsSuppressed:(BOOL)fp8 repaintOnUnsuppress:(BOOL)fp12;
- (void)updateScrollers;
- (void)reflectScrolledClipView:(id)fp8;
- (void)setAllowsScrolling:(BOOL)fp8;
- (BOOL)allowsScrolling;
- (void)setAllowsHorizontalScrolling:(BOOL)fp8;
- (void)setAllowsVerticalScrolling:(BOOL)fp8;
- (BOOL)allowsHorizontalScrolling;
- (BOOL)allowsVerticalScrolling;
- (int)horizontalScrollingMode;
- (int)verticalScrollingMode;
- (void)setHorizontalScrollingMode:(int)fp8;
- (void)setHorizontalScrollingMode:(int)fp8 andLock:(BOOL)fp12;
- (void)setVerticalScrollingMode:(int)fp8;
- (void)setVerticalScrollingMode:(int)fp8 andLock:(BOOL)fp12;
- (void)setScrollingMode:(int)fp8;
- (void)setScrollingMode:(int)fp8 andLock:(BOOL)fp12;
- (void)setHorizontalScrollingModeLocked:(BOOL)fp8;
- (void)setVerticalScrollingModeLocked:(BOOL)fp8;
- (void)setScrollingModesLocked:(BOOL)fp8;
- (BOOL)horizontalScrollingModeLocked;
- (BOOL)verticalScrollingModeLocked;
- (BOOL)autoforwardsScrollWheelEvents;
- (void)scrollWheel:(id)fp8;

@end

@interface WebEditorUndoTarget : NSObject
{
}

- (void)undoEditing:(id)fp8;
- (void)redoEditing:(id)fp8;

@end

@interface WebEditCommand : NSObject
{
    struct EditCommand *m_command;
}

+ (id)commandWithEditCommand:(struct PassRefPtr<WebCore::EditCommand>)fp8;
- (id)initWithEditCommand:(struct PassRefPtr<WebCore::EditCommand>)fp8;
- (void)dealloc;
- (void)finalize;
- (struct EditCommand *)command;

@end

@interface WebElementDictionary : NSDictionary
{
    struct HitTestResult *_result;
    NSMutableDictionary *_cache;
    NSMutableSet *_nilValues;
    BOOL _cacheComplete;
}

+ (void)initializeLookupTable;
- (id)initWithHitTestResult: /* Error: Ran out of types for this method. */;
- (void)dealloc;
- (void)finalize;
- (void)_fillCache;
- (unsigned int)count;
- (id)keyEnumerator;
- (id)objectForKey:(id)fp8;
- (id)_domNode;
- (id)_webFrame;
- (id)_altDisplayString;
- (id)_spellingToolTip;
- (id)_image;
- (id)_imageRect;
- (id)_absoluteImageURL;
- (id)_isSelected;
- (id)_title;
- (id)_absoluteLinkURL;
- (id)_targetWebFrame;
- (id)_titleDisplayString;
- (id)_textContent;
- (id)_isLiveLink;
- (id)_isContentEditable;

@end

@interface WebFormDelegate : NSObject <WebFormDelegate>
{
}

+ (id)_sharedWebFormDelegate;
- (void)textFieldDidBeginEditing:(id)fp8 inFrame:(id)fp12;
- (void)textFieldDidEndEditing:(id)fp8 inFrame:(id)fp12;
- (void)textDidChangeInTextField:(id)fp8 inFrame:(id)fp12;
- (void)textDidChangeInTextArea:(id)fp8 inFrame:(id)fp12;
- (BOOL)textField:(id)fp8 doCommandBySelector:(SEL)fp12 inFrame:(id)fp16;
- (BOOL)textField:(id)fp8 shouldHandleEvent:(id)fp12 inFrame:(id)fp16;
- (void)frame:(id)fp8 sourceFrame:(id)fp12 willSubmitForm:(id)fp16 withValues:(id)fp20 submissionListener:(id)fp24;

@end

@interface WebFrame : NSObject
{
    WebFramePrivate *_private;
}

- (id)init;
- (id)initWithName:(id)fp8 webFrameView:(id)fp12 webView:(id)fp16;
- (void)dealloc;
- (void)finalize;
- (id)name;
- (id)frameView;
- (id)webView;
- (id)DOMDocument;
- (id)frameElement;
- (id)provisionalDataSource;
- (id)dataSource;
- (void)loadRequest:(id)fp8;
- (void)_loadData:(id)fp8 MIMEType:(id)fp12 textEncodingName:(id)fp16 baseURL:(id)fp20 unreachableURL:(id)fp24;
- (void)loadData:(id)fp8 MIMEType:(id)fp12 textEncodingName:(id)fp16 baseURL:(id)fp20;
- (void)_loadHTMLString:(id)fp8 baseURL:(id)fp12 unreachableURL:(id)fp16;
- (void)loadHTMLString:(id)fp8 baseURL:(id)fp12;
- (void)loadAlternateHTMLString:(id)fp8 baseURL:(id)fp12 forUnreachableURL:(id)fp16;
- (void)loadArchive:(id)fp8;
- (void)stopLoading;
- (void)reload;
- (id)findFrameNamed:(id)fp8;
- (id)parentFrame;
- (id)childFrames;
- (id)windowObject;
- (struct OpaqueJSContext *)globalContext;

@end

@interface WebFramePrivate : NSObject
{
    WebFrameView *webFrameView;
    WebFrameBridge *bridge;
    WebScriptDebugger *scriptDebugger;
    id internalLoadDelegate;
}

- (void)dealloc;
- (void)setWebFrameView:(id)fp8;

@end

@interface WebFrame (OmniAdditions)
- (void)saveDocumentAndScrollState;
@end

@interface WebFrame (WebPrivate)
- (BOOL)_isDescendantOfFrame:(id)fp8;
- (void)_setShouldCreateRenderers:(BOOL)fp8;
- (id)_bodyBackgroundColor;
- (BOOL)_isFrameSet;
- (BOOL)_firstLayoutDone;
- (int)_loadType;
- (void)_recursive_resumeNullEventsForAllNetscapePlugins;
- (void)_recursive_pauseNullEventsForAllNetscapePlugins;
- (struct _NSRange)_selectedNSRange;
- (void)_selectNSRange:(struct _NSRange)fp8;
- (BOOL)_isDisplayingStandaloneImage;
@end

@interface WebFrame (WebInternal)
+ (double)_timeOfLastCompletedLoad;
- (id)_bridge;
- (void)_loadURL:(id)fp8 referrer:(id)fp12 intoChild:(id)fp16;
- (void)_viewWillMoveToHostWindow:(id)fp8;
- (void)_viewDidMoveToHostWindow;
- (void)_addChild:(id)fp8;
- (int)_numPendingOrLoadingRequests:(BOOL)fp8;
- (void)_reloadForPluginChanges;
- (void)_attachScriptDebugger;
- (void)_detachScriptDebugger;
- (id)_initWithWebFrameView:(id)fp8 webView:(id)fp12 bridge:(id)fp16;
- (id)_documentViews;
- (void)_updateBackground;
- (void)_setInternalLoadDelegate:(id)fp8;
- (id)_internalLoadDelegate;
- (void)_unmarkAllMisspellings;
- (BOOL)_hasSelection;
- (void)_clearSelection;
- (id)_findFrameWithSelection;
- (void)_clearSelectionInOtherFrames;
- (BOOL)_isMainFrame;
- (struct FrameLoader *)_frameLoader;
- (id)_dataSourceForDocumentLoader:(struct DocumentLoader *)fp8;
- (void)_addDocumentLoader:(struct DocumentLoader *)fp8 toUnarchiveState:(id)fp12;
- (id)_dataSource;
@end

@interface WebFrameBridge : WebCoreFrameBridge <WebCoreFrameBridge>
{
    WebFrame *_frame;
    int _keyboardUIMode;
    BOOL _keyboardUIModeAccessed;
    BOOL _doingClientRedirect;
    BOOL _haveUndoRedoOperations;
    NSDictionary *lastDashboardRegions;
}

- (id)webView;
- (void)finishInitializingWithPage:(struct Page *)fp8 frameName:(id)fp12 frameView:(id)fp16 ownerElement:(struct HTMLFrameOwnerElement *)fp20;
- (id)initMainFrameWithPage:(struct Page *)fp8 frameName:(id)fp12 frameView:(id)fp16;
- (id)initSubframeWithOwnerElement:(struct HTMLFrameOwnerElement *)fp8 frameName:(id)fp12 frameView:(id)fp16;
- (void)fini;
- (void)dealloc;
- (void)finalize;
- (id)_preferences;
- (void)_retrieveKeyboardUIModeFromPreferences:(id)fp8;
- (int)keyboardUIMode;
- (id)webFrame;
- (id)mainFrame;
- (id)firstResponder;
- (void)makeFirstResponder:(id)fp8;
- (id)window;
- (void)runOpenPanelForFileButtonWithResultListener:(id)fp8;
- (id)dataSource;
- (void)close;
- (struct Frame *)createChildFrameNamed:(id)fp8 withURL:(id)fp1216 referrer:(struct HTMLFrameOwnerElement *)fp20 ownerElement:(BOOL)fp24 allowsScrolling:(int)fp28 marginWidth:(int)fp32 marginHeight: /* Error: Ran out of types for this method. */;
- (id)pluginViewWithPackage:(id)fp8 attributeNames:(id)fp12 attributeValues:(id)fp16 baseURL:(id)fp20 DOMElement:(id)fp24 loadManually:(BOOL)fp28;
- (id)valueForKey:(id)fp8 keys:(id)fp12 values:(id)fp16;
- (id)viewForPluginWithFrame:(struct _NSRect)fp8 URL:(id)fp24 attributeNames:(id)fp28 attributeValues:(id)fp32 MIMEType:(id)fp36 DOMElement:(id)fp40 loadManually:(BOOL)fp44;
- (void)redirectDataToPlugin:(id)fp8;
- (id)viewForJavaAppletWithFrame:(struct _NSRect)fp8 attributeNames:(id)fp24 attributeValues:(id)fp28 baseURL:(id)fp32 DOMElement:(id)fp36;
- (int)determineObjectFromMIMEType:(id)fp8 URL:(id)fp12;
- (struct _jobject *)getAppletInView:(id)fp8;
- (struct _jobject *)pollForAppletInView:(id)fp8;
- (void)respondToChangedContents;
- (id)undoManager;
- (void)issuePasteCommand;
- (void)setIsSelected:(BOOL)fp8 forView:(id)fp12;
- (void)windowObjectCleared;
- (BOOL)_compareDashboardRegions:(id)fp8;
- (void)dashboardRegionsChanged:(id)fp8;
- (void)willPopupMenu:(id)fp8;
- (struct _NSRect)customHighlightRect:(id)fp8 forLine:(struct _NSRect)fp12 representedNode:(struct Node *)fp28;
- (void)paintCustomHighlight:(id)fp8 forBox:(struct _NSRect)fp12 onLine:(struct _NSRect)fp28 behindText:(BOOL)fp44 entireLine:(BOOL)fp48 representedNode:(struct Node *)fp52;
- (id)imageTitleForFilename:(id)fp8 size:(struct _NSSize)fp12;
- (BOOL)shouldFilterImageForElement:(id)fp8 fromURL:(id)fp12;
- (void)imageElement:(id)fp8 didNotLoadFromURL:(id)fp12;
- (void)setIsUnrequestedPopUpOpenedBy:(id)fp8;
- (id)omniWebStringForKey:(id)fp8;
- (id)dragImageAndOffset:(struct _NSSize *)fp8 forLinkElement:(id)fp12;

@end

@interface WebFramePolicyListener : NSObject <WebPolicyDecisionListener, WebFormSubmissionListener>
{
    struct Frame *m_frame;
}

- (id)initWithWebCoreFrame:(struct Frame *)fp8;
- (void)invalidate;
- (void)dealloc;
- (void)finalize;
- (void)receivedPolicyDecision:(int)fp8;
- (void)ignore;
- (void)download;
- (void)use;
- (void)continue;

@end

@interface WebFrameView : NSView
{
    WebFrameViewPrivate *_private;
}

- (id)initWithCoder:(id)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)finalize;
- (id)webFrame;
- (void)setAllowsScrolling:(BOOL)fp8;
- (BOOL)allowsScrolling;
- (id)documentView;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)setNextKeyView:(id)fp8;
- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (id)_bridge;
- (BOOL)_scrollOverflowInDirection:(int)fp8 granularity:(int)fp12;
- (void)scrollToBeginningOfDocument:(id)fp8;
- (void)scrollToEndOfDocument:(id)fp8;
- (void)_goBack;
- (void)_goForward;
- (BOOL)_scrollVerticallyBy:(float)fp8;
- (BOOL)_scrollHorizontallyBy:(float)fp8;
- (float)_horizontalKeyboardScrollDistance;
- (float)_horizontalPageScrollDistance;
- (BOOL)_pageVertically:(BOOL)fp8;
- (BOOL)_pageHorizontally:(BOOL)fp8;
- (BOOL)_scrollLineVertically:(BOOL)fp8;
- (BOOL)_scrollLineHorizontally:(BOOL)fp8;
- (void)scrollPageUp:(id)fp8;
- (void)scrollPageDown:(id)fp8;
- (void)scrollLineUp:(id)fp8;
- (void)scrollLineDown:(id)fp8;
- (BOOL)_firstResponderIsFormControl;
- (void)keyDown:(id)fp8;
- (id)_webcore_effectiveFirstResponder;
- (BOOL)canPrintHeadersAndFooters;
- (id)printOperationWithPrintInfo:(id)fp8;
- (BOOL)documentViewShouldHandlePrint;
- (void)printDocumentView;

@end

@interface WebFrameViewPrivate : NSObject
{
    WebFrame *webFrame;
    WebDynamicScrollBarsView *frameScrollView;
    int marginWidth;
    int marginHeight;
}

- (id)init;
- (void)dealloc;

@end

@interface WebFrameView (WebPrivate)
- (float)_area;
- (BOOL)_hasScrollBars;
- (id)_largestChildWithScrollBars;
- (id)_contentView;
- (Class)_customScrollViewClass;
- (void)_setCustomScrollViewClass:(Class)fp8;
@end

@interface WebFrameView (WebInternal)
+ (id)_viewTypesAllowImageTypeOmission:(BOOL)fp8;
+ (BOOL)_canShowMIMETypeAsHTML:(id)fp8;
+ (Class)_viewClassForMIMEType:(id)fp8;
- (id)_webView;
- (void)_setMarginWidth:(int)fp8;
- (int)_marginWidth;
- (void)_setMarginHeight:(int)fp8;
- (int)_marginHeight;
- (void)_setDocumentView:(id)fp8;
- (id)_makeDocumentViewForDataSource:(id)fp8;
- (void)_setWebFrame:(id)fp8;
- (id)_scrollView;
- (float)_verticalPageScrollDistance;
@end

@interface WebFrameView (WebFrameViewFileInternal) <WebCoreBridgeHolder>
- (float)_verticalKeyboardScrollDistance;
- (id)webCoreBridge;
@end

@interface WebHTMLRepresentation : NSObject <WebDocumentRepresentation, WebDocumentDOM>
{
    WebHTMLRepresentationPrivate *_private;
}

+ (id)supportedMIMETypes;
+ (id)supportedNonImageMIMETypes;
+ (id)supportedImageMIMETypes;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (id)_bridge;
- (void)_redirectDataToManualLoader:(id)fp8 forPluginView:(id)fp12;
- (void)setDataSource:(id)fp8;
- (BOOL)_isDisplayingWebArchive;
- (void)receivedData:(id)fp8 withDataSource:(id)fp12;
- (void)receivedError:(id)fp8 withDataSource:(id)fp12;
- (void)_loadDataSourceAsWebArchive;
- (void)finishedLoadingWithDataSource:(id)fp8;
- (BOOL)canProvideDocumentSource;
- (BOOL)canSaveAsWebArchive;
- (id)documentSource;
- (id)title;
- (id)DOMDocument;
- (id)attributedText;
- (id)attributedStringFrom:(id)fp8 startOffset:(int)fp12 to:(id)fp16 endOffset:(int)fp20;
- (id)elementWithName:(id)fp8 inForm:(id)fp12;
- (BOOL)elementDoesAutoComplete:(id)fp8;
- (BOOL)elementIsPassword:(id)fp8;
- (id)formForElement:(id)fp8;
- (id)currentForm;
- (id)controlsInForm:(id)fp8;
- (id)searchForLabels:(id)fp8 beforeElement:(id)fp12;
- (id)matchLabels:(id)fp8 againstElement:(id)fp12;

@end

@interface WebHTMLRepresentationPrivate : NSObject
{
    WebDataSource *dataSource;
    WebFrameBridge *bridge;
    NSData *parsedArchiveData;
    BOOL hasSentResponseToPlugin;
    id manualLoader;
    NSView *pluginView;
}

- (void)dealloc;

@end

@interface WebTextCompleteController : NSObject
{
    WebHTMLView *_view;
    NSWindow *_popupWindow;
    NSTableView *_tableView;
    NSArray *_completions;
    NSString *_originalString;
    int prefixLength;
}

- (id)initWithHTMLView:(id)fp8;
- (void)dealloc;
- (void)_insertMatch:(id)fp8;
- (void)_buildUI;
- (void)_placePopupWindow:(struct _NSPoint)fp8;
- (void)doCompletion;
- (void)endRevertingChange:(BOOL)fp8 moveLeft:(BOOL)fp12;
- (BOOL)popupWindowIsOpen;
- (BOOL)filterKeyDown:(id)fp8;
- (void)_reflectSelection;
- (void)tableAction:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;

@end

@interface WebHTMLView : NSControl <WebDocumentView, WebDocumentSearching>
{
    WebHTMLViewPrivate *_private;
}

+ (void)initialize;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)finalize;
- (BOOL)callDelegateDoCommandBySelectorIfNeeded:(SEL)fp8;
- (struct Command)coreCommandBySelector:(SEL)fp8;
- (struct Command)coreCommandByName:(const char *)fp8;
- (void)executeCoreCommandBySelector:(SEL)fp8;
- (void)executeCoreCommandByName:(const char *)fp8;
- (void)alignCenter:(id)fp8;
- (void)alignJustified:(id)fp8;
- (void)alignLeft:(id)fp8;
- (void)alignRight:(id)fp8;
- (void)copy:(id)fp8;
- (void)cut:(id)fp8;
- (void)delete:(id)fp8;
- (void)deleteBackward:(id)fp8;
- (void)deleteBackwardByDecomposingPreviousCharacter:(id)fp8;
- (void)deleteForward:(id)fp8;
- (void)deleteToBeginningOfLine:(id)fp8;
- (void)deleteToBeginningOfParagraph:(id)fp8;
- (void)deleteToEndOfLine:(id)fp8;
- (void)deleteToEndOfParagraph:(id)fp8;
- (void)deleteToMark:(id)fp8;
- (void)deleteWordBackward:(id)fp8;
- (void)deleteWordForward:(id)fp8;
- (void)indent:(id)fp8;
- (void)insertBacktab:(id)fp8;
- (void)insertLineBreak:(id)fp8;
- (void)insertNewline:(id)fp8;
- (void)insertNewlineIgnoringFieldEditor:(id)fp8;
- (void)insertParagraphSeparator:(id)fp8;
- (void)insertTab:(id)fp8;
- (void)insertTabIgnoringFieldEditor:(id)fp8;
- (void)moveBackward:(id)fp8;
- (void)moveBackwardAndModifySelection:(id)fp8;
- (void)moveDown:(id)fp8;
- (void)moveDownAndModifySelection:(id)fp8;
- (void)moveForward:(id)fp8;
- (void)moveForwardAndModifySelection:(id)fp8;
- (void)moveLeft:(id)fp8;
- (void)moveLeftAndModifySelection:(id)fp8;
- (void)moveParagraphBackwardAndModifySelection:(id)fp8;
- (void)moveParagraphForwardAndModifySelection:(id)fp8;
- (void)moveRight:(id)fp8;
- (void)moveRightAndModifySelection:(id)fp8;
- (void)moveToBeginningOfDocument:(id)fp8;
- (void)moveToBeginningOfDocumentAndModifySelection:(id)fp8;
- (void)moveToBeginningOfLine:(id)fp8;
- (void)moveToBeginningOfLineAndModifySelection:(id)fp8;
- (void)moveToBeginningOfParagraph:(id)fp8;
- (void)moveToBeginningOfParagraphAndModifySelection:(id)fp8;
- (void)moveToBeginningOfSentence:(id)fp8;
- (void)moveToBeginningOfSentenceAndModifySelection:(id)fp8;
- (void)moveToEndOfDocument:(id)fp8;
- (void)moveToEndOfDocumentAndModifySelection:(id)fp8;
- (void)moveToEndOfLine:(id)fp8;
- (void)moveToEndOfLineAndModifySelection:(id)fp8;
- (void)moveToEndOfParagraph:(id)fp8;
- (void)moveToEndOfParagraphAndModifySelection:(id)fp8;
- (void)moveToEndOfSentence:(id)fp8;
- (void)moveToEndOfSentenceAndModifySelection:(id)fp8;
- (void)moveUp:(id)fp8;
- (void)moveUpAndModifySelection:(id)fp8;
- (void)moveWordBackward:(id)fp8;
- (void)moveWordBackwardAndModifySelection:(id)fp8;
- (void)moveWordForward:(id)fp8;
- (void)moveWordForwardAndModifySelection:(id)fp8;
- (void)moveWordLeft:(id)fp8;
- (void)moveWordLeftAndModifySelection:(id)fp8;
- (void)moveWordRight:(id)fp8;
- (void)moveWordRightAndModifySelection:(id)fp8;
- (void)outdent:(id)fp8;
- (void)pageDown:(id)fp8;
- (void)pageDownAndModifySelection:(id)fp8;
- (void)pageUp:(id)fp8;
- (void)pageUpAndModifySelection:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)selectLine:(id)fp8;
- (void)selectParagraph:(id)fp8;
- (void)selectSentence:(id)fp8;
- (void)selectToMark:(id)fp8;
- (void)selectWord:(id)fp8;
- (void)setMark:(id)fp8;
- (void)subscript:(id)fp8;
- (void)superscript:(id)fp8;
- (void)swapWithMark:(id)fp8;
- (void)transpose:(id)fp8;
- (void)underline:(id)fp8;
- (void)unscript:(id)fp8;
- (void)yank:(id)fp8;
- (void)yankAndSelect:(id)fp8;
- (void)takeFindStringFromSelection:(id)fp8;
- (BOOL)writeSelectionToPasteboard:(id)fp8 types:(id)fp12;
- (BOOL)readSelectionFromPasteboard:(id)fp8;
- (id)validRequestorForSendType:(id)fp8 returnType:(id)fp12;
- (void)jumpToSelection:(id)fp8;
- (int)selectionHasStyle:(struct CSSStyleDeclaration *)fp8;
- (BOOL)validateUserInterfaceItemWithoutDelegate:(id)fp8;
- (BOOL)validateUserInterfaceItem:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)maintainsInactiveSelection;
- (void)addMouseMovedObserver;
- (void)removeMouseMovedObserverUnconditionally;
- (void)removeMouseMovedObserver;
- (void)addSuperviewObservers;
- (void)removeSuperviewObservers;
- (void)addWindowObservers;
- (void)removeWindowObservers;
- (void)viewWillMoveToSuperview:(id)fp8;
- (void)viewDidMoveToSuperview;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToHostWindow:(id)fp8;
- (void)viewDidMoveToHostWindow;
- (void)addSubview:(id)fp8;
- (void)willRemoveSubview:(id)fp8;
- (void)reapplyStyles;
- (void)layoutToMinimumPageWidth:(float)fp8 maximumPageWidth:(float)fp12 adjustingViewSize:(BOOL)fp16;
- (void)layout;
- (id)menuForEvent:(id)fp8;
- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20;
- (void)clearFocus;
- (BOOL)isOpaque;
- (void)setNeedsDisplay:(BOOL)fp8;
- (void)setNeedsLayout:(BOOL)fp8;
- (void)setNeedsToApplyStyles:(BOOL)fp8;
- (void)drawSingleRect:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (struct _NSRect)visibleRect;
- (BOOL)isFlipped;
- (void)windowDidBecomeKey:(id)fp8;
- (void)windowDidResignKey:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (BOOL)_isSelectionEvent:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)dragImage:(id)fp8 at:(struct _NSPoint)fp12 offset:(struct _NSSize)fp20 event:(id)fp28 pasteboard:(id)fp32 source:(id)fp36 slideBack:(BOOL)fp40;
- (void)mouseDragged:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)draggedImage:(id)fp8 movedTo:(struct _NSPoint)fp12;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseMovedNotification:(id)fp8;
- (BOOL)needsPanelToBecomeKey;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)setDataSource:(id)fp8;
- (void)dataSourceUpdated:(id)fp8;
- (void)updateCell:(id)fp8;
- (void)_setPrinting:(BOOL)fp8 minimumPageWidth:(float)fp12 maximumPageWidth:(float)fp16 adjustViewSize:(BOOL)fp20;
- (BOOL)canPrintHeadersAndFooters;
- (void)adjustPageHeightNew:(float *)fp8 top:(float)fp12 bottom:(float)fp16 limit:(float)fp20;
- (float)_availablePaperWidthForPrintOperation:(id)fp8;
- (float)_scaleFactorForPrintOperation:(id)fp8;
- (float)_provideTotalScaleFactorForPrintOperation:(id)fp8;
- (void)setPageWidthForPrinting:(float)fp8;
- (void)_endPrintMode;
- (void)_delayedEndPrintMode:(id)fp8;
- (BOOL)knowsPageRange:(struct _NSRange *)fp8;
- (struct _NSRect)rectForPage:(int)fp8;
- (void)drawPageBorderWithSize:(struct _NSSize)fp8;
- (void)beginDocument;
- (void)endDocument;
- (void)keyDown:(id)fp8;
- (void)keyUp:(id)fp8;
- (void)flagsChanged:(id)fp8;
- (id)accessibilityAttributeValue:(id)fp8;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct _NSPoint)fp8;
- (id)_accessibilityParentForSubview:(id)fp8;
- (void)centerSelectionInVisibleArea:(id)fp8;
- (id)_selectionStartFontAttributesAsRTF;
- (id)_fontAttributesFromFontPasteboard;
- (id)_emptyStyle;
- (id)_colorAsString:(id)fp8;
- (id)_shadowAsString:(id)fp8;
- (id)_styleFromFontAttributes:(id)fp8;
- (void)_applyStyleToSelection:(id)fp8 withUndoAction:(int)fp12;
- (void)_applyParagraphStyleToSelection:(id)fp8 withUndoAction:(int)fp12;
- (BOOL)_handleStyleKeyEquivalent:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)copyFont:(id)fp8;
- (void)pasteFont:(id)fp8;
- (void)pasteAsRichText:(id)fp8;
- (id)_originalFontA;
- (id)_originalFontB;
- (void)_addToStyle:(id)fp8 fontA:(id)fp12 fontB:(id)fp16;
- (id)_styleFromFontManagerOperation;
- (void)changeFont:(id)fp8;
- (id)_styleForAttributeChange:(id)fp8;
- (void)changeAttributes:(id)fp8;
- (id)_styleFromColorPanelWithSelector:(SEL)fp8;
- (int)_undoActionFromColorPanelWithSelector:(SEL)fp8;
- (void)_changeCSSColorUsingSelector:(SEL)fp8 inRange:(id)fp12;
- (void)changeDocumentBackgroundColor:(id)fp8;
- (void)changeColor:(id)fp8;
- (void)_changeWordCaseWithSelector:(SEL)fp8;
- (void)uppercaseWord:(id)fp8;
- (void)lowercaseWord:(id)fp8;
- (void)capitalizeWord:(id)fp8;
- (void)complete:(id)fp8;
- (void)checkSpelling:(id)fp8;
- (void)showGuessPanel:(id)fp8;
- (void)_changeSpellingToWord:(id)fp8;
- (void)changeSpelling:(id)fp8;
- (void)ignoreSpelling:(id)fp8;
- (void)performFindPanelAction:(id)fp8;
- (void)startSpeaking:(id)fp8;
- (void)stopSpeaking:(id)fp8;
- (void)toggleBaseWritingDirection:(id)fp8;
- (void)changeBaseWritingDirection:(id)fp8;
- (void)_changeBaseWritingDirectionTo:(int)fp8;
- (void)changeBaseWritingDirectionToLTR:(id)fp8;
- (void)changeBaseWritingDirectionToRTL:(id)fp8;
- (SEL)_arrowKeyDownEventSelectorIfPreprocessing;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)nextResponder;
- (void)_windowChangedKeyState;

@end

@interface WebHTMLViewPrivate : NSObject
{
    BOOL closed;
    BOOL needsLayout;
    BOOL needsToApplyStyles;
    BOOL ignoringMouseDraggedEvents;
    BOOL printing;
    BOOL avoidingPrintOrphan;
    id savedSubviews;
    BOOL subviewsSetAside;
    NSEvent *mouseDownEvent;
    BOOL handlingMouseDownEvent;
    NSEvent *keyDownEvent;
    struct _NSSize lastLayoutSize;
    struct _NSPoint lastScrollPosition;
    WebPluginController *pluginController;
    NSString *toolTip;
    int lastToolTipTag;
    id trackingRectOwner;
    void *trackingRectUserData;
    NSTimer *autoscrollTimer;
    NSEvent *autoscrollTriggerEvent;
    NSArray *pageRects;
    NSMutableDictionary *highlighters;
    BOOL resigningFirstResponder;
    BOOL nextResponderDisabledOnce;
    WebTextCompleteController *compController;
    BOOL transparentBackground;
    struct WebHTMLViewInterpretKeyEventsParameters *interpretKeyEventsParameters;
    BOOL receivedNOOP;
    WebDataSource *dataSource;
    struct CachedImage *promisedDragTIFFDataSource;
    struct __CFRunLoopTimer *updateFocusedAndActiveStateTimer;
    struct __CFRunLoopTimer *updateMouseoverTimer;
    SEL selectorForDoCommandBySelector;
}

+ (void)initialize;
- (void)dealloc;
- (void)finalize;
- (void)clear;

@end

@interface WebCoreScrollView : NSScrollView
{
}

@end

@interface NSURL (WebDataURL)
+ (id)_web_uniqueWebDataURL;
@end

@interface WebHTMLView (WebDocumentInternalProtocols) <WebDocumentElement, WebMultipleTextMatches>
- (id)elementAtPoint:(struct _NSPoint)fp8;
- (id)elementAtPoint:(struct _NSPoint)fp8 allowShadowContent:(BOOL)fp16;
- (unsigned int)markAllMatchesForText:(id)fp8 caseSensitive:(BOOL)fp12 limit:(unsigned int)fp16;
- (void)setMarkedTextMatchesAreHighlighted:(BOOL)fp8;
- (BOOL)markedTextMatchesAreHighlighted;
- (void)unmarkAllTextMatches;
- (id)rectsForTextMatches;
@end

@interface WebHTMLView (WebDocumentPrivateProtocols) <WebDocumentSelection, WebDocumentIncrementalSearching>
- (struct _NSRect)selectionRect;
- (id)selectionTextRects;
- (id)selectionView;
- (id)selectionImageForcingBlackText:(BOOL)fp8;
- (id)selectionImageForcingWhiteText:(BOOL)fp8;
- (struct _NSRect)selectionImageRect;
- (id)pasteboardTypesForSelection;
- (void)writeSelectionWithPasteboardTypes:(id)fp8 toPasteboard:(id)fp12;
- (void)selectAll;
- (void)deselectAll;
- (id)string;
- (id)_attributeStringFromDOMRange:(id)fp8;
- (id)attributedString;
- (id)selectedString;
- (id)selectedAttributedString;
- (BOOL)supportsTextEncoding;
- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20 startInSelection:(BOOL)fp24;
@end

@interface WebHTMLView (WebNSTextInputSupport) <NSTextInput>
- (id)validAttributesForMarkedText;
- (id)inputContext;
- (id)textStorage;
- (unsigned int)characterIndexForPoint:(struct _NSPoint)fp8;
- (struct _NSRect)firstRectForCharacterRange:(struct _NSRange)fp8;
- (struct _NSRange)selectedRange;
- (struct _NSRange)markedRange;
- (id)attributedSubstringFromRange:(struct _NSRange)fp8;
- (long)conversationIdentifier;
- (BOOL)hasMarkedText;
- (void)unmarkText;
- (void)setMarkedText:(id)fp8 selectedRange:(struct _NSRange)fp12;
- (void)doCommandBySelector:(SEL)fp8;
- (void)insertText:(id)fp8;
- (void)_updateSelectionForInputManager;
@end

@interface WebHTMLView (WebInternal)
- (void)_selectionChanged;
- (void)_updateFontPanel;
- (BOOL)_canSmartCopyOrDelete;
- (id)_mouseDownEvent;
- (void)_pauseNullEventsForAllNetscapePlugins;
- (void)_resumeNullEventsForAllNetscapePlugins;
- (id)_highlighterForType:(id)fp8;
- (id)_frame;
- (void)paste:(id)fp8;
- (void)pasteAsPlainText:(id)fp8;
- (void)closeIfNotCurrentView;
- (id)_documentFragmentFromPasteboard:(id)fp8;
- (void)_lookUpInDictionaryFromMenu:(id)fp8;
- (void)_hoverFeedbackSuspendedChanged;
- (BOOL)_interceptEditingKeyEvent:(struct KeyboardEvent *)fp8 shouldSaveCommand:(BOOL)fp12;
- (struct CachedImage *)promisedDragTIFFDataSource;
- (void)setPromisedDragTIFFDataSource:(struct CachedImage *)fp8;
- (void)_layoutIfNeeded;
- (void)_web_layoutIfNeededRecursive;
@end

@interface NSArray (WebHTMLView)
- (void)_web_makePluginViewsPerformSelector:(SEL)fp8 withObject:(id)fp12;
@end

@interface WebHTMLView (WebTextSizing) <_WebDocumentTextSizing>
- (void)_makeTextSmaller:(id)fp8;
- (void)_makeTextLarger:(id)fp8;
- (void)_makeTextStandardSize:(id)fp8;
- (BOOL)_tracksCommonSizeFactor;
- (void)_textSizeMultiplierChanged;
- (BOOL)_canMakeTextSmaller;
- (BOOL)_canMakeTextLarger;
- (BOOL)_canMakeTextStandardSize;
@end

@interface NSToolTipPanel (WebHTMLViewFileInternal)
- (void)setAcceptsMouseMovedEvents:(BOOL)fp8;
@end

@interface NSMutableDictionary (WebHTMLViewFileInternal)
- (void)_web_setObjectIfNotNil:(id)fp8 forKey:(id)fp12;
@end

@interface NSView (WebHTMLViewFileInternal)
- (void)_web_addDescendantWebHTMLViewsToArray:(id)fp8;
@end

@interface WebHTMLView (WebPrivate)
+ (id)supportedMIMETypes;
+ (id)supportedImageMIMETypes;
+ (id)supportedNonImageMIMETypes;
+ (id)unsupportedTextMIMETypes;
+ (void)_postFlagsChangedEvent:(id)fp8;
+ (id)_insertablePasteboardTypes;
+ (id)_selectionPasteboardTypes;
- (void)_updateMouseoverWithFakeEvent;
- (void)_frameOrBoundsChanged;
- (void)_setAsideSubviews;
- (void)_restoreSubviews;
- (void)_propagateDirtyRectsToOpaqueAncestors;
- (void)_recursiveDisplayRectIfNeededIgnoringOpacity:(struct _NSRect)fp8 isVisibleRect:(BOOL)fp24 rectIsVisibleRectForView:(id)fp28 topView:(BOOL)fp32;
- (void)_recursiveDisplayAllDirtyWithLockFocus:(BOOL)fp8 visRect:(struct _NSRect)fp12;
- (BOOL)_insideAnotherHTMLView;
- (id)hitTest:(struct _NSPoint)fp8;
- (void)_clearLastHitViewIfSelf;
- (int)addTrackingRect:(struct _NSRect)fp8 owner:(id)fp24 userData:(void *)fp28 assumeInside:(BOOL)fp32;
- (int)_addTrackingRect:(struct _NSRect)fp8 owner:(id)fp24 userData:(void *)fp28 assumeInside:(BOOL)fp32 useTrackingNum:(int)fp36;
- (void)_addTrackingRects:(struct _NSRect *)fp8 owner:(id)fp12 userDataList:(void **)fp16 assumeInsideList:(char *)fp20 trackingNums:(int *)fp24 count:(int)fp28;
- (void)removeTrackingRect:(int)fp8;
- (void)_removeTrackingRects:(int *)fp8 count:(int)fp12;
- (void)_sendToolTipMouseExited;
- (void)_sendToolTipMouseEntered;
- (void)_setToolTip:(id)fp8;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)_updateMouseoverWithEvent:(id)fp8;
- (id)_dragImageForURL:(id)fp8 withLabel:(id)fp12;
- (id)_dragImageForLinkElement:(id)fp8;
- (void)pasteboardChangedOwner:(id)fp8;
- (void)pasteboard:(id)fp8 provideDataForType:(id)fp12;
- (void)_handleAutoscrollForMouseDragged:(id)fp8;
- (id)_pluginController;
- (void)_layoutForPrinting;
- (void)_smartInsertForString:(id)fp8 replacingRange:(id)fp12 beforeString:(id *)fp16 afterString:(id *)fp20;
- (BOOL)_canSmartReplaceWithPasteboard:(id)fp8;
- (void)_startAutoscrollTimer:(id)fp8;
- (struct _NSRect)_selectionRect;
- (void)_stopAutoscrollTimer;
- (void)_autoscroll;
- (BOOL)_canEdit;
- (BOOL)_canEditRichly;
- (BOOL)_canAlterCurrentSelection;
- (BOOL)_hasSelection;
- (BOOL)_hasSelectionOrInsertionPoint;
- (BOOL)_hasInsertionPoint;
- (BOOL)_isEditable;
- (BOOL)_transparentBackground;
- (void)_setTransparentBackground:(BOOL)fp8;
- (id)_selectionDraggingImage;
- (struct _NSRect)_selectionDraggingRect;
- (id)_insertOrderedList;
- (id)_insertUnorderedList;
- (BOOL)_canIncreaseSelectionListLevel;
- (BOOL)_canDecreaseSelectionListLevel;
- (id)_increaseSelectionListLevel;
- (id)_increaseSelectionListLevelOrdered;
- (id)_increaseSelectionListLevelUnordered;
- (void)_decreaseSelectionListLevel;
- (void)_setHighlighter:(id)fp8 ofType:(id)fp12;
- (void)_removeHighlighterOfType:(id)fp8;
- (void)_updateFocusedAndActiveState;
- (void)_writeSelectionToPasteboard:(id)fp8;
- (void)close;
- (BOOL)_hasHTMLDocument;
- (id)_documentFragmentFromPasteboard:(id)fp8 forType:(id)fp12 inContext:(id)fp16 subresources:(id *)fp20;
@end

@interface WebHTMLView (WebHTMLViewFileInternal)
+ (id)_excludedElementsForAttributedStringConversion;
- (id)_documentRange;
- (BOOL)_imageExistsAtPaths:(id)fp8;
- (id)_dataSource;
- (id)_bridge;
- (id)_webView;
- (id)_frameView;
- (id)_documentFragmentWithPaths:(id)fp8;
- (id)_documentFragmentFromPasteboard:(id)fp8 inContext:(id)fp12 allowPlainText:(BOOL)fp16;
- (id)_plainTextFromPasteboard:(id)fp8;
- (void)_pasteWithPasteboard:(id)fp8 allowPlainText:(BOOL)fp12;
- (void)_pasteAsPlainTextWithPasteboard:(id)fp8;
- (BOOL)_shouldInsertFragment:(id)fp8 replacingDOMRange:(id)fp12 givenAction:(int)fp16;
- (BOOL)_shouldInsertText:(id)fp8 replacingDOMRange:(id)fp12 givenAction:(int)fp16;
- (BOOL)_shouldReplaceSelectionWithText:(id)fp8 givenAction:(int)fp12;
- (float)_calculatePrintHeight;
- (void)_updateTextSizeMultiplier;
- (id)_selectedRange;
- (BOOL)_shouldDeleteRange:(id)fp8;
- (id)_hitViewForEvent:(id)fp8;
- (void)_writeSelectionWithPasteboardTypes:(id)fp8 toPasteboard:(id)fp12 cachedAttributedString:(id)fp16;
- (void)_setMouseDownEvent:(id)fp8;
- (void)_cancelUpdateFocusedAndActiveStateTimer;
- (void)_cancelUpdateMouseoverTimer;
- (id)_topHTMLView;
- (BOOL)_isTopHTMLView;
- (void)_web_setPrintingModeRecursive;
- (void)_web_clearPrintingModeRecursive;
- (void)_web_setPrintingModeRecursiveAndAdjustViewSize;
@end

@interface NSWindow (BorderViewAccess)
- (id)_web_borderView;
@end

@interface WebHistory : NSObject
{
    WebHistoryPrivate *_historyPrivate;
}

+ (id)optionalSharedHistory;
+ (void)setOptionalSharedHistory:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)_sendNotification:(id)fp8 entries:(id)fp12;
- (id)addItemForURL:(id)fp8;
- (void)addItem:(id)fp8;
- (void)removeItem:(id)fp8;
- (void)removeItems:(id)fp8;
- (void)removeAllItems;
- (void)addItems:(id)fp8;
- (void)setLastVisitedTimeInterval:(double)fp8 forItem:(id)fp16;
- (id)orderedLastVisitedDays;
- (id)orderedItemsLastVisitedOnDay:(id)fp8;
- (BOOL)containsItemForURLString:(id)fp8;
- (BOOL)containsURL:(id)fp8;
- (id)itemForURL:(id)fp8;
- (BOOL)loadFromURL:(id)fp8 error:(id *)fp12;
- (BOOL)saveToURL:(id)fp8 error:(id *)fp12;
- (id)_itemForURLString:(id)fp8;
- (id)ageLimitDate;
- (void)setHistoryItemLimit:(int)fp8;
- (int)historyItemLimit;
- (void)setHistoryAgeInDaysLimit:(int)fp8;
- (int)historyAgeInDaysLimit;

@end

@interface _WebCoreHistoryProvider : NSObject <WebCoreHistoryProvider>
{
    WebHistory *history;
}

- (id)initWithHistory:(id)fp8;
- (BOOL)containsURL:(const unsigned short *)fp8 length:(unsigned int)fp12;
- (void)dealloc;

@end

@interface WebHistoryPrivate : NSObject
{
    NSMutableDictionary *_entriesByURL;
    struct HashMap<WebHistoryDateKey, WTF::RetainPtr<NSMutableArray>, WTF::IntHash<long long unsigned int>, WTF::HashTraits<long long int>, WTF::HashTraits<WTF::RetainPtr<NSMutableArray>>> *_entriesByDate;
    NSMutableArray *_orderedLastVisitedDays;
    BOOL itemLimitSet;
    int itemLimit;
    BOOL ageInDaysLimitSet;
    int ageInDaysLimit;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (void)finalize;
- (BOOL)findKey:(long long *)fp8 forDay:(double)fp12;
- (void)insertItem:(id)fp8 forDateKey:(long long)fp12;
- (BOOL)_removeItemFromDateCaches:(id)fp8;
- (BOOL)removeItemForURLString:(id)fp8;
- (void)_addItemToDateCaches:(id)fp8;
- (void)addItem:(id)fp8;
- (void)setLastVisitedTimeInterval:(double)fp8 forItem:(id)fp16;
- (BOOL)removeItem:(id)fp8;
- (BOOL)removeItems:(id)fp8;
- (BOOL)removeAllItems;
- (void)addItems:(id)fp8;
- (id)orderedLastVisitedDays;
- (id)orderedItemsLastVisitedOnDay:(id)fp8;
- (id)itemForURLString:(id)fp8;
- (BOOL)containsItemForURLString:(id)fp8;
- (BOOL)containsURL:(id)fp8;
- (id)itemForURL:(id)fp8;
- (void)setHistoryAgeInDaysLimit:(int)fp8;
- (int)historyAgeInDaysLimit;
- (void)setHistoryItemLimit:(int)fp8;
- (int)historyItemLimit;
- (id)_ageLimitDate;
- (id)arrayRepresentation;
- (BOOL)_loadHistoryGutsFromURL:(id)fp8 savedItemsCount:(int *)fp12 collectDiscardedItemsInto:(id)fp16 error:(id *)fp20;
- (BOOL)loadFromURL:(id)fp8 collectDiscardedItemsInto:(id)fp12 error:(id *)fp16;
- (BOOL)_saveHistoryGuts:(int *)fp8 URL:(id)fp12 error:(id *)fp16;
- (BOOL)saveToURL:(id)fp8 error:(id *)fp12;

@end

@interface WebWindowWatcher : NSObject
{
}

- (void)windowWillClose:(id)fp8;

@end

@interface WebHistoryItem : NSObject <NSCopying>
{
    WebHistoryItemPrivate *_private;
}

- (id)init;
- (id)initWithURLString:(id)fp8 title:(id)fp12 lastVisitedTimeInterval:(double)fp16;
- (void)dealloc;
- (void)finalize;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)URLString;
- (id)originalURLString;
- (id)title;
- (void)setAlternateTitle:(id)fp8;
- (id)alternateTitle;
- (id)icon;
- (double)lastVisitedTimeInterval;
- (unsigned int)hash;
- (BOOL)isEqual:(id)fp8;
- (id)description;

@end

@interface WebHistoryItem (WebPrivate)
+ (void)_releaseAllPendingPageCaches;
- (id)initWithURL:(id)fp8 title:(id)fp12;
- (id)dictionaryRepresentation;
- (id)target;
- (BOOL)isTargetItem;
- (int)visitCount;
- (id)RSSFeedReferrer;
- (void)setRSSFeedReferrer:(id)fp8;
- (id)children;
- (void)setAlwaysAttemptToUsePageCache:(BOOL)fp8;
- (id)URL;
- (void)_setLastVisitedTimeInterval:(double)fp8;
- (id)_lastVisitedDate;
- (id)targetItem;
- (id)_transientPropertyForKey:(id)fp8;
- (void)_setTransientProperty:(id)fp8 forKey:(id)fp12;
@end

@interface WebHistoryItem (WebInternal)
+ (id)entryWithURL:(id)fp8;
+ (void)initWindowWatcherIfNecessary;
- (id)initWithURL:(id)fp8 target:(id)fp12 parent:(id)fp16 title:(id)fp20;
- (id)initWithURLString:(id)fp8 title:(id)fp12 displayTitle:(id)fp16 lastVisitedTimeInterval:(double)fp20;
- (id)initWithWebCoreHistoryItem:(struct PassRefPtr<WebCore::HistoryItem>)fp8;
- (void)setTitle:(id)fp8;
- (void)setVisitCount:(int)fp8;
- (void)setViewState:(id)fp8;
- (void)_mergeAutoCompleteHints:(id)fp8;
- (id)initFromDictionaryRepresentation:(id)fp8;
- (struct _NSPoint)scrollPoint;
@end

@interface WebHistoryItem (OmniAdditions)
- (id)documentState;
- (int)visitCount;
- (void)setURL:(id)fp8;
- (void)setTarget:(id)fp8;
- (void)setScrollPoint:(struct _NSPoint)fp8;
- (void)setDocumentState:(id)fp8;
- (void)setFormInfoFromRequest:(id)fp8;
- (void)setVisitCount:(int)fp8;
- (void)addChildItem:(id)fp8;
@end

@interface ThreadEnabler : NSObject
{
}

+ (void)enableThreading;
- (void)threadEnablingSelector:(id)fp8;

@end

@interface WebIconDatabasePrivate : NSObject
{
    id delegate;
    BOOL delegateImplementsDefaultIconForURL;
    NSMutableDictionary *htmlIcons;
}

@end

@interface WebIconDatabase : NSObject
{
    WebIconDatabasePrivate *_private;
    BOOL _isClosing;
}

+ (id)sharedIconDatabase;
+ (void)delayDatabaseCleanup;
+ (void)allowDatabaseCleanup;
- (id)init;
- (id)iconForURL:(id)fp8 withSize:(struct _NSSize)fp12 cache:(BOOL)fp20;
- (id)iconForURL:(id)fp8 withSize:(struct _NSSize)fp12;
- (id)iconURLForURL:(id)fp8;
- (id)defaultIconWithSize:(struct _NSSize)fp8;
- (id)defaultIconForURL:(id)fp8 withSize:(struct _NSSize)fp12;
- (void)retainIconForURL:(id)fp8;
- (void)releaseIconForURL:(id)fp8;
- (void)setDelegate:(id)fp8;
- (id)delegate;

@end

@interface WebIconDatabase (WebInternal)
- (BOOL)_isEnabled;
- (void)_sendNotificationForURL:(id)fp8;
- (void)_sendDidRemoveAllIconsNotification;
- (void)_applicationWillTerminate:(id)fp8;
- (id)_iconForFileURL:(id)fp8 withSize:(struct _NSSize)fp12;
- (void)_resetCachedWebPreferences:(id)fp8;
- (id)_largestIconFromDictionary:(id)fp8;
- (id)_iconsBySplittingRepresentationsOfIcon:(id)fp8;
- (id)_iconFromDictionary:(id)fp8 forSize:(struct _NSSize)fp12 cache:(BOOL)fp20;
- (void)_scaleIcon:(id)fp8 toSize:(struct _NSSize)fp12;
- (id)_databaseDirectory;
@end

@interface WebIconDatabase (WebPrivate)
+ (void)_checkIntegrityBeforeOpening;
@end

@interface WebIconDatabase (WebPendingPublic)
- (void)removeAllIcons;
@end

@interface WebImageRendererFactory : NSObject
{
}

+ (BOOL)shouldUseThreadedDecoding;
+ (void)setShouldUseThreadedDecoding:(BOOL)fp8;

@end

@interface WebInspector : NSObject
{
    WebView *_webView;
}

- (id)initWithWebView:(id)fp8;
- (void)webViewClosed;
- (void)show:(id)fp8;
- (void)showConsole:(id)fp8;
- (void)showTimeline:(id)fp8;
- (void)close:(id)fp8;
- (void)attach:(id)fp8;
- (void)detach:(id)fp8;

@end

@interface WebInspector (Obsolete)
+ (id)sharedWebInspector;
+ (id)webInspector;
- (void)setWebFrame:(id)fp8;
- (id)window;
- (void)showWindow:(id)fp8;
@end

@interface WebInspectorWindowController : NSWindowController
{
    WebView *_inspectedWebView;
    WebView *_webView;
    NSImageView *_shadowView;
    WebNodeHighlight *_currentHighlight;
    BOOL _attachedToInspectedWebView;
    BOOL _shouldAttach;
    BOOL _visible;
    BOOL _movingWindows;
}

- (id)init;
- (id)initWithInspectedWebView:(id)fp8;
- (void)dealloc;
- (BOOL)inspectorVisible;
- (id)webView;
- (id)window;
- (BOOL)windowShouldClose:(id)fp8;
- (void)close;
- (void)showWindow:(id)fp8;
- (void)attach;
- (void)detach;
- (void)highlightAndScrollToNode:(id)fp8;
- (void)highlightNode:(id)fp8;
- (void)hideHighlight;
- (void)animationDidEnd:(id)fp8;
- (void)showWebInspector:(id)fp8;
- (void)showErrorConsole:(id)fp8;
- (void)showNetworkTimeline:(id)fp8;

@end

@interface WebJavaScriptTextInputPanel : NSWindowController
{
    NSTextField *prompt;
    NSTextField *textInput;
}

- (id)initWithPrompt:(id)fp8 text:(id)fp12;
- (id)text;
- (void)pressedCancel:(id)fp8;
- (void)pressedOK:(id)fp8;

@end

@interface WebKeyGenerator : WebCoreKeyGenerator
{
    NSArray *strengthMenuItemTitles;
}

+ (void)createSharedGenerator;
- (void)dealloc;
- (id)strengthMenuItemTitles;
- (id)signedPublicKeyAndChallengeStringWithStrengthIndex:(unsigned int)fp8 challenge:(id)fp12 pageURL:(id)fp16;
- (int)addCertificatesToKeychainFromData:(id)fp8;

@end

@interface NSError (WebKitExtras)
+ (void)_registerWebKitErrors;
+ (id)_webkit_errorWithDomain:(id)fp8 code:(int)fp12 URL:(id)fp16;
+ (id)_webKitErrorWithDomain:(id)fp8 code:(int)fp12 URL:(id)fp16;
+ (id)_webKitErrorWithCode:(int)fp8 failingURL:(id)fp12;
+ (void)_webkit_addErrorsWithCodesAndDescriptions:(id)fp8 inDomain:(id)fp12;
- (id)_webkit_initWithDomain:(id)fp8 code:(int)fp12 URL:(id)fp16;
- (id)_initWithPluginErrorCode:(int)fp8 contentURL:(id)fp12 pluginPageURL:(id)fp16 pluginName:(id)fp20 MIMEType:(id)fp24;
@end

@interface NSString (WebKitExtras)
+ (unsigned int)_web_encodingForResource:(char **)fp8;
- (void)_web_drawAtPoint:(struct _NSPoint)fp8 font:(id)fp16 textColor:(id)fp20;
- (void)_web_drawDoubledAtPoint:(struct _NSPoint)fp8 withTopColor:(id)fp16 bottomColor:(id)fp20 font:(id)fp24;
- (float)_web_widthWithFont:(id)fp8;
- (id)_web_stringByAbbreviatingWithTildeInPath;
- (id)_web_stringByStrippingReturnCharacters;
- (BOOL)_webkit_isCaseInsensitiveEqualToString:(id)fp8;
- (BOOL)_webkit_hasCaseInsensitivePrefix:(id)fp8;
- (BOOL)_webkit_hasCaseInsensitiveSuffix:(id)fp8;
- (BOOL)_webkit_hasCaseInsensitiveSubstring:(id)fp8;
- (id)_webkit_filenameByFixingIllegalCharacters;
- (id)_webkit_stringByTrimmingWhitespace;
- (id)_webkit_stringByCollapsingNonPrintingCharacters;
- (id)_webkit_stringByCollapsingWhitespaceCharacters;
- (id)_webkit_fixedCarbonPOSIXPath;
@end

@interface WebKitPluginContainerView : NSView
{
    DOMElement *_element;
}

- (id)initWithFrame:(struct _NSRect)fp8 DOMElement:(id)fp24;
- (void)dealloc;
- (struct _NSRect)visibleRect;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)objectForWebScript;

@end

@interface WebKitStatistics : NSObject
{
}

+ (int)webViewCount;
+ (int)frameCount;
+ (int)dataSourceCount;
+ (int)viewCount;
+ (int)bridgeCount;
+ (int)HTMLRepresentationCount;

@end

@interface NSMutableArray (WebExtras)
- (void)_webkit_removeUselessMenuItemSeparators;
@end

@interface NSAttributedString (WebKitExtras)
+ (id)_web_attributedStringFromRange:(struct Range *)fp8;
- (id)_web_attributedStringByStrippingAttachmentCharacters;
@end

@interface NSControl (WebExtras)
- (void)sizeToFitAndAdjustWindowHeight;
@end

@interface NSData (WebNSDataExtras)
- (BOOL)_web_isCaseInsensitiveEqualToCString:(const char *)fp8;
- (id)_webkit_parseRFC822HeaderFields;
@end

@interface NSData (WebKitExtras)
- (id)_webkit_guessedMIMETypeForXML;
- (id)_webkit_guessedMIMEType;
@end

@interface NSString (WebNSDataExtrasInternal)
- (id)_web_capitalizeRFC822HeaderFieldName;
@end

@interface NSMutableDictionary (WebNSDictionaryExtras)
- (void)_webkit_setObject:(id)fp8 forUncopiedKey:(id)fp12;
- (void)_webkit_setInt:(int)fp8 forKey:(id)fp12;
- (void)_webkit_setFloat:(float)fp8 forKey:(id)fp12;
- (void)_webkit_setBool:(BOOL)fp8 forKey:(id)fp12;
- (void)_webkit_setUnsignedLongLong:(unsigned long long)fp8 forKey:(id)fp16;
@end

@interface NSDictionary (WebNSDictionaryExtras)
- (id)_webkit_numberForKey:(id)fp8;
- (int)_webkit_intForKey:(id)fp8;
- (id)_webkit_stringForKey:(id)fp8;
- (id)_webkit_objectForMIMEType:(id)fp8;
@end

@interface NSEvent (WebExtras)
- (BOOL)_web_isKeyEvent:(unsigned short)fp8;
- (BOOL)_web_isDeleteKeyEvent;
- (BOOL)_web_isEscapeKeyEvent;
- (BOOL)_web_isOptionTabKeyEvent;
- (BOOL)_web_isReturnOrEnterKeyEvent;
- (BOOL)_web_isTabKeyEvent;
@end

@interface NSFileManager (WebNSFileManagerExtras)
- (BOOL)_webkit_fileExistsAtPath:(id)fp8 isDirectory:(char *)fp12 traverseLink:(BOOL)fp16;
- (BOOL)_webkit_createIntermediateDirectoriesForPath:(id)fp8 attributes:(id)fp12;
- (BOOL)_webkit_createDirectoryAtPathWithIntermediateDirectories:(id)fp8 attributes:(id)fp12;
- (BOOL)_webkit_createFileAtPathWithIntermediateDirectories:(id)fp8 contents:(id)fp12 attributes:(id)fp16 directoryAttributes:(id)fp20;
- (BOOL)_webkit_removeFileOnlyAtPath:(id)fp8;
- (void)_webkit_backgroundRemoveFileAtPath:(id)fp8;
- (void)_webkit_backgroundRemoveLeftoverFiles:(id)fp8;
- (id)_webkit_carbonPathForPath:(id)fp8;
- (void)_webkit_setMetadataURL:(id)fp8 referrer:(id)fp12 atPath:(id)fp16;
- (id)_webkit_startupVolumeName;
- (id)_webkit_pathWithUniqueFilenameForPath:(id)fp8;
@end

@interface NSImage (WebExtras)
- (void)_web_scaleToMaxSize:(struct _NSSize)fp8;
- (void)_web_dissolveToFraction:(float)fp8;
- (void)_web_saveAndOpen;
@end

@interface NSNotificationCenter (WebNSNotificationCenterExtras)
+ (void)_postNotificationName:(id)fp8;
- (void)postNotificationOnMainThreadWithName:(id)fp8 object:(id)fp12;
- (void)postNotificationOnMainThreadWithName:(id)fp8 object:(id)fp12 userInfo:(id)fp16;
- (void)postNotificationOnMainThreadWithName:(id)fp8 object:(id)fp12 userInfo:(id)fp16 waitUntilDone:(BOOL)fp20;
@end

@interface NSPasteboard (WebExtras)
+ (id)_web_writableTypesForURL;
+ (id)_web_writableTypesForImageIncludingArchive:(BOOL)fp8;
+ (id)_web_dragTypesForURL;
+ (int)_web_setFindPasteboardString:(id)fp8 withOwner:(id)fp12;
- (id)_web_bestURL;
- (void)_web_writeURL:(id)fp8 andTitle:(id)fp12 types:(id)fp16;
- (void)_web_writeFileWrapperAsRTFDAttachment:(id)fp8;
- (void)_web_writePromisedRTFDFromArchive:(id)fp8 containsImage:(BOOL)fp12;
- (void)_web_writeImage:(id)fp8 element:(id)fp12 URL:(id)fp16 title:(id)fp20 archive:(id)fp24 types:(id)fp28 source:(id)fp32;
- (id)_web_declareAndWriteDragImageForElement:(id)fp8 URL:(id)fp12 title:(id)fp16 archive:(id)fp20 source:(id)fp24;
@end

@interface NSPrintOperation (WebKitExtras)
- (float)_web_pageSetupScaleFactor;
@end

@interface NSString (WebNSURLExtras)
- (BOOL)_web_isUserVisibleURL;
- (BOOL)_webkit_isJavaScriptURL;
- (BOOL)_webkit_isFileURL;
- (id)_webkit_stringByReplacingValidPercentEscapes;
- (id)_webkit_scriptIfJavaScriptURL;
- (BOOL)_webkit_isFTPDirectoryURL;
- (id)_web_mapHostNameWithRange:(struct _NSRange)fp8 encode:(BOOL)fp16 makeString:(BOOL)fp20;
- (BOOL)_web_hostNameNeedsDecodingWithRange:(struct _NSRange)fp8;
- (BOOL)_web_hostNameNeedsEncodingWithRange:(struct _NSRange)fp8;
- (id)_web_decodeHostNameWithRange:(struct _NSRange)fp8;
- (id)_web_encodeHostNameWithRange:(struct _NSRange)fp8;
- (id)_web_decodeHostName;
- (id)_web_encodeHostName;
- (struct _NSRange)_webkit_rangeOfURLScheme;
- (BOOL)_webkit_looksLikeAbsoluteURL;
- (id)_webkit_URLFragment;
@end

@interface NSURL (WebNSURLExtras)
+ (id)_web_URLWithUserTypedString:(id)fp8 relativeToURL:(id)fp12;
+ (id)_web_URLWithUserTypedString:(id)fp8;
+ (id)_web_URLWithDataAsString:(id)fp8;
+ (id)_web_URLWithDataAsString:(id)fp8 relativeToURL:(id)fp12;
+ (id)_web_URLWithData:(id)fp8;
+ (id)_web_URLWithData:(id)fp8 relativeToURL:(id)fp12;
- (id)_web_originalData;
- (id)_web_originalDataAsString;
- (id)_web_userVisibleString;
- (BOOL)_web_isEmpty;
- (const char *)_web_URLCString;
- (id)_webkit_canonicalize;
- (id)_webkit_URLByRemovingComponent:(int)fp8;
- (id)_webkit_URLByRemovingFragment;
- (id)_webkit_URLByRemovingResourceSpecifier;
- (BOOL)_webkit_isJavaScriptURL;
- (id)_webkit_scriptIfJavaScriptURL;
- (BOOL)_webkit_isFileURL;
- (BOOL)_webkit_isFTPDirectoryURL;
- (BOOL)_webkit_shouldLoadAsEmptyDocument;
- (id)_web_URLWithLowercasedScheme;
- (BOOL)_web_hasQuestionMarkOnlyQueryString;
- (id)_web_schemeSeparatorWithoutColon;
- (id)_web_dataForURLComponentType:(int)fp8;
- (id)_web_schemeData;
- (id)_web_hostData;
- (id)_web_hostString;
- (id)_webkit_suggestedFilenameWithMIMEType:(id)fp8;
@end

@interface NSMutableURLRequest (WebNSURLRequestExtras)
- (void)_web_setHTTPContentType:(id)fp8;
- (void)_web_setHTTPReferrer:(id)fp8;
- (void)_web_setHTTPUserAgent:(id)fp8;
@end

@interface NSURLRequest (WebNSURLRequestExtras)
- (id)_web_HTTPReferrer;
- (id)_web_HTTPContentType;
- (BOOL)_web_isConditionalRequest;
@end

@interface NSUserDefaults (WebNSUserDefaultsExtras)
+ (void)_webkit_ensureAndLockPreferredLanguageLock;
+ (void)_webkit_defaultsDidChange;
+ (void)_webkit_addDefaultsChangeObserver;
+ (id)_webkit_preferredLanguageCode;
@end

@interface NSString (WebNSUserDefaultsPrivate)
- (id)_webkit_HTTPStyleLanguageCode;
@end

@interface NSView (WebExtras)
- (id)_web_superviewOfClass:(Class)fp8 stoppingAtClass:(Class)fp12;
- (id)_web_superviewOfClass:(Class)fp8;
- (id)_web_parentWebFrameView;
- (id)_webView;
- (BOOL)_web_dragShouldBeginFromMouseDown:(id)fp8 withExpiration:(id)fp12 xHysteresis:(float)fp16 yHysteresis:(float)fp20;
- (BOOL)_web_dragShouldBeginFromMouseDown:(id)fp8 withExpiration:(id)fp12;
- (unsigned int)_web_dragOperationForDraggingInfo:(id)fp8;
- (void)_web_DragImageForElement:(id)fp8 rect:(struct _NSRect)fp12 event:(id)fp28 pasteboard:(id)fp32 source:(id)fp36 offset:(struct _NSPoint *)fp40;
- (BOOL)_web_firstResponderIsSelfOrDescendantView;
- (struct _NSRect)_web_convertRect:(struct _NSRect)fp8 toView:(id)fp24;
@end

@interface NSWindow (WebExtras)
+ (void)_webkit_displayThrottledWindows;
- (void)centerOverMainWindow;
@end

@interface WebNetscapePluginDocumentView : WebBaseNetscapePluginView
{
}

- (id)_omni_blockedURL;

@end

@interface WebNetscapePluginPackage : WebBasePluginPackage
{
    struct _NPPluginFuncs pluginFuncs;
    struct _NPNetscapeFuncs browserFuncs;
    unsigned short pluginSize;
    unsigned short pluginVersion;
    short resourceRef;
    void *NPP_New;
    void *NPP_Destroy;
    void *NPP_SetWindow;
    void *NPP_NewStream;
    void *NPP_DestroyStream;
    void *NPP_StreamAsFile;
    void *NPP_WriteReady;
    void *NPP_Write;
    void *NPP_Print;
    void *NPP_HandleEvent;
    void *NPP_URLNotify;
    void *NPP_GetValue;
    void *NPP_SetValue;
    void *NPP_Shutdown;
    void *NPP_GetJavaClass;
    BOOL isLoaded;
    BOOL needsUnload;
    unsigned int instanceCount;
    BOOL isBundle;
    BOOL isCFM;
    struct OpaqueCFragConnectionID *connID;
}

+ (void)initialize;
- (short)openResourceFile;
- (void)closeResourceFile:(short)fp8;
- (id)stringForStringListID:(short)fp8 andIndex:(short)fp12;
- (BOOL)getPluginInfoFromResources;
- (BOOL)_initWithPath:(id)fp8;
- (id)initWithPath:(id)fp8;
- (int)executableType;
- (void)launchRealPlayer;
- (void)_applyDjVuWorkaround;
- (BOOL)load;
- (void *)NPP_SetWindow;
- (void *)NPP_New;
- (void *)NPP_Destroy;
- (void *)NPP_NewStream;
- (void *)NPP_StreamAsFile;
- (void *)NPP_DestroyStream;
- (void *)NPP_WriteReady;
- (void *)NPP_Write;
- (void *)NPP_HandleEvent;
- (void *)NPP_URLNotify;
- (void *)NPP_GetValue;
- (void *)NPP_SetValue;
- (void *)NPP_Print;
- (void)wasRemovedFromPluginDatabase:(id)fp8;
- (void)open;
- (void)close;

@end

@interface WebNetscapePluginPackage (Internal)
- (void)_unloadWithShutdown:(BOOL)fp8;
@end

@interface WebNetscapePluginStream : WebBaseNetscapePluginStream
{
    // Error parsing type: ^{FrameLoader=^{Frame}^{FrameLoaderClient}ii{RefPtr<WebCore::DocumentLoader>="m_ptr"^{DocumentLoader}}{RefPtr<WebCore::DocumentLoader>="m_ptr"^{DocumentLoader}}{RefPtr<WebCore::DocumentLoader>="m_ptr"^{DocumentLoader}}i{PolicyCheck="m_request"{ResourceRequest="m_url"{KURL="urlString"{DeprecatedString="dataHandle"^^{DeprecatedStringData}"internalData"{DeprecatedStringData="refCount"I"_length"I"_unicode"^{DeprecatedChar}"_ascii"*"_maxUnicode"b30"_isUnicodeValid"b1"_isHeapAllocated"b1"_maxAscii"b31"_isAsciiValid"b1"_internalBuffer"[20c]}}"m_isValid"B"schemeEndPos"i"userStartPos"i"userEndPos"i"passwordEndPos"i"hostEndPos"i"portEndPos"i"pathEndPos"i"queryEndPos"i"fragmentEndPos"i}"m_cachePolicy"i"m_timeoutInterval"d"m_mainDocumentURL"{KURL="urlString"{DeprecatedString="dataHandle"^^{DeprecatedStringData}"internalData"{DeprecatedStringData="refCount"I"_length"I"_unicode"^{DeprecatedChar}"_ascii"*"_maxUnicode"b30"_isUnicodeValid"b1"_isHeapAllocated"b1"_maxAscii"b31"_isAsciiValid"b1"_internalBuffer"[20c]}}"m_isValid"B"schemeEndPos"i"userStartPos"i"userEndPos"i"passwordEndPos"i"hostEndPos"i"portEndPos"i"pathEndPos"i"queryEndPos"i"fragmentEndPos"i}"m_httpMethod"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_httpHeaderFields"{HashMap<WebCore::String,WebCore::String,WebCore::CaseFoldingHash,WTF::HashTraits<WebCore::String>,WTF::HashTraits<WebCore::String> >="m_impl"{HashTable<WebCore::StringImpl*,std::pair<WebCore::StringImpl*, int>,WTF::PairFirstExtractor<std::pair<WebCore::StringImpl*, int> >,WebCore::CaseFoldingHash,WTF::PairHashTraits<WTF::HashTraits<WebCore::StringImpl*>, WTF::HashTraits<int32_t> >,WTF::HashTraits<WebCore::StringImpl*> >="m_table"^{pair<WebCore::StringImpl*,int>}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}"m_httpBody"{RefPtr<WebCore::FormData>="m_ptr"^{FormData}}"m_allowHTTPCookies"B"m_resourceRequestUpdated"B"m_platformRequestUpdated"B"m_nsRequest"{RetainPtr<NSURLRequest>="m_ptr"@"NSURLRequest"}}"m_formState"{RefPtr<WebCore::FormState>="m_ptr"^{FormState}}"m_frameName"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_navigationFunction"^?"m_newWindowFunction"^?"m_contentFunction"^?"m_argument"^v}BBBBBBBB{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}i{HashSet<WebCore::String,WebCore::StringHash,WTF::HashTraits<WebCore::String> >="m_impl"{HashTable<WebCore::StringImpl*,WebCore::StringImpl*,WTF::IdentityExtractor<WebCore::StringImpl*>,WebCore::StringHash,WTF::HashTraits<WebCore::StringImpl*>,WTF::HashTraits<WebCore::StringImpl*> >="m_table"^^{StringImpl}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}{OwnPtr<WebCore::FormSubmission>="m_ptr"^{FormSubmission}}BB{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}BBBB{KURL="urlString"{DeprecatedString="dataHandle"^^{DeprecatedStringData}"internalData"{DeprecatedStringData="refCount"I"_length"I"_unicode"^{DeprecatedChar}"_ascii"*"_maxUnicode"b30"_isUnicodeValid"b1"_isHeapAllocated"b1"_maxAscii"b31"_isAsciiValid"b1"_internalBuffer"[20c]}}"m_isValid"B"schemeEndPos"i"userStartPos"i"userEndPos"i"passwordEndPos"i"hostEndPos"i"portEndPos"i"pathEndPos"i"queryEndPos"i"fragmentEndPos"i}{KURL="urlString"{DeprecatedString="dataHandle"^^{DeprecatedStringData}"internalData"{DeprecatedStringData="refCount"I"_length"I"_unicode"^{DeprecatedChar}"_ascii"*"_maxUnicode"b30"_isUnicodeValid"b1"_isHeapAllocated"b1"_maxAscii"b31"_isAsciiValid"b1"_internalBuffer"[20c]}}"m_isValid"B"schemeEndPos"i"userStartPos"i"userEndPos"i"passwordEndPos"i"hostEndPos"i"portEndPos"i"pathEndPos"i"queryEndPos"i"fragmentEndPos"i}{OwnPtr<WebCore::IconLoader>="m_ptr"^{IconLoader}}BB{OwnPtr<WebCore::ScheduledRedirection>="m_ptr"^{ScheduledRedirection}}BBB{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}{RefPtr<WebCore::TextResourceDecoder>="m_ptr"^{TextResourceDecoder}}B{RefPtr<WebCore::HTMLFormElement>="m_ptr"^{HTMLFormElement}}{HashMap<WebCore::String,WebCore::String,WebCore::StringHash,WTF::HashTraits<WebCore::String>,WTF::HashTraits<WebCore::String> >="m_impl"{HashTable<WebCore::StringImpl*,std::pair<WebCore::StringImpl*, int>,WTF::PairFirstExtractor<std::pair<WebCore::StringImpl*, int> >,WebCore::StringHash,WTF::PairHashTraits<WTF::HashTraits<WebCore::StringImpl*>, WTF::HashTraits<int32_t> >,WTF::HashTraits<WebCore::StringImpl*> >="m_table"^{pair<WebCore::StringImpl*,int>}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}{KURL="urlString"{DeprecatedString="dataHandle"^^{DeprecatedStringData}"internalData"{DeprecatedStringData="refCount"I"_length"I"_unicode"^{DeprecatedChar}"_ascii"*"_maxUnicode"b30"_isUnicodeValid"b1"_isHeapAllocated"b1"_maxAscii"b31"_isAsciiValid"b1"_internalBuffer"[20c]}}"m_isValid"B"schemeEndPos"i"userStartPos"i"userEndPos"i"passwordEndPos"i"hostEndPos"i"portEndPos"i"pathEndPos"i"queryEndPos"i"fragmentEndPos"i}{Timer<WebCore::FrameLoader>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{FrameLoader}"m_function"{?="__pfn"^"__delta"i}}{Timer<WebCore::FrameLoader>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{FrameLoader}"m_function"{?="__pfn"^"__delta"i}}{Timer<WebCore::FrameLoader>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{FrameLoader}"m_function"{?="__pfn"^"__delta"i}}^{Frame}{HashSet<WebCore::Frame*,WTF::PtrHash<WebCore::Frame*>,WTF::HashTraits<WebCore::Frame*> >="m_impl"{HashTable<int,int,WTF::IdentityExtractor<int>,WTF::IntHash<int32_t>,WTF::HashTraits<int32_t>,WTF::HashTraits<int32_t> >="m_table"^i"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}BBBB{RefPtr<WebCore::HistoryItem>="m_ptr"^{HistoryItem}}{RefPtr<WebCore::HistoryItem>="m_ptr"^{HistoryItem}}{RefPtr<WebCore::HistoryItem>="m_ptr"^{HistoryItem}}B}, name: _frameLoader
    struct NetscapePlugInStreamLoader *_loader;
    struct WebNetscapePlugInStreamLoaderClient *_client;
    NSURLRequest *request;
}

- (id)initWithFrameLoader:(struct FrameLoader *)fp8;
- (id)initWithRequest:(id)fp8 plugin:(struct _NPP *)fp12 notifyData:(void *)fp16 sendNotification:(BOOL)fp20;
- (void)dealloc;
- (void)finalize;
- (void)start;
- (void)cancelLoadWithError:(id)fp8;
- (void)stop;

@end

@interface WebNodeHighlight : NSObject
{
    NSView *_targetView;
    NSWindow *_highlightWindow;
    WebNodeHighlightView *_highlightView;
    NSAnimation *_fadeInAnimation;
    DOMNode *_highlightNode;
    id _delegate;
}

- (id)initWithTargetView:(id)fp8;
- (void)setHighlightedNode:(id)fp8;
- (id)highlightedNode;
- (void)dealloc;
- (void)attachHighlight;
- (id)delegate;
- (void)detachHighlight;
- (void)show;
- (void)hide;
- (void)animationDidEnd:(id)fp8;
- (BOOL)ignoresMouseEvents;
- (id)highlightView;
- (void)setDelegate:(id)fp8;
- (void)setHolesNeedUpdateInTargetViewRect:(struct _NSRect)fp8;
- (void)setIgnoresMouseEvents:(BOOL)fp8;
- (id)targetView;

@end

@interface WebNodeHighlightFadeInAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)fp8;

@end

@interface WebNodeHighlight (FileInternal)
- (struct _NSRect)_computeHighlightWindowFrame;
- (void)_repositionHighlightWindow;
- (void)_animateFadeIn:(id)fp8;
@end

@interface WebNodeHighlightView : NSView
{
    WebNodeHighlight *_webNodeHighlight;
    float _fractionFadedIn;
}

- (id)initWithWebNodeHighlight:(id)fp8;
- (void)dealloc;
- (void)detachFromWebNodeHighlight;
- (void)drawRect:(struct _NSRect)fp8;
- (id)webNodeHighlight;
- (float)fractionFadedIn;
- (void)setFractionFadedIn:(float)fp8;
- (void)setHolesNeedUpdateInRect:(struct _NSRect)fp8;

@end

@interface WebNodeHighlightView (FileInternal)
- (id)_holes;
@end

@interface WebNullPluginView : NSImageView
{
    NSError *error;
    DOMElement *element;
}

- (id)initWithFrame:(struct _NSRect)fp8 error:(id)fp24 DOMElement:(id)fp28;
- (void)dealloc;
- (void)reportFailure;
- (void)viewDidMoveToWindow;

@end

@interface WebPDFRepresentation : NSObject <WebDocumentRepresentation>
{
}

+ (id)postScriptMIMETypes;
+ (id)supportedMIMETypes;
+ (Class)PDFDocumentClass;
- (void)setDataSource:(id)fp8;
- (void)receivedData:(id)fp8 withDataSource:(id)fp12;
- (void)receivedError:(id)fp8 withDataSource:(id)fp12;
- (id)convertPostScriptDataSourceToPDF:(id)fp8;
- (void)finishedLoadingWithDataSource:(id)fp8;
- (BOOL)canProvideDocumentSource;
- (id)documentSource;
- (id)title;

@end

@interface PDFPrefUpdatingProxy : NSProxy
{
    WebPDFView *view;
}

- (id)initWithView:(id)fp8;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;

@end

@interface WebPDFView : NSView <WebDocumentView, WebDocumentSearching, WebDocumentIncrementalSearching, WebMultipleTextMatches, WebDocumentSelection, WebDocumentElement, _WebDocumentViewState, _WebDocumentTextSizing>
{
    NSView *previewView;
    PDFView *PDFSubview;
    NSString *path;
    id trackedFirstResponder;
    BOOL written;
    BOOL _ignoreScaleAndDisplayModeAndPageNotifications;
    BOOL _willUpdatePreferencesSoon;
    PDFView *PDFSubviewProxy;
    WebDataSource *dataSource;
    NSArray *textMatches;
    struct _NSPoint lastScrollPosition;
}

+ (id)PDFKitBundle;
+ (id)supportedMIMETypes;
- (void)setPDFDocument:(id)fp8;
- (void)dealloc;
- (void)centerSelectionInVisibleArea:(id)fp8;
- (void)scrollPageDown:(id)fp8;
- (void)scrollPageUp:(id)fp8;
- (void)scrollLineDown:(id)fp8;
- (void)scrollLineUp:(id)fp8;
- (void)scrollToBeginningOfDocument:(id)fp8;
- (void)scrollToEndOfDocument:(id)fp8;
- (void)jumpToSelection:(id)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (id)hitTest:(struct _NSPoint)fp8;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)menuForEvent:(id)fp8;
- (void)setNextKeyView:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)fp8;
- (BOOL)validateUserInterfaceItemWithoutDelegate:(id)fp8;
- (BOOL)validateUserInterfaceItem:(id)fp8;
- (void)copy:(id)fp8;
- (void)takeFindStringFromSelection:(id)fp8;
- (BOOL)canPrintHeadersAndFooters;
- (id)printOperationWithPrintInfo:(id)fp8;
- (void)setDataSource:(id)fp8;
- (void)dataSourceUpdated:(id)fp8;
- (void)setNeedsLayout:(BOOL)fp8;
- (void)layout;
- (void)viewWillMoveToHostWindow:(id)fp8;
- (void)viewDidMoveToHostWindow;
- (id)elementAtPoint:(struct _NSPoint)fp8;
- (id)elementAtPoint:(struct _NSPoint)fp8 allowShadowContent:(BOOL)fp16;
- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20;
- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20 startInSelection:(BOOL)fp24;
- (void)setMarkedTextMatchesAreHighlighted:(BOOL)fp8;
- (BOOL)markedTextMatchesAreHighlighted;
- (unsigned int)markAllMatchesForText:(id)fp8 caseSensitive:(BOOL)fp12 limit:(unsigned int)fp16;
- (void)unmarkAllTextMatches;
- (id)rectsForTextMatches;
- (BOOL)supportsTextEncoding;
- (id)string;
- (id)attributedString;
- (id)selectedString;
- (id)selectedAttributedString;
- (void)selectAll;
- (void)deselectAll;
- (struct _NSPoint)scrollPoint;
- (void)setScrollPoint:(struct _NSPoint)fp8;
- (id)viewState;
- (void)setViewState:(id)fp8;
- (void)_makeTextSmaller:(id)fp8;
- (void)_makeTextLarger:(id)fp8;
- (void)_makeTextStandardSize:(id)fp8;
- (void)_textSizeMultiplierChanged;
- (BOOL)_tracksCommonSizeFactor;
- (BOOL)_canMakeTextSmaller;
- (BOOL)_canMakeTextLarger;
- (BOOL)_canMakeTextStandardSize;
- (struct _NSRect)selectionRect;
- (id)selectionTextRects;
- (id)selectionView;
- (id)selectionImageForcingBlackText:(BOOL)fp8;
- (id)selectionImageForcingWhiteText:(BOOL)fp8;
- (struct _NSRect)selectionImageRect;
- (id)pasteboardTypesForSelection;
- (void)writeSelectionWithPasteboardTypes:(id)fp8 toPasteboard:(id)fp12;
- (void)PDFViewWillClickOnLink:(id)fp8 withURL:(id)fp12;
- (void)PDFViewOpenPDFInNativeApplication:(id)fp8;
- (void)PDFViewSavePDFToDownloadFolder:(id)fp8;

@end

@interface WebPDFView (FileInternal)
+ (Class)_PDFPreviewViewClass;
+ (Class)_PDFViewClass;
- (BOOL)_anyPDFTagsFoundInMenu:(id)fp8;
- (void)_applyPDFDefaults;
- (BOOL)_canLookUpInDictionary;
- (id)_clipViewForPDFDocumentView;
- (id)_fakeKeyEventWithFunctionKey:(unsigned short)fp8;
- (void)_lookUpInDictionaryFromMenu:(id)fp8;
- (id)_menuItemsFromPDFKitForEvent:(id)fp8;
- (id)_nextMatchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20 fromSelection:(id)fp24 startInSelection:(BOOL)fp28;
- (void)_openWithFinder:(id)fp8;
- (id)_path;
- (void)_PDFDocumentViewMightHaveScrolled:(id)fp8;
- (id)_PDFSubview;
- (BOOL)_pointIsInSelection:(struct _NSPoint)fp8;
- (void)_scaleOrDisplayModeOrPageChanged:(id)fp8;
- (id)_scaledAttributedString:(id)fp8;
- (void)_setTextMatches:(id)fp8;
- (id)_temporaryPDFDirectoryPath;
- (void)_trackFirstResponder;
- (void)_updatePreferences:(id)fp8;
- (void)_updatePreferencesSoon;
- (id)_visiblePDFPages;
@end

@interface WebPanelAuthenticationHandler : NSObject
{
    NSMutableDictionary *windowToPanel;
    NSMutableDictionary *challengeToWindow;
    NSMutableDictionary *windowToChallengeQueue;
}

+ (id)sharedHandler;
- (id)init;
- (void)dealloc;
- (void)enqueueChallenge:(id)fp8 forWindow:(id)fp12;
- (void)tryNextChallengeForWindow:(id)fp8;
- (void)startAuthentication:(id)fp8 window:(id)fp12;
- (void)cancelAuthentication:(id)fp8;
- (void)_authenticationDoneWithChallenge:(id)fp8 result:(id)fp12;

@end

@interface WebPluginContainerCheck : NSObject
{
    NSURLRequest *_request;
    NSString *_target;
    WebPluginController *_controller;
    id _resultObject;
    SEL _resultSelector;
    BOOL _done;
    WebPolicyDecisionListener *_listener;
}

+ (id)checkWithRequest:(id)fp8 target:(id)fp12 resultObject:(id)fp16 selector:(SEL)fp20 controller:(id)fp24;
- (id)initWithRequest:(id)fp8 target:(id)fp12 resultObject:(id)fp16 selector:(SEL)fp20 controller:(id)fp24;
- (void)finalize;
- (void)dealloc;
- (void)_continueWithPolicy:(int)fp8;
- (BOOL)_isForbiddenFileLoad;
- (id)_actionInformationWithURL:(id)fp8;
- (void)_askPolicyDelegate;
- (void)start;
- (void)cancel;

@end

@interface WebPluginController : NSObject <WebPluginManualLoader>
{
    NSView *_documentView;
    WebDataSource *_dataSource;
    NSMutableArray *_views;
    BOOL _started;
    NSMutableSet *_checksInProgress;
}

+ (id)plugInViewWithArguments:(id)fp8 fromPluginPackage:(id)fp12;
+ (BOOL)isPlugInView:(id)fp8;
- (id)initWithDocumentView:(id)fp8;
- (void)setDataSource:(id)fp8;
- (void)dealloc;
- (void)startAllPlugins;
- (void)stopAllPlugins;
- (void)addPlugin:(id)fp8;
- (void)destroyPlugin:(id)fp8;
- (void)_webPluginContainerCancelCheckIfAllowedToLoadRequest:(id)fp8;
- (void)_cancelOutstandingChecks;
- (void)destroyAllPlugins;
- (id)_webPluginContainerCheckIfAllowedToLoadRequest:(id)fp8 inFrame:(id)fp12 resultObject:(id)fp16 selector:(SEL)fp20;
- (void)webPlugInContainerLoadRequest:(id)fp8 inFrame:(id)fp12;
- (void)showURL:(id)fp8 inFrame:(id)fp12;
- (void)webPlugInContainerShowStatus:(id)fp8;
- (void)showStatus:(id)fp8;
- (id)webPlugInContainerSelectionColor;
- (id)selectionColor;
- (id)webFrame;
- (id)bridge;
- (id)webView;
- (id)URLPolicyCheckReferrer;
- (void)pluginView:(id)fp8 receivedResponse:(id)fp12;
- (void)pluginView:(id)fp8 receivedData:(id)fp12;
- (void)pluginView:(id)fp8 receivedError:(id)fp12;
- (void)pluginViewFinishedLoading:(id)fp8;

@end

@interface WebPluginController (OmniChanges)
+ (void)addPlugInView:(id)fp8;
+ (void)removePlugInView:(id)fp8;
@end

@interface WebPluginDatabase : NSObject
{
    NSMutableDictionary *plugins;
    NSMutableSet *registeredMIMETypes;
    NSArray *plugInPaths;
}

+ (id)sharedDatabase;
+ (void)closeSharedDatabase;
+ (void)setAdditionalWebPlugInPaths:(id)fp8;
- (id)pluginForKey:(id)fp8 withEnumeratorSelector:(SEL)fp12;
- (id)pluginForMIMEType:(id)fp8;
- (id)pluginForExtension:(id)fp8;
- (id)plugins;
- (void)setPlugInPaths:(id)fp8;
- (void)close;
- (id)init;
- (void)dealloc;
- (void)refresh;
- (BOOL)isMIMETypeRegistered:(id)fp8;

@end

@interface WebPluginDatabase (Internal)
+ (id)_defaultPlugInPaths;
- (id)_plugInPaths;
- (void)_addPlugin:(id)fp8;
- (void)_removePlugin:(id)fp8;
- (id)_scanForNewPlugins;
@end

@interface WebPluginPackage : WebBasePluginPackage
{
}

- (id)initWithPath:(id)fp8;
- (Class)viewFactory;
- (BOOL)load;

@end

@interface NSObject (WebScripting)
+ (BOOL)isSelectorExcludedFromWebScript:(SEL)fp8;
+ (BOOL)isKeyExcludedFromWebScript:(const char *)fp8;
@end

@interface WebPolicyDecisionListener : NSObject <WebPolicyDecisionListener>
{
    WebPolicyDecisionListenerPrivate *_private;
}

- (id)_initWithTarget:(id)fp8 action:(SEL)fp12;
- (void)dealloc;
- (void)_usePolicy:(int)fp8;
- (void)_invalidate;
- (void)use;
- (void)ignore;
- (void)download;

@end

@interface WebPolicyDecisionListenerPrivate : NSObject
{
    id target;
    SEL action;
}

- (id)initWithTarget:(id)fp8 action:(SEL)fp12;
- (void)dealloc;

@end

@interface WebPreferences : NSObject <NSCoding>
{
    WebPreferencesPrivate *_private;
}

+ (id)standardPreferences;
+ (void)initialize;
- (id)init;
- (id)initWithIdentifier:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)dealloc;
- (id)identifier;
- (id)_valueForKey:(id)fp8;
- (id)_stringValueForKey:(id)fp8;
- (void)_setStringValue:(id)fp8 forKey:(id)fp12;
- (int)_integerValueForKey:(id)fp8;
- (void)_setIntegerValue:(int)fp8 forKey:(id)fp12;
- (float)_floatValueForKey:(id)fp8;
- (void)_setFloatValue:(float)fp8 forKey:(id)fp12;
- (BOOL)_boolValueForKey:(id)fp8;
- (void)_setBoolValue:(BOOL)fp8 forKey:(id)fp12;
- (unsigned long long)_unsignedLongLongValueForKey:(id)fp8;
- (void)_setUnsignedLongLongValue:(unsigned long long)fp8 forKey:(id)fp16;
- (id)standardFontFamily;
- (void)setStandardFontFamily:(id)fp8;
- (id)fixedFontFamily;
- (void)setFixedFontFamily:(id)fp8;
- (id)serifFontFamily;
- (void)setSerifFontFamily:(id)fp8;
- (id)sansSerifFontFamily;
- (void)setSansSerifFontFamily:(id)fp8;
- (id)cursiveFontFamily;
- (void)setCursiveFontFamily:(id)fp8;
- (id)fantasyFontFamily;
- (void)setFantasyFontFamily:(id)fp8;
- (int)defaultFontSize;
- (void)setDefaultFontSize:(int)fp8;
- (int)defaultFixedFontSize;
- (void)setDefaultFixedFontSize:(int)fp8;
- (int)minimumFontSize;
- (void)setMinimumFontSize:(int)fp8;
- (int)minimumLogicalFontSize;
- (void)setMinimumLogicalFontSize:(int)fp8;
- (id)defaultTextEncodingName;
- (void)setDefaultTextEncodingName:(id)fp8;
- (BOOL)userStyleSheetEnabled;
- (void)setUserStyleSheetEnabled:(BOOL)fp8;
- (id)userStyleSheetLocation;
- (void)setUserStyleSheetLocation:(id)fp8;
- (BOOL)shouldPrintBackgrounds;
- (void)setShouldPrintBackgrounds:(BOOL)fp8;
- (BOOL)isJavaEnabled;
- (void)setJavaEnabled:(BOOL)fp8;
- (BOOL)isJavaScriptEnabled;
- (void)setJavaScriptEnabled:(BOOL)fp8;
- (BOOL)javaScriptCanOpenWindowsAutomatically;
- (void)setJavaScriptCanOpenWindowsAutomatically:(BOOL)fp8;
- (BOOL)arePlugInsEnabled;
- (void)setPlugInsEnabled:(BOOL)fp8;
- (BOOL)allowsAnimatedImages;
- (void)setAllowsAnimatedImages:(BOOL)fp8;
- (BOOL)allowsAnimatedImageLooping;
- (void)setAllowsAnimatedImageLooping:(BOOL)fp8;
- (void)setLoadsImagesAutomatically:(BOOL)fp8;
- (BOOL)loadsImagesAutomatically;
- (void)setAutosaves:(BOOL)fp8;
- (BOOL)autosaves;
- (void)setTabsToLinks:(BOOL)fp8;
- (BOOL)tabsToLinks;
- (void)setPrivateBrowsingEnabled:(BOOL)fp8;
- (BOOL)privateBrowsingEnabled;
- (void)setUsesPageCache:(BOOL)fp8;
- (BOOL)usesPageCache;
- (void)setCacheModel:(unsigned int)fp8;
- (unsigned int)cacheModel;

@end

@interface WebPreferencesPrivate : NSObject
{
    NSMutableDictionary *values;
    NSString *identifier;
    NSString *IBCreatorID;
    BOOL autosaves;
    BOOL automaticallyDetectsCacheModel;
    unsigned int numWebViews;
}

- (void)dealloc;

@end

@interface WebPreferences (OmniChanges)
- (void)setUserStyleSheet:(id)fp8;
- (id)userStyleSheet;
- (int)animatedImageLoopCount;
- (void)setanimatedImageLoopCount:(int)fp8;
- (void)setShouldMouseFocusOnLinks:(BOOL)fp8;
- (BOOL)shouldMouseFocusOnLinks;
- (void)setMaximumFontSize:(float)fp8;
- (float)maximumFontSize;
- (void)setJavaScriptDebugEnabled:(BOOL)fp8;
- (BOOL)javaScriptDebugEnabled;
- (void)setJavaScriptPopUpPolicy:(unsigned int)fp8;
- (unsigned int)javaScriptPopUpPolicy;
- (void)setShouldOpenUnrequestedPopUps:(BOOL)fp8;
- (BOOL)shouldOpenUnrequestedPopUps;
@end

@interface WebPreferences (WebInternal)
+ (id)_IBCreatorID;
+ (id)_concatenateKeyWithIBCreatorID:(id)fp8;
@end

@interface WebPreferences (WebPrivate)
+ (id)_getInstanceForIdentifier:(id)fp8;
+ (void)_setInstance:(id)fp8 forIdentifier:(id)fp12;
+ (void)_checkLastReferenceForIdentifier:(id)fp8;
+ (void)_removeReferenceForIdentifier:(id)fp8;
+ (unsigned long)_systemCFStringEncoding;
+ (void)_setInitialDefaultTextEncodingToSystemEncoding;
+ (void)_setIBCreatorID:(id)fp8;
- (BOOL)developerExtrasEnabled;
- (void)setDeveloperExtrasEnabled:(BOOL)fp8;
- (BOOL)authorAndUserStylesEnabled;
- (void)setAuthorAndUserStylesEnabled:(BOOL)fp8;
- (BOOL)respectStandardStyleKeyEquivalents;
- (void)setRespectStandardStyleKeyEquivalents:(BOOL)fp8;
- (BOOL)showsURLsInToolTips;
- (void)setShowsURLsInToolTips:(BOOL)fp8;
- (BOOL)textAreasAreResizable;
- (void)setTextAreasAreResizable:(BOOL)fp8;
- (BOOL)shrinksStandaloneImagesToFit;
- (void)setShrinksStandaloneImagesToFit:(BOOL)fp8;
- (BOOL)automaticallyDetectsCacheModel;
- (void)setAutomaticallyDetectsCacheModel:(BOOL)fp8;
- (double)_backForwardCacheExpirationInterval;
- (float)PDFScaleFactor;
- (void)setPDFScaleFactor:(float)fp8;
- (int)PDFDisplayMode;
- (void)setPDFDisplayMode:(int)fp8;
- (int)editableLinkBehavior;
- (void)setEditableLinkBehavior:(int)fp8;
- (BOOL)_useSiteSpecificSpoofing;
- (void)_setUseSiteSpecificSpoofing:(BOOL)fp8;
- (void)_postPreferencesChangesNotification;
- (BOOL)isDOMPasteAllowed;
- (void)setDOMPasteAllowed:(BOOL)fp8;
- (void)_setFTPDirectoryTemplatePath:(id)fp8;
- (id)_ftpDirectoryTemplatePath;
- (void)_setForceFTPDirectoryListings:(BOOL)fp8;
- (BOOL)_forceFTPDirectoryListings;
- (void)didRemoveFromWebView;
- (void)willAddToWebView;
@end

@interface WebKitRenderTreeCopier : NSObject <WebCoreRenderTreeCopier>
{
}

- (id)nodeWithName:(id)fp8 position:(struct _NSPoint)fp12 rect:(struct _NSRect)fp20 view:(id)fp36 children:(id)fp40;

@end

@interface WebRenderNode : NSObject
{
    NSArray *children;
    NSString *name;
    struct _NSRect rect;
    struct _NSPoint absolutePosition;
}

- (id)initWithName:(id)fp8 position:(struct _NSPoint)fp12 rect:(struct _NSRect)fp20 view:(id)fp36 children:(id)fp40;
- (id)initWithWebFrameView:(id)fp8;
- (void)dealloc;
- (id)children;
- (id)name;
- (id)absolutePositionString;
- (id)positionString;
- (id)widthString;
- (id)heightString;

@end

@interface WebResource : NSObject <NSCoding, NSCopying>
{
    WebResourcePrivate *_private;
}

- (id)init;
- (id)initWithData:(id)fp8 URL:(id)fp12 MIMEType:(id)fp16 textEncodingName:(id)fp20 frameName:(id)fp24;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)data;
- (id)URL;
- (id)MIMEType;
- (id)textEncodingName;
- (id)frameName;
- (id)description;

@end

@interface WebResourcePrivate : NSObject
{
    NSData *data;
    NSURL *URL;
    NSString *frameName;
    NSString *MIMEType;
    NSString *textEncodingName;
    NSURLResponse *response;
    BOOL shouldIgnoreWhenUnarchiving;
}

- (void)dealloc;

@end

@interface WebResource (WebResourcePrivate)
+ (id)_resourcesFromPropertyLists:(id)fp8;
+ (id)_propertyListsFromResources:(id)fp8;
- (void)_ignoreWhenUnarchiving;
- (BOOL)_shouldIgnoreWhenUnarchiving;
- (id)_initWithData:(id)fp8 URL:(id)fp12 MIMEType:(id)fp16 textEncodingName:(id)fp20 frameName:(id)fp24 response:(id)fp28 copyData:(BOOL)fp32;
- (id)_initWithData:(id)fp8 URL:(id)fp12 response:(id)fp16;
- (id)_initWithPropertyList:(id)fp8;
- (id)_fileWrapperRepresentation;
- (id)_propertyListRepresentation;
- (id)_response;
- (id)_stringValue;
@end

@interface WebScriptCallFrame : NSObject
{
    WebCoreScriptCallFrame *_private;
    id _userInfo;
}

- (void)dealloc;
- (void)setUserInfo:(id)fp8;
- (id)userInfo;
- (id)caller;
- (id)scopeChain;
- (id)functionName;
- (id)exception;
- (id)evaluateWebScript:(id)fp8;

@end

@interface WebScriptDebugger : NSObject <WebScriptDebugger>
{
    WebFrame *_webFrame;
    WebCoreScriptDebugger *_debugger;
}

- (id)initWithWebFrame:(id)fp8;
- (void)dealloc;
- (id)globalObject;
- (id)newWrapperForFrame:(id)fp8;
- (void)parsedSource:(id)fp8 fromURL:(id)fp12 sourceId:(int)fp16 startLine:(int)fp20 errorLine:(int)fp24 errorMessage:(id)fp28;
- (void)enteredFrame:(id)fp8 sourceId:(int)fp12 line:(int)fp16;
- (void)hitStatement:(id)fp8 sourceId:(int)fp12 line:(int)fp16;
- (void)leavingFrame:(id)fp8 sourceId:(int)fp12 line:(int)fp16;
- (void)exceptionRaised:(id)fp8 sourceId:(int)fp12 line:(int)fp16;

@end

@interface WebScriptCallFrame (WebScriptDebugDelegateInternal)
- (id)_initWithFrame:(id)fp8;
@end

@interface WebScriptDebugServer : NSObject <WebScriptDebugServer>
{
    NSConnection *serverConnection;
    NSString *serverName;
    NSMutableSet *listeners;
    BOOL inCallback;
    BOOL paused;
    BOOL step;
}

+ (id)sharedScriptDebugServer;
+ (unsigned int)listenerCount;
- (id)init;
- (void)dealloc;
- (void)applicationTerminating:(id)fp8;
- (void)attachScriptDebuggerToAllWebViews;
- (void)detachScriptDebuggerFromAllWebViews;
- (void)serverQuery:(id)fp8;
- (void)listenerConnectionDidDie:(id)fp8;
- (oneway void)addListener:(id)fp8;
- (oneway void)removeListener:(id)fp8;
- (oneway void)step;
- (oneway void)pause;
- (oneway void)resume;
- (oneway char)isPaused;
- (void)suspendProcessIfPaused;
- (void)webView:(id)fp8 didLoadMainResourceForDataSource:(id)fp12;
- (void)webView:(id)fp8 didParseSource:(id)fp12 baseLineNumber:(unsigned int)fp16 fromURL:(id)fp20 sourceId:(int)fp24 forWebFrame:(id)fp28;
- (void)webView:(id)fp8 failedToParseSource:(id)fp12 baseLineNumber:(unsigned int)fp16 fromURL:(id)fp20 withError:(id)fp24 forWebFrame:(id)fp28;
- (void)webView:(id)fp8 didEnterCallFrame:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 willExecuteStatement:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 willLeaveCallFrame:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;
- (void)webView:(id)fp8 exceptionWasRaised:(id)fp12 sourceId:(int)fp16 line:(int)fp20 forWebFrame:(id)fp24;

@end

@interface WebSearchableTextView : NSTextView <WebDocumentSearching, WebDocumentSelection>
{
}

- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20;
- (void)copy:(id)fp8;
- (struct _NSRect)selectionRect;
- (id)selectionImageForcingBlackText:(BOOL)fp8;
- (id)selectionImageForcingWhiteText:(BOOL)fp8;
- (struct _NSRect)selectionImageRect;
- (id)selectionTextRects;
- (id)selectionView;
- (id)pasteboardTypesForSelection;
- (void)writeSelectionWithPasteboardTypes:(id)fp8 toPasteboard:(id)fp12;
- (BOOL)supportsTextEncoding;
- (id)string;
- (id)attributedString;
- (id)selectedString;
- (id)selectedAttributedString;
- (void)selectAll;
- (void)deselectAll;

@end

@interface NSString (_Web_StringTextFinding)
- (struct _NSRange)findString:(id)fp8 selectedRange:(struct _NSRange)fp12 options:(unsigned int)fp20 wrap:(BOOL)fp24;
@end

@interface WebSecurityOrigin : NSObject
{
    WebSecurityOriginPrivate *_private;
}

- (id)initWithProtocol:(id)fp8 domain:(id)fp12;
- (id)initWithProtocol:(id)fp8 domain:(id)fp12 port:(unsigned short)fp16;
- (id)protocol;
- (id)domain;
- (unsigned short)port;
- (unsigned long long)usage;
- (unsigned long long)quota;
- (void)setQuota:(unsigned long long)fp8;
- (BOOL)isEqual:(id)fp8;
- (void)dealloc;
- (void)finalize;

@end

@interface WebSecurityOrigin (WebInternal)
- (id)_initWithWebCoreSecurityOrigin:(struct SecurityOrigin *)fp8;
- (struct SecurityOrigin *)_core;
@end

@interface WebStringTruncator : NSObject
{
}

+ (void)initialize;
+ (id)centerTruncateString:(id)fp8 toWidth:(float)fp12;
+ (id)centerTruncateString:(id)fp8 toWidth:(float)fp12 withFont:(id)fp16;
+ (id)rightTruncateString:(id)fp8 toWidth:(float)fp12 withFont:(id)fp16;
+ (float)widthOfString:(id)fp8 font:(id)fp12;

@end

@interface WebURLsWithTitles : NSObject
{
}

+ (id)arrayWithIFURLsWithTitlesPboardType;
+ (void)writeURLs:(id)fp8 andTitles:(id)fp12 toPasteboard:(id)fp16;
+ (id)titlesFromPasteboard:(id)fp8;
+ (id)URLsFromPasteboard:(id)fp8;

@end

@interface WebUnarchivingState : NSObject
{
    NSMutableDictionary *archivedSubframes;
    NSMutableDictionary *archivedResources;
}

- (id)init;
- (void)dealloc;
- (void)addArchive:(id)fp8;
- (void)addResource:(id)fp8;
- (id)archivedResourceForURL:(id)fp8;
- (id)popSubframeArchiveWithFrameName:(id)fp8;

@end

@interface WebView : NSView
{
    WebViewPrivate *_private;
}

+ (void)initialize;
+ (void)_applicationWillTerminate;
+ (BOOL)canShowMIMEType:(id)fp8;
+ (BOOL)canShowMIMETypeAsHTML:(id)fp8;
+ (id)MIMETypesShownAsHTML;
+ (void)setMIMETypesShownAsHTML:(id)fp8;
+ (id)URLFromPasteboard:(id)fp8;
+ (id)URLTitleFromPasteboard:(id)fp8;
+ (void)registerURLSchemeAsLocal:(id)fp8;
+ (void)registerViewClass:(Class)fp8 representationClass:(Class)fp12 forMIMEType:(id)fp16;
- (id)_pluginForMIMEType:(id)fp8;
- (id)_pluginForExtension:(id)fp8;
- (BOOL)_isMIMETypeRegisteredAsPlugin:(id)fp8;
- (void)_registerDraggedTypes;
- (void)_commonInitializationWithFrameName:(id)fp8 groupName:(id)fp12;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithFrame:(struct _NSRect)fp8 frameName:(id)fp24 groupName:(id)fp28;
- (id)initWithCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)dealloc;
- (void)finalize;
- (void)close;
- (void)setShouldCloseWithWindow:(BOOL)fp8;
- (BOOL)shouldCloseWithWindow;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)_windowWillClose:(id)fp8;
- (void)setPreferences:(id)fp8;
- (id)preferences;
- (void)setPreferencesIdentifier:(id)fp8;
- (id)preferencesIdentifier;
- (void)setUIDelegate:(id)fp8;
- (id)UIDelegate;
- (void)setResourceLoadDelegate:(id)fp8;
- (id)resourceLoadDelegate;
- (void)setDownloadDelegate:(id)fp8;
- (id)downloadDelegate;
- (void)setPolicyDelegate:(id)fp8;
- (id)policyDelegate;
- (void)setFrameLoadDelegate:(id)fp8;
- (id)frameLoadDelegate;
- (id)mainFrame;
- (id)selectedFrame;
- (id)backForwardList;
- (void)setMaintainsBackForwardList:(BOOL)fp8;
- (BOOL)goBack;
- (BOOL)goForward;
- (BOOL)goToBackForwardItem:(id)fp8;
- (void)setTextSizeMultiplier:(float)fp8;
- (float)textSizeMultiplier;
- (void)setApplicationNameForUserAgent:(id)fp8;
- (id)applicationNameForUserAgent;
- (void)setCustomUserAgent:(id)fp8;
- (id)customUserAgent;
- (void)setMediaStyle:(id)fp8;
- (id)mediaStyle;
- (BOOL)supportsTextEncoding;
- (void)setCustomTextEncodingName:(id)fp8;
- (id)_mainFrameOverrideEncoding;
- (id)customTextEncodingName;
- (id)stringByEvaluatingJavaScriptFromString:(id)fp8;
- (id)windowScriptObject;
- (id)userAgentForURL:(id)fp8;
- (void)setHostWindow:(id)fp8;
- (id)hostWindow;
- (id)documentViewAtWindowPoint:(struct _NSPoint)fp8;
- (id)_elementAtWindowPoint:(struct _NSPoint)fp8;
- (id)elementAtPoint:(struct _NSPoint)fp8;
- (void)_autoscrollForDraggingInfo:(id)fp8 timeDelta:(double)fp12;
- (BOOL)_shouldAutoscrollForDraggingInfo:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (id)_hitTest:(struct _NSPoint *)fp8 dragTypes:(id)fp12;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (id)_webcore_effectiveFirstResponder;
- (void)setNextKeyView:(id)fp8;
- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20;
- (void)setGroupName:(id)fp8;
- (id)groupName;
- (double)estimatedProgress;
- (id)pasteboardTypesForSelection;
- (void)writeSelectionWithPasteboardTypes:(id)fp8 toPasteboard:(id)fp12;
- (id)pasteboardTypesForElement:(id)fp8;
- (void)writeElement:(id)fp8 withPasteboardTypes:(id)fp12 toPasteboard:(id)fp16;
- (void)moveDragCaretToPoint:(struct _NSPoint)fp8;
- (void)removeDragCaret;
- (void)setMainFrameURL:(id)fp8;
- (id)mainFrameURL;
- (BOOL)isLoading;
- (id)mainFrameTitle;
- (id)mainFrameIcon;
- (id)mainFrameDocument;
- (void)setDrawsBackground:(BOOL)fp8;
- (BOOL)drawsBackground;

@end

@interface _WebSafeForwarder : NSObject
{
    id target;
    id defaultTarget;
    BOOL catchExceptions;
}

- (id)initWithTarget:(id)fp8 defaultTarget:(id)fp12 catchExceptions:(BOOL)fp16;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;

@end

@interface WebViewPrivate : NSObject
{
    struct Page *page;
    id UIDelegate;
    id UIDelegateForwarder;
    id resourceProgressDelegate;
    id downloadDelegate;
    id policyDelegate;
    id policyDelegateForwarder;
    id frameLoadDelegate;
    id frameLoadDelegateForwarder;
    id formDelegate;
    id editingDelegate;
    id editingDelegateForwarder;
    id scriptDebugDelegate;
    id scriptDebugDelegateForwarder;
    WebInspector *inspector;
    BOOL allowsUndo;
    float textSizeMultiplier;
    NSString *applicationNameForUserAgent;
    struct String *userAgent;
    BOOL userAgentOverridden;
    WebPreferences *preferences;
    BOOL useSiteSpecificSpoofing;
    NSWindow *hostWindow;
    int programmaticFocusCount;
    struct _WebResourceDelegateImplementationCache resourceLoadDelegateImplementations;
    struct _WebFrameLoadDelegateImplementationCache frameLoadDelegateImplementations;
    void *observationInfo;
    BOOL closed;
    BOOL shouldCloseWithWindow;
    BOOL mainFrameDocumentReady;
    BOOL drawsBackground;
    BOOL editable;
    BOOL tabKeyCyclesThroughElementsChanged;
    BOOL becomingFirstResponder;
    BOOL becomingFirstResponderFromOutside;
    BOOL hoverFeedbackSuspended;
    BOOL usesPageCache;
    BOOL catchesDelegateExceptions;
    NSColor *backgroundColor;
    NSString *mediaStyle;
    BOOL hasSpellCheckerDocumentTag;
    int spellCheckerDocumentTag;
    BOOL smartInsertDeleteEnabled;
    BOOL dashboardBehaviorAlwaysSendMouseEventsToAllWindows;
    BOOL dashboardBehaviorAlwaysSendActiveNullEventsToPlugIns;
    BOOL dashboardBehaviorAlwaysAcceptsFirstMouse;
    BOOL dashboardBehaviorAllowWheelScrolling;
    WebPluginDatabase *pluginDatabase;
    struct HashMap<long unsigned int, WTF::RetainPtr<objc_object*>, WTF::IntHash<uintptr_t>, WTF::HashTraits<long unsigned int>, WTF::HashTraits<WTF::RetainPtr<objc_object*>>> *identifierMap;
}

- (id)init;
- (void)dealloc;
- (void)finalize;

@end

@interface WebProgressItem : NSObject
{
    long long bytesReceived;
    long long estimatedLength;
}

@end

@interface WebView (WebCallDelegateFunctions)
@end

@interface WebView (WebViewInternal)
- (BOOL)_becomingFirstResponderFromOutside;
- (void)_receivedIconChangedNotification:(id)fp8;
- (void)_registerForIconNotification:(BOOL)fp8;
- (void)_dispatchDidReceiveIconFromWebFrame:(id)fp8;
- (id)_userVisibleBundleVersionFromFullVersion:(id)fp8;
- (id)_userAgentWithApplicationName:(id)fp8 andWebKitVersion:(id)fp12;
- (struct String)_userAgentForURL: /* Error: Ran out of types for this method. */;
- (void)_addObject:(id)fp8 forIdentifier:(unsigned long)fp12;
- (id)_objectForIdentifier:(unsigned long)fp8;
- (void)_removeObjectForIdentifier:(unsigned long)fp8;
@end

@interface WebView (WebFileInternal)
+ (void)_setCacheModel:(unsigned int)fp8;
+ (unsigned int)_cacheModel;
+ (unsigned int)_didSetCacheModel;
+ (unsigned int)_maxCacheModelInAnyInstance;
+ (void)_preferencesChangedNotification:(id)fp8;
+ (void)_preferencesRemovedNotification:(id)fp8;
+ (void)_preflightSpellCheckerNow:(id)fp8;
+ (void)_preflightSpellChecker;
- (id)_focusedFrame;
- (id)_selectedOrMainFrame;
- (id)_bridgeForSelectedOrMainFrame;
- (BOOL)_isLoading;
- (id)_frameViewAtWindowPoint:(struct _NSPoint)fp8;
- (BOOL)_continuousCheckingAllowed;
- (id)_responderForResponderOperations;
- (void)_openFrameInNewWindowFromMenu:(id)fp8;
- (void)_searchWithGoogleFromMenu:(id)fp8;
- (void)_searchWithSpotlightFromMenu:(id)fp8;
- (BOOL)_performTextSizingSelector:(SEL)fp8 withObject:(id)fp12 onTrackingDocs:(BOOL)fp16 selForNonTrackingDocs:(SEL)fp20 newScaleFactor:(float)fp24;
- (void)_notifyTextSizeMultiplierChanged;
@end

@interface WebView (WebViewEditingInMail)
- (void)_insertNewlineInQuotedContent;
- (void)_replaceSelectionWithNode:(id)fp8 matchStyle:(BOOL)fp12;
@end

@interface WebView (WebViewEditingActions)
- (void)_performResponderOperation:(SEL)fp8 with:(id)fp12;
- (void)alignCenter:(id)fp8;
- (void)alignJustified:(id)fp8;
- (void)alignLeft:(id)fp8;
- (void)alignRight:(id)fp8;
- (void)capitalizeWord:(id)fp8;
- (void)centerSelectionInVisibleArea:(id)fp8;
- (void)changeAttributes:(id)fp8;
- (void)changeBaseWritingDirection:(id)fp8;
- (void)changeBaseWritingDirectionToLTR:(id)fp8;
- (void)changeBaseWritingDirectionToRTL:(id)fp8;
- (void)changeColor:(id)fp8;
- (void)changeDocumentBackgroundColor:(id)fp8;
- (void)changeFont:(id)fp8;
- (void)changeSpelling:(id)fp8;
- (void)checkSpelling:(id)fp8;
- (void)complete:(id)fp8;
- (void)copy:(id)fp8;
- (void)copyFont:(id)fp8;
- (void)cut:(id)fp8;
- (void)delete:(id)fp8;
- (void)deleteBackward:(id)fp8;
- (void)deleteBackwardByDecomposingPreviousCharacter:(id)fp8;
- (void)deleteForward:(id)fp8;
- (void)deleteToBeginningOfLine:(id)fp8;
- (void)deleteToBeginningOfParagraph:(id)fp8;
- (void)deleteToEndOfLine:(id)fp8;
- (void)deleteToEndOfParagraph:(id)fp8;
- (void)deleteToMark:(id)fp8;
- (void)deleteWordBackward:(id)fp8;
- (void)deleteWordForward:(id)fp8;
- (void)ignoreSpelling:(id)fp8;
- (void)indent:(id)fp8;
- (void)insertBacktab:(id)fp8;
- (void)insertLineBreak:(id)fp8;
- (void)insertNewline:(id)fp8;
- (void)insertNewlineIgnoringFieldEditor:(id)fp8;
- (void)insertParagraphSeparator:(id)fp8;
- (void)insertTab:(id)fp8;
- (void)insertTabIgnoringFieldEditor:(id)fp8;
- (void)lowercaseWord:(id)fp8;
- (void)moveBackward:(id)fp8;
- (void)moveBackwardAndModifySelection:(id)fp8;
- (void)moveDown:(id)fp8;
- (void)moveDownAndModifySelection:(id)fp8;
- (void)moveForward:(id)fp8;
- (void)moveForwardAndModifySelection:(id)fp8;
- (void)moveLeft:(id)fp8;
- (void)moveLeftAndModifySelection:(id)fp8;
- (void)moveParagraphBackwardAndModifySelection:(id)fp8;
- (void)moveParagraphForwardAndModifySelection:(id)fp8;
- (void)moveRight:(id)fp8;
- (void)moveRightAndModifySelection:(id)fp8;
- (void)moveToBeginningOfDocument:(id)fp8;
- (void)moveToBeginningOfDocumentAndModifySelection:(id)fp8;
- (void)moveToBeginningOfLine:(id)fp8;
- (void)moveToBeginningOfLineAndModifySelection:(id)fp8;
- (void)moveToBeginningOfParagraph:(id)fp8;
- (void)moveToBeginningOfParagraphAndModifySelection:(id)fp8;
- (void)moveToBeginningOfSentence:(id)fp8;
- (void)moveToBeginningOfSentenceAndModifySelection:(id)fp8;
- (void)moveToEndOfDocument:(id)fp8;
- (void)moveToEndOfDocumentAndModifySelection:(id)fp8;
- (void)moveToEndOfLine:(id)fp8;
- (void)moveToEndOfLineAndModifySelection:(id)fp8;
- (void)moveToEndOfParagraph:(id)fp8;
- (void)moveToEndOfParagraphAndModifySelection:(id)fp8;
- (void)moveToEndOfSentence:(id)fp8;
- (void)moveToEndOfSentenceAndModifySelection:(id)fp8;
- (void)moveUp:(id)fp8;
- (void)moveUpAndModifySelection:(id)fp8;
- (void)moveWordBackward:(id)fp8;
- (void)moveWordBackwardAndModifySelection:(id)fp8;
- (void)moveWordForward:(id)fp8;
- (void)moveWordForwardAndModifySelection:(id)fp8;
- (void)moveWordLeft:(id)fp8;
- (void)moveWordLeftAndModifySelection:(id)fp8;
- (void)moveWordRight:(id)fp8;
- (void)moveWordRightAndModifySelection:(id)fp8;
- (void)outdent:(id)fp8;
- (void)pageDown:(id)fp8;
- (void)pageDownAndModifySelection:(id)fp8;
- (void)pageUp:(id)fp8;
- (void)pageUpAndModifySelection:(id)fp8;
- (void)paste:(id)fp8;
- (void)pasteAsPlainText:(id)fp8;
- (void)pasteAsRichText:(id)fp8;
- (void)pasteFont:(id)fp8;
- (void)performFindPanelAction:(id)fp8;
- (void)scrollLineDown:(id)fp8;
- (void)scrollLineUp:(id)fp8;
- (void)scrollPageDown:(id)fp8;
- (void)scrollPageUp:(id)fp8;
- (void)scrollToBeginningOfDocument:(id)fp8;
- (void)scrollToEndOfDocument:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)selectLine:(id)fp8;
- (void)selectParagraph:(id)fp8;
- (void)selectSentence:(id)fp8;
- (void)selectToMark:(id)fp8;
- (void)selectWord:(id)fp8;
- (void)setMark:(id)fp8;
- (void)showGuessPanel:(id)fp8;
- (void)startSpeaking:(id)fp8;
- (void)stopSpeaking:(id)fp8;
- (void)subscript:(id)fp8;
- (void)superscript:(id)fp8;
- (void)swapWithMark:(id)fp8;
- (void)takeFindStringFromSelection:(id)fp8;
- (void)toggleBaseWritingDirection:(id)fp8;
- (void)transpose:(id)fp8;
- (void)underline:(id)fp8;
- (void)unscript:(id)fp8;
- (void)uppercaseWord:(id)fp8;
- (void)yank:(id)fp8;
- (void)yankAndSelect:(id)fp8;
- (void)insertText:(id)fp8;
@end

@interface WebView (WebViewUndoableEditing)
- (void)replaceSelectionWithNode:(id)fp8;
- (void)replaceSelectionWithText:(id)fp8;
- (void)replaceSelectionWithMarkupString:(id)fp8;
- (void)replaceSelectionWithArchive:(id)fp8;
- (void)deleteSelection;
- (void)applyStyle:(id)fp8;
@end

@interface WebView (WebViewGrammarChecking)
- (BOOL)isGrammarCheckingEnabled;
@end

@interface WebView (WebViewEditing)
- (id)editableDOMRangeForPoint:(struct _NSPoint)fp8;
- (BOOL)_shouldChangeSelectedDOMRange:(id)fp8 toDOMRange:(id)fp12 affinity:(int)fp16 stillSelecting:(BOOL)fp20;
- (BOOL)maintainsInactiveSelection;
- (void)setSelectedDOMRange:(id)fp8 affinity:(int)fp12;
- (id)selectedDOMRange;
- (int)selectionAffinity;
- (void)ensureSelectionVisible;
- (void)setEditable:(BOOL)fp8;
- (BOOL)isEditable;
- (void)setTypingStyle:(id)fp8;
- (id)typingStyle;
- (void)setSmartInsertDeleteEnabled:(BOOL)fp8;
- (BOOL)smartInsertDeleteEnabled;
- (void)setContinuousSpellCheckingEnabled:(BOOL)fp8;
- (BOOL)isContinuousSpellCheckingEnabled;
- (int)spellCheckerDocumentTag;
- (id)undoManager;
- (void)registerForEditingDelegateNotification:(id)fp8 selector:(SEL)fp12;
- (void)setEditingDelegate:(id)fp8;
- (id)editingDelegate;
- (id)styleDeclarationWithText:(id)fp8;
@end

@interface WebView (WebViewCSS)
- (id)computedStyleForElement:(id)fp8 pseudoElement:(id)fp12;
@end

@interface WebView (WebDebugBinding)
- (void)addObserver:(id)fp8 forKeyPath:(id)fp12 options:(unsigned int)fp16 context:(void *)fp20;
- (void)removeObserver:(id)fp8 forKeyPath:(id)fp12;
@end

@interface WebView (WebViewPrintingPrivate)
- (float)_headerHeight;
- (float)_footerHeight;
- (void)_drawHeaderInRect:(struct _NSRect)fp8;
- (void)_drawFooterInRect:(struct _NSRect)fp8;
- (void)_adjustPrintingMarginsForHeaderAndFooter;
- (void)_drawHeaderAndFooter;
@end

@interface WebView (WebPendingPublic)
- (BOOL)searchFor:(id)fp8 direction:(BOOL)fp12 caseSensitive:(BOOL)fp16 wrap:(BOOL)fp20 startInSelection:(BOOL)fp24;
- (void)setHoverFeedbackSuspended:(BOOL)fp8;
- (BOOL)isHoverFeedbackSuspended;
- (void)setMainFrameDocumentReady:(BOOL)fp8;
- (id)_frameForCurrentSelection;
- (void)setTabKeyCyclesThroughElements:(BOOL)fp8;
- (BOOL)tabKeyCyclesThroughElements;
- (void)setScriptDebugDelegate:(id)fp8;
- (id)scriptDebugDelegate;
- (BOOL)shouldClose;
- (id)aeDescByEvaluatingJavaScriptFromString:(id)fp8;
- (BOOL)canMarkAllTextMatches;
- (unsigned int)markAllMatchesForText:(id)fp8 caseSensitive:(BOOL)fp12 highlight:(BOOL)fp16 limit:(unsigned int)fp20;
- (void)unmarkAllTextMatches;
- (id)rectsForTextMatches;
- (void)scrollDOMRangeToVisible:(id)fp8;
- (BOOL)allowsUndo;
- (void)setAllowsUndo:(BOOL)fp8;
@end

@interface WebView (WebIBActions) <NSUserInterfaceValidations>
- (void)takeStringURLFrom:(id)fp8;
- (BOOL)canGoBack;
- (BOOL)canGoForward;
- (void)goBack:(id)fp8;
- (void)goForward:(id)fp8;
- (void)stopLoading:(id)fp8;
- (void)reload:(id)fp8;
- (BOOL)canMakeTextSmaller;
- (BOOL)canMakeTextLarger;
- (void)makeTextSmaller:(id)fp8;
- (void)makeTextLarger:(id)fp8;
- (void)toggleSmartInsertDelete:(id)fp8;
- (void)toggleContinuousSpellChecking:(id)fp8;
- (BOOL)_responderValidateUserInterfaceItem:(id)fp8;
- (BOOL)canMakeTextStandardSize;
- (void)makeTextStandardSize:(id)fp8;
- (BOOL)validateUserInterfaceItemWithoutDelegate:(id)fp8;
- (BOOL)validateUserInterfaceItem:(id)fp8;
@end

@interface WebView (WebPrivate)
+ (BOOL)_scriptDebuggerEnabled;
+ (id)_supportedMIMETypes;
+ (id)_supportedFileExtensions;
+ (BOOL)_viewClass:(Class *)fp8 andRepresentationClass:(Class *)fp12 forMIMEType:(id)fp16;
+ (void)_setAlwaysUseATSU:(BOOL)fp8;
+ (BOOL)canShowFile:(id)fp8;
+ (id)suggestedFileExtensionForMIMEType:(id)fp8;
+ (id)_MIMETypeForFile:(id)fp8;
+ (void)_unregisterViewClassAndRepresentationClassForMIMEType:(id)fp8;
+ (void)_registerViewClass:(Class)fp8 representationClass:(Class)fp12 forURLScheme:(id)fp16;
+ (id)_generatedMIMETypeForURLScheme:(id)fp8;
+ (BOOL)_representationExistsForURLScheme:(id)fp8;
+ (BOOL)_canHandleRequest:(id)fp8;
+ (id)_decodeData:(id)fp8;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)fp8;
+ (void)_setShouldUseFontSmoothing:(BOOL)fp8;
+ (BOOL)_shouldUseFontSmoothing;
+ (void)_setUsesTestModeFocusRingColor:(BOOL)fp8;
+ (BOOL)_usesTestModeFocusRingColor;
+ (id)_minimumRequiredSafariBuildNumber;
- (BOOL)_viewClass:(Class *)fp8 andRepresentationClass:(Class *)fp12 forMIMEType:(id)fp16;
- (BOOL)_isClosed;
- (void)_close;
- (id)_downloadURL:(id)fp8;
- (id)_openNewWindowWithRequest:(id)fp8;
- (id)inspector;
- (struct Page *)page;
- (id)_menuForElement:(id)fp8 defaultItems:(id)fp12;
- (void)_mouseDidMoveOverElement:(id)fp8 modifierFlags:(unsigned int)fp12;
- (void)_loadBackForwardListFromOtherView:(id)fp8;
- (void)_setFormDelegate:(id)fp8;
- (id)_formDelegate;
- (BOOL)_needsAdobeFrameReloadingQuirk;
- (BOOL)_needsKeyboardEventDisambiguationQuirks;
- (void)_preferencesChangedNotification:(id)fp8;
- (void)_cacheResourceLoadDelegateImplementations;
- (void)_cacheFrameLoadDelegateImplementations;
- (id)_policyDelegateForwarder;
- (id)_UIDelegateForwarder;
- (id)_editingDelegateForwarder;
- (id)_scriptDebugDelegateForwarder;
- (void)_closeWindow;
- (void)_pushPerformingProgrammaticFocus;
- (void)_popPerformingProgrammaticFocus;
- (BOOL)_isPerformingProgrammaticFocus;
- (void)_didChangeValueForKey:(id)fp8;
- (void)_willChangeValueForKey:(id)fp8;
- (id)_declaredKeys;
- (void)setObservationInfo:(void *)fp8;
- (void *)observationInfo;
- (void)_willChangeBackForwardKeys;
- (void)_didChangeBackForwardKeys;
- (void)_didStartProvisionalLoadForFrame:(id)fp8;
- (void)_didCommitLoadForFrame:(id)fp8;
- (void)_didFinishLoadForFrame:(id)fp8;
- (void)_didFailLoadWithError:(id)fp8 forFrame:(id)fp12;
- (void)_didFailProvisionalLoadWithError:(id)fp8 forFrame:(id)fp12;
- (void)_reloadForPluginChanges;
- (id)_cachedResponseForURL:(id)fp8;
- (void)_writeImageForElement:(id)fp8 withPasteboardTypes:(id)fp12 toPasteboard:(id)fp16;
- (void)_writeLinkElement:(id)fp8 withPasteboardTypes:(id)fp12 toPasteboard:(id)fp16;
- (void)_setInitiatedDrag:(BOOL)fp8;
- (void)_addScrollerDashboardRegions:(id)fp8 from:(id)fp12;
- (void)_addScrollerDashboardRegions:(id)fp8;
- (id)_dashboardRegions;
- (void)_setDashboardBehavior:(int)fp8 to:(BOOL)fp12;
- (BOOL)_dashboardBehavior:(int)fp8;
- (void)setAlwaysShowVerticalScroller:(BOOL)fp8;
- (BOOL)alwaysShowVerticalScroller;
- (void)setAlwaysShowHorizontalScroller:(BOOL)fp8;
- (void)setProhibitsMainFrameScrolling:(BOOL)fp8;
- (BOOL)alwaysShowHorizontalScroller;
- (void)_setInViewSourceMode:(BOOL)fp8;
- (BOOL)_inViewSourceMode;
- (void)_setUseFastImageScalingMode:(BOOL)fp8;
- (BOOL)_inFastImageScalingMode;
- (void)_setAdditionalWebPlugInPaths:(id)fp8;
- (void)_attachScriptDebuggerToAllFrames;
- (void)_detachScriptDebuggerFromAllFrames;
- (void)setBackgroundColor:(id)fp8;
- (id)backgroundColor;
- (BOOL)defersCallbacks;
- (void)setDefersCallbacks:(BOOL)fp8;
- (BOOL)usesPageCache;
- (void)setUsesPageCache:(BOOL)fp8;
- (void)handleAuthenticationForResource:(id)fp8 challenge:(id)fp12 fromDataSource:(id)fp16;
- (void)_clearUndoRedoOperations;
- (void)_setCatchesDelegateExceptions:(BOOL)fp8;
- (BOOL)_catchesDelegateExceptions;
- (void)_executeCoreCommandByName:(id)fp8 value:(id)fp12;
@end

@interface WebView (AllWebViews)
+ (void)_makeAllWebViewsPerformSelector:(SEL)fp8;
- (void)_removeFromAllWebViewsSet;
- (void)_addToAllWebViewsSet;
@end

@interface WebViewFactory : WebCoreViewFactory <WebCoreViewFactory>
{
}

+ (void)createSharedFactory;
- (id)pluginsInfo;
- (id)pluginNameForMIMEType:(id)fp8;
- (void)refreshPlugins:(BOOL)fp8;
- (BOOL)pluginSupportsMIMEType:(id)fp8;
- (id)bridgeForView:(id)fp8;
- (id)inputElementAltText;
- (id)resetButtonDefaultLabel;
- (id)searchableIndexIntroduction;
- (id)submitButtonDefaultLabel;
- (id)fileButtonChooseFileLabel;
- (id)fileButtonNoFileSelectedLabel;
- (id)copyImageUnknownFileLabel;
- (id)searchMenuNoRecentSearchesText;
- (id)searchMenuRecentSearchesText;
- (id)searchMenuClearRecentSearchesText;
- (id)defaultLanguageCode;
- (id)contextMenuItemTagOpenLinkInNewWindow;
- (id)contextMenuItemTagDownloadLinkToDisk;
- (id)contextMenuItemTagCopyLinkToClipboard;
- (id)contextMenuItemTagOpenImageInNewWindow;
- (id)contextMenuItemTagDownloadImageToDisk;
- (id)contextMenuItemTagCopyImageToClipboard;
- (id)contextMenuItemTagOpenFrameInNewWindow;
- (id)contextMenuItemTagCopy;
- (id)contextMenuItemTagGoBack;
- (id)contextMenuItemTagGoForward;
- (id)contextMenuItemTagStop;
- (id)contextMenuItemTagReload;
- (id)contextMenuItemTagCut;
- (id)contextMenuItemTagPaste;
- (id)contextMenuItemTagNoGuessesFound;
- (id)contextMenuItemTagIgnoreSpelling;
- (id)contextMenuItemTagLearnSpelling;
- (id)contextMenuItemTagSearchInSpotlight;
- (id)contextMenuItemTagSearchWeb;
- (id)contextMenuItemTagLookUpInDictionary;
- (id)contextMenuItemTagOpenLink;
- (id)contextMenuItemTagIgnoreGrammar;
- (id)contextMenuItemTagSpellingMenu;
- (id)contextMenuItemTagShowSpellingPanel:(_Bool)fp8;
- (id)contextMenuItemTagCheckSpelling;
- (id)contextMenuItemTagCheckSpellingWhileTyping;
- (id)contextMenuItemTagCheckGrammarWithSpelling;
- (id)contextMenuItemTagFontMenu;
- (id)contextMenuItemTagShowFonts;
- (id)contextMenuItemTagBold;
- (id)contextMenuItemTagItalic;
- (id)contextMenuItemTagUnderline;
- (id)contextMenuItemTagOutline;
- (id)contextMenuItemTagStyles;
- (id)contextMenuItemTagShowColors;
- (id)contextMenuItemTagSpeechMenu;
- (id)contextMenuItemTagStartSpeaking;
- (id)contextMenuItemTagStopSpeaking;
- (id)contextMenuItemTagWritingDirectionMenu;
- (id)contextMenuItemTagDefaultDirection;
- (id)contextMenuItemTagLeftToRight;
- (id)contextMenuItemTagRightToLeft;
- (id)contextMenuItemTagInspectElement;
- (BOOL)objectIsTextMarker:(id)fp8;
- (BOOL)objectIsTextMarkerRange:(id)fp8;
- (id)textMarkerWithBytes:(const void *)fp8 length:(unsigned long)fp12;
- (BOOL)getBytes:(void *)fp8 fromTextMarker:(id)fp12 length:(unsigned long)fp16;
- (id)textMarkerRangeWithStart:(id)fp8 end:(id)fp12;
- (id)startOfTextMarkerRange:(id)fp8;
- (id)endOfTextMarkerRange:(id)fp8;
- (void)accessibilityHandleFocusChanged;
- (struct __AXUIElement *)AXUIElementForElement:(id)fp8;
- (void)unregisterUniqueIdForUIElement:(id)fp8;
- (id)AXWebAreaText;
- (id)AXLinkText;
- (id)AXListMarkerText;
- (id)AXImageMapText;
- (id)AXHeadingText;
- (void)drawUnloadedImage:(id)fp8 inRect:(struct _NSRect)fp12;
- (id)unknownFileSizeText;

@end

@interface NSMenu (WebViewFactoryAdditions)
- (id)addItemWithTitle:(id)fp8 action:(SEL)fp12 tag:(int)fp16;
@end

@interface NSWindowGraphicsContext (WebKitSystemInterface)
- (void)_WebKitSystemInterface_setGraphicsPort:(struct CGContext *)fp8;
@end

