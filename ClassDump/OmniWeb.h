class-dump: /Applications/OmniWeb.app/Contents/MacOS/OmniWeb

/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

struct OpaqueCFHTTPCookieStorage;

struct OpaqueEventHandlerRef;

struct OpaqueSecKeychainItemRef;

struct _NSMapTable;

struct _NSPoint {
    float x;
    float y;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct _NSRect {
    struct _NSPoint origin;
    struct _NSSize size;
};

struct _NSSize {
    float width;
    float height;
};

struct _NSZone;

struct _OFWeakRetainIvars {
    struct {
        unsigned int locked;
    } lock;
    unsigned int count;
};

struct rusage {
    struct timeval ru_utime;
    struct timeval ru_stime;
    long ru_maxrss;
    long ru_ixrss;
    long ru_idrss;
    long ru_isrss;
    long ru_minflt;
    long ru_majflt;
    long ru_nswap;
    long ru_inblock;
    long ru_oublock;
    long ru_msgsnd;
    long ru_msgrcv;
    long ru_nsignals;
    long ru_nvcsw;
    long ru_nivcsw;
};

struct timeval {
    int tv_sec;
    int tv_usec;
};

typedef struct {
    unsigned int isRunning:1;
} CDAnonymousStruct1;

typedef struct {
    int unit;
    unsigned short multiplier;
} CDAnonymousStruct3;

typedef struct {
    unsigned int wasOpenedByPageInfoPanel:1;
} CDAnonymousStruct4;

typedef struct {
    unsigned int needsLayout:1;
} CDAnonymousStruct2;

/*
 * File: /Applications/OmniWeb.app/Contents/MacOS/OmniWeb
 * Arch: PowerPC (ppc)
 */

@protocol DifferencableObject <NSObject>
- (int)objectId;
- (void)setObjectId:(int)fp8;
- (id)attributesSnapshot;
- (id)relationshipsSnapshot;
@end

@protocol FileSaverController <NSObject>
- (void)fileSavedSuccessfully:(id)fp8;
- (void)fileSavedUnsuccessfully:(id)fp8 withReason:(id)fp12;
@end

@protocol KWQWidgetHolder
@end

@protocol NSCoding
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSMenuItem <NSObject, NSCopying, NSCoding, NSValidatedUserInterfaceItem>
+ (void)setUsesUserKeyEquivalents:(BOOL)fp8;
+ (BOOL)usesUserKeyEquivalents;
+ (id)separatorItem;
- (id)initWithTitle:(id)fp8 action:(SEL)fp12 keyEquivalent:(id)fp16;
- (void)setMenu:(id)fp8;
- (id)menu;
- (BOOL)hasSubmenu;
- (void)setSubmenu:(id)fp8;
- (id)submenu;
- (void)setTitle:(id)fp8;
- (id)title;
- (void)setAttributedTitle:(id)fp8;
- (id)attributedTitle;
- (BOOL)isSeparatorItem;
- (void)setKeyEquivalent:(id)fp8;
- (id)keyEquivalent;
- (void)setKeyEquivalentModifierMask:(unsigned int)fp8;
- (unsigned int)keyEquivalentModifierMask;
- (id)userKeyEquivalent;
- (unsigned int)userKeyEquivalentModifierMask;
- (void)setMnemonicLocation:(unsigned int)fp8;
- (unsigned int)mnemonicLocation;
- (id)mnemonic;
- (void)setTitleWithMnemonic:(id)fp8;
- (void)setImage:(id)fp8;
- (id)image;
- (void)setState:(int)fp8;
- (int)state;
- (void)setOnStateImage:(id)fp8;
- (id)onStateImage;
- (void)setOffStateImage:(id)fp8;
- (id)offStateImage;
- (void)setMixedStateImage:(id)fp8;
- (id)mixedStateImage;
- (void)setEnabled:(BOOL)fp8;
- (BOOL)isEnabled;
- (void)setAlternate:(BOOL)fp8;
- (BOOL)isAlternate;
- (void)setIndentationLevel:(int)fp8;
- (int)indentationLevel;
- (void)setTarget:(id)fp8;
- (id)target;
- (void)setAction:(SEL)fp8;
- (SEL)action;
- (void)setTag:(int)fp8;
- (int)tag;
- (void)setRepresentedObject:(id)fp8;
- (id)representedObject;
- (void)setToolTip:(id)fp8;
- (id)toolTip;
@end

@protocol NSObject
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)fp8;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12 withObject:(id)fp16;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)fp8;
- (BOOL)isMemberOfClass:(Class)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned int)retainCount;
- (id)description;
@end

@protocol NSValidatedUserInterfaceItem
- (SEL)action;
- (int)tag;
@end

@protocol OAFindControllerTarget
- (BOOL)findPattern:(id)fp8 backwards:(BOOL)fp12 wrap:(BOOL)fp16;
@end

@protocol OFWeakRetain
- (void)invalidateWeakRetains;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (id)strongRetain;
@end

@protocol OSRLanguageModelHelper
- (id)phrasesOfType:(id)fp8;
@end

@protocol OSRTarget
- (void)parseResult:(id)fp8;
@end

@protocol OWAddressCompletionItem
- (id)addressCompletionAddress;
- (id)addressCompletionTitleString;
- (id)addressCompletionMatchString;
- (id)addressCompletionImage;
@end

@protocol OWBookmarkDataSource <NSObject>
- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (id)archiveDictionary;
- (id)controlView;
- (void)updateUI;
- (void)reloadBookmarks;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
@end

@protocol OWBookmarkDataSourceOwner <NSObject>
- (id)topBookmark;
@end

@protocol OWBookmarkObserver <OFWeakRetain>
- (void)bookmarkNeedsRedisplay:(id)fp8;
@end

@protocol OWCacheArc <NSObject>
- (id)entriesWithRelation:(int)fp8;
- (id)subject;
- (id)source;
- (id)object;
- (int)arcType;
- (unsigned int)invalidInPipeline:(id)fp8;
- (int)traverseInPipeline:(id)fp8;
- (id)expectedResultType;
- (float)expectedCost;
- (BOOL)abortArcTask;
- (id)firstBytesDate;
- (unsigned int)bytesProcessed;
- (unsigned int)totalBytes;
- (int)status;
- (id)statusString;
- (id)creationDate;
- (BOOL)resultIsSource;
- (BOOL)resultIsError;
- (BOOL)shouldNotBeCachedOnDisk;
- (void)addArcObserver:(id)fp8;
- (void)removeArcObserver:(id)fp8;
@end

@protocol OWCacheArcProvider <NSObject>
- (id)allArcs;
- (id)arcsWithRelation:(int)fp8 toEntry:(id)fp12 inPipeline:(id)fp16;
- (float)cost;
@end

@protocol OWConcreteCacheEntry <NSObject>
- (BOOL)endOfData;
- (BOOL)contentIsValid;
@end

@protocol OWFrameDidShowAddressObserver <OFWeakRetain, NSObject>
- (void)frameDidShowAddress:(id)fp8;
@end

@protocol OWHistoryEntry
- (id)historyAddress;
- (id)historyLabel;
- (unsigned int)historyVisits;
- (int)objectId;
@end

@protocol OWMoveOrCopyDraggingSource
- (void)currentDragOperationIs:(unsigned int)fp8;
@end

@protocol OWPageInfoResource
- (int)resourceType;
- (id)name;
- (BOOL)nameIsBold;
- (id)drawImage;
- (id)address;
- (id)sizeString;
- (id)typeString;
- (id)modificationDate;
- (id)expirationDate;
- (id)displayedResources;
- (BOOL)wasOpenedByPageInfoPanel;
- (void)setWasOpenedByPageInfoPanel;
- (void)filterUsingPattern:(id)fp8;
- (BOOL)matchesPattern:(id)fp8;
@end

@protocol OWSpringLoadHelper
- (BOOL)springLoadHelperShouldFlash:(id)fp8;
- (void)springLoadHelper:(id)fp8 wantsFlash:(BOOL)fp12;
- (void)springLoadHelperWantsSpringLoad:(id)fp8;
@end

@protocol OWTarget
- (id)targetContentType;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (id)parentContentInfo;
- (id)targetTypeFormatString;
@end

@protocol OWThrobber
+ (struct _NSSize)minSize;
+ (struct _NSSize)maxSize;
+ (id)staticImage;
- (void)setTarget:(id)fp8;
- (void)setAction:(SEL)fp8;
- (void)startAnimation:(id)fp8;
- (void)stopAnimation:(id)fp8;
@end

@protocol WebDocumentRepresentation <NSObject>
- (void)setDataSource:(id)fp8;
- (void)receivedData:(id)fp8 withDataSource:(id)fp12;
- (void)receivedError:(id)fp8 withDataSource:(id)fp12;
- (void)finishedLoadingWithDataSource:(id)fp8;
- (BOOL)canProvideDocumentSource;
- (id)documentSource;
- (id)title;
@end

@protocol WebDocumentText <NSObject>
- (BOOL)supportsTextEncoding;
- (id)string;
- (id)attributedString;
- (id)selectedString;
- (id)selectedAttributedString;
- (void)selectAll;
- (void)deselectAll;
@end

@protocol WebDocumentView <NSObject>
- (void)setDataSource:(id)fp8;
- (void)dataSourceUpdated:(id)fp8;
- (void)setNeedsLayout:(BOOL)fp8;
- (void)layout;
- (void)viewWillMoveToHostWindow:(id)fp8;
- (void)viewDidMoveToHostWindow;
@end

@interface OWCarbonWindowController : OFObject
{
}

+ (void)handleCarbonWindows;
+ (id)sharedWindowController;
- (void)windowDidBecomeKey:(id)fp8;

@end

@interface OWController : OAController <OWTarget, OFWeakRetain>
{
    OAFindController *findController;
    NSMenuItem *closeTabMenuItem;
    NSMenuItem *closeWindowMenuItem;
    NSMenu *historyMenu;
    NSMenuItem *characterEncodingMenuItem;
    NSMenuItem *autoFillSetMenuItem;
    NSPanel *urlOpenPanel;
    NSPopUpButton *urlOpenTypePopUp;
    NSTextField *urlOpenLocationField;
    OWAddressWell *urlOpenAddressWell;
    NSBox *openPanelAccessoryView;
    NSPopUpButton *openTypePopUp;
    NSView *splashView;
    NSTextField *splashVersionField;
    NSTextField *splashCopyrightField;
    NSImageView *splashImageView;
    NSPanel *newWorkspacePanel;
    NSButton *newWorkspaceSaveWindowsCheckbox;
    NSButtonCell *newWorkspaceOKButton;
    NSTextField *newWorkspaceNameField;
    NSPanel *splashPanel;
    OFScheduledEvent *hideSplashPanelEvent;
    OAHierarchicalPopUpController *characterEncodingMenuController;
    NSMutableSet *echoApplicationSignatures;
    SharedMenusObj *sharedMenusObject;
    struct {
        unsigned int hasOpenedBrowsersDuringLoadTime:1;
        unsigned int hasRetainedHistoryIcons:1;
        unsigned int hasRetainedBookmarkIcons:1;
        unsigned int hasRetainedFavoritesIcons:1;
        unsigned int hasAllowedIconCleanup:1;
    } flags;
}

+ (void)initialize;
+ (id)sharedController;
+ (id)fullVersion;
+ (id)appVersion;
+ (id)buildDate;
- (id)init;
- (void)awakeFromNib;
- (id)frontWebBrowser;
- (id)findController;
- (id)helpURLForKey:(id)fp8;
- (id)historyMenu;
- (void)closeAllWebBrowsers;
- (id)omniWebPathWithFilename:(id)fp8;
- (id)openFilename:(id)fp8;
- (id)openAddress:(id)fp8 inNewBrowserWindowAtPoint:(struct _NSPoint)fp12;
- (id)openAddress:(id)fp8 inNewBrowserWindowAtPoint:(struct _NSPoint)fp12 obscuredByMainWindow:(BOOL)fp20;
- (id)openAddressInNewBrowserWindow:(id)fp8;
- (void)openAddressAsSourceWindow:(id)fp8;
- (void)openAddressAsBookmarksWindow:(id)fp8;
- (void)openAddressAsDownload:(id)fp8;
- (id)openAddressInPreferredWindow:(id)fp8;
- (id)openAddress:(id)fp8;
- (id)openAddress:(id)fp8 atScreenPoint:(struct _NSPoint)fp12;
- (id)openAddress:(id)fp8 atScreenPoint:(struct _NSPoint)fp12 obscuredByMainWindow:(BOOL)fp20;
- (id)startDraggingNewWindowWithAddress:(id)fp8 atScreenPoint:(struct _NSPoint)fp12;
- (id)openAddressWithString:(id)fp8;
- (id)openExternalAddress:(id)fp8;
- (void)downloadAddressWithString:(id)fp8;
- (void)applicationDidBecomeActive:(id)fp8;
- (void)applicationDidResignActive:(id)fp8;
- (void)handleRunException:(id)fp8;
- (void)applicationWillFinishLaunching:(id)fp8;
- (void)applicationDidUnhide:(id)fp8;
- (BOOL)applicationOpenUntitledFile:(id)fp8;
- (BOOL)applicationShouldHandleReopen:(id)fp8 hasVisibleWindows:(BOOL)fp12;
- (void)personalBookmarksLoaded:(id)fp8;
- (void)favoritesBookmarksLoaded:(id)fp8;
- (void)applicationDidFinishLaunching:(id)fp8;
- (void)setHasOpenedBrowser;
- (void)reopenDefaultBrowserWindow;
- (int)applicationShouldTerminate:(id)fp8;
- (void)applicationWillTerminate:(id)fp8;
- (BOOL)application:(id)fp8 openFile:(id)fp12;
- (id)applicationSupportDirectoryName;
- (void)openFilesAsTabs:(id)fp8;
- (void)application:(id)fp8 openFiles:(id)fp12;
- (void)openDockItemsInTabs:(id)fp8;
- (void)openNextChangedBookmark:(id)fp8;
- (void)openAllChangedBookmarks:(id)fp8;
- (void)markDockItemsAsViewed:(id)fp8;
- (void)markAllBookmarksViewed:(id)fp8;
- (id)applicationDockMenu:(id)fp8;
- (void)openURL:(id)fp8 userData:(id)fp12 error:(id *)fp16;
- (BOOL)privateBrowsingIsEnabled;
- (void)newWorkspace:(id)fp8;
- (void)newWorkspaceOK:(id)fp8;
- (void)newWorkspaceCancel:(id)fp8;
- (void)closeWorkspace:(id)fp8;
- (void)nextWorkspace:(id)fp8;
- (void)previousWorkspace:(id)fp8;
- (void)showWorkspaces:(id)fp8;
- (void)takeSnapshotOfWorkspace:(id)fp8;
- (void)restoreWorkspaceSnapshot:(id)fp8;
- (void)chooseWorkspace:(id)fp8;
- (void)goToLocation:(id)fp8;
- (void)searchTheWeb:(id)fp8;
- (void)flushCache:(id)fp8;
- (void)openHelpBrowser:(id)fp8;
- (void)openKeyboardHelpBrowser:(id)fp8;
- (void)openAcknowledgmentsBrowser:(id)fp8;
- (void)openFeedbackBrowser:(id)fp8;
- (void)openProductPageBrowser:(id)fp8;
- (void)openDTDBrowser:(id)fp8;
- (void)showPreferencesPanel:(id)fp8;
- (void)openFilePanel:(id)fp8;
- (void)openURLPanel:(id)fp8;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (void)cancelOpen:(id)fp8;
- (void)continueOpen:(id)fp8;
- (void)openSelectedURL:(id)fp8;
- (void)newWindow:(id)fp8;
- (void)newSourceWindow:(id)fp8;
- (void)saveAll:(id)fp8;
- (void)viewBookmarksInPreferredMode:(id)fp8;
- (void)showHistoryBookmarks:(id)fp8;
- (void)showUnviewedBookmarks:(id)fp8;
- (void)newBookmarksFile:(id)fp8;
- (void)importBookmarks:(id)fp8;
- (void)showStatusDisplay:(id)fp8;
- (void)showDownloadsPanel:(id)fp8;
- (void)showConsolePanel:(id)fp8;
- (void)showJavaScriptConsole:(id)fp8;
- (void)showLicensePanel:(id)fp8;
- (void)showFindPanel:(id)fp8;
- (void)toggleLinkLabels:(id)fp8;
- (void)goToOmniStore:(id)fp8;
- (void)historyMenuChoice:(id)fp8;
- (void)clearHistory:(id)fp8;
- (void)overrideEncodingPopupSelected:(id)fp8;
- (void)changeAutoFillSet:(id)fp8;
- (void)showCacheBrowser:(id)fp8;
- (void)dumpNotificationInfo:(id)fp8;
- (void)showPerformanceTester:(id)fp8;
- (void)_leakSockets:(id)fp8;
- (void)_leakMemory:(id)fp8;
- (void)resetOmniWeb:(id)fp8;
- (void)disableTabUpdates:(id)fp8;
- (void)reportBug:(id)fp8;
- (void)setPrivateBrowsing:(id)fp8;
- (void)saveBookmarks:(id)fp8;
- (void)echoAddress:(id)fp8;
- (void)setCommandWClosesTabs;
- (id)omniWebStringForKey:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (id)targetContentType;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (id)targetTypeFormatString;
- (id)parentContentInfo;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (id)strongRetain;
- (void)invalidateWeakRetains;
- (id)debugDictionary;
- (id)webIconDatabase:(id)fp8 defaultIconForURL:(id)fp12 withSize:(struct _NSSize)fp16;

@end

@interface OWController (Private)
- (void)_setCommandWClosesTabsForWindow:(id)fp8;
- (void)_systemColorsChanged:(id)fp8;
- (void)_openAddressInNewWindowNotification:(id)fp8;
- (void)_workspaceWillPowerOff:(id)fp8;
- (void)_windowBecameKey:(id)fp8;
- (void)_showSplashPanel;
- (void)_hideSplashPanel;
- (void)_ensureOmniWebDirectoryExistsAtStartup;
- (void)_openBrowserFromAddressDefaultName:(id)fp8;
- (void)_openWindowOfType:(int)fp8 address:(id)fp12;
- (void)_removeBuyMeMenuItem;
- (void)_setupCharacterEncodingMenu;
- (void)controlTextDidChange:(id)fp8;
- (void)_setupAutoFillMenu;
- (void)_currentAutoFillSetDidChange:(id)fp8;
- (void)_openAddressFromDockMenuItem:(id)fp8;
- (void)_handleRegisterURLEchoEvent:(id)fp8 withReplyEvent:(id)fp12;
- (void)_handleUnregisterURLEchoEvent:(id)fp8 withReplyEvent:(id)fp12;
- (void)_recursiveCacheBookmarkIcons:(id)fp8;
- (void)_cleanup;
@end

@interface OWFirstResponderStealingView : NSView
{
}

- (BOOL)acceptsFirstResponder;

@end

@interface OWFirstResponderStealingView (Private)
@end

@interface OWPerformanceTester : NSWindowController
{
    NSPopUpButton *urlOrSuitePopUp;
    NSTextField *urlField;
    NSPopUpButton *repeatPopUp;
    NSPopUpButton *clearCachePopUp;
    NSTableView *resultsTableView;
    NSProgressIndicator *progressIndicator;
    NSTextField *totalTimeField;
    NSTextField *meanTimeField;
    NSTextField *standardDeviationTimeField;
    NSButton *startButton;
    NSString *urlString;
    unsigned int runCount;
    int testType;
    int cacheBehavior;
    NSMutableArray *results;
    unsigned int currentURLIndex;
    OWBrowserController *testBrowser;
    CDAnonymousStruct1 flags;
}

+ (id)sharedPerformanceTester;
+ (id)performanceNotificationCenter;
- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)setTestType:(id)fp8;
- (void)setURL:(id)fp8;
- (void)setRunCount:(id)fp8;
- (void)setCacheBehavior:(id)fp8;
- (void)start:(id)fp8;
- (void)stop:(id)fp8;
- (void)save:(id)fp8;

@end

@interface OWPerformanceTester (Private)
- (void)_startTest;
- (void)_stopTest;
- (id)_testBrowser;
- (void)_loadURL;
- (id)_currentResult;
- (void)_testBrowserDidClose:(id)fp8;
- (void)_testBrowserDidStartLoading:(id)fp8;
- (void)_testBrowserDidFinishLoading:(id)fp8;
- (void)_updateUI;
- (void)_updateUIForRunningStatus;
- (id)_addresses;
- (id)_recentURLStrings;
- (BOOL)_isRunning;
- (double)_totalTime;
- (double)_meanTime;
- (double)_standardDeviation;
@end

@interface OWPerformanceTester (NotificationsDelegatesDatasources)
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
@end

@interface OWPerformanceTesterResult : NSObject
{
    OWAddress *address;
    double totalTime;
    BOOL loadedSuccessfully;
}

- (id)initWithAddress:(id)fp8;
- (void)dealloc;
- (id)address;
- (id)addressString;
- (double)totalTime;
- (void)setTotalTime:(double)fp8;
- (BOOL)loadedSuccessfully;
- (void)setLoadedSuccessfully:(BOOL)fp8;

@end

@interface OWPerformanceTesterResult (Private)
@end

@interface OWPerformanceTesterResult (NotificationsDelegatesDatasources)
@end

@interface OWSpeechController : OFObject <OSRTarget, OSRLanguageModelHelper>
{
    NSDictionary *speakableUI;
}

+ (void)didLoad;
+ (id)sharedSpeechController;
- (id)init;
- (void)dealloc;
- (BOOL)isEnabled;
- (void)setEnabled:(BOOL)fp8;
- (void)activateLanguageModel:(id)fp8;
- (id)speakableUI;
- (id)phrasesOfType:(id)fp8;
- (void)parseResult:(id)fp8;

@end

@interface OWSpeechController (Private)
@end

@interface OWSpeechController (NotificationsDelegatesDatasources)
- (void)speechRecognitionStatusDidChange:(id)fp8;
@end

@interface OWKGeneratedStyleSheetProcessor : OWProcessor
{
    OWDataStream *outputStream;
    OWAddress *styleSheetAddress;
}

+ (void)didLoad;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)process;

@end

@interface OWKStyleSheet : OFObject <OFWeakRetain>
{
    struct _OFWeakRetainIvars weakRetainIvars;
    NSDictionary *presetDictionary;
    NSString *domain;
    NSMutableString *cachedStringValue;
    NSString *userStyleSheetLocation;
}

+ (void)_loadPresetFontStyles;
+ (void)_loadPresetStyleSheets;
+ (void)initialize;
+ (id)presetFontStyles;
+ (id)presetFontStyleNamed:(id)fp8;
+ (id)presetMatchingFontSettingForAddress:(id)fp8;
+ (id)_fontStylePresetValueNamed:(id)fp8 orPreferenceForKey:(id)fp12 forAddress:(id)fp16;
+ (id)normalFontFamilyForAddress:(id)fp8;
+ (float)normalFontSizeForAddress:(id)fp8;
+ (id)fixedFontFamilyForAddress:(id)fp8;
+ (float)fixedFontSizeForAddress:(id)fp8;
+ (BOOL)hasMinimumFontSizeForAddress:(id)fp8;
+ (float)minimumFontSizeForAddress:(id)fp8;
+ (BOOL)hasMaximumFontSizeForAddress:(id)fp8;
+ (float)maximumFontSizeForAddress:(id)fp8;
+ (id)presetStyleSheets;
+ (id)presetStyleSheetNamed:(id)fp8;
+ (id)styleSheetForDomain:(id)fp8;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)reapply;
- (id)stringValue;
- (id)name;
- (id)pageBackgroundColor;
- (void)setPageBackgroundColor:(id)fp8;
- (id)textColor;
- (void)setTextColor:(id)fp8;
- (id)linkColor;
- (void)setLinkColor:(id)fp8;
- (id)visitedLinkColor;
- (void)setVisitedLinkColor:(id)fp8;
- (id)activeLinkColor;
- (void)setActiveLinkColor:(id)fp8;
- (void)setHoverLinkColor:(id)fp8;
- (id)hoverLinkColor;
- (BOOL)shouldUnderlineLinks;
- (BOOL)shouldAllowResizeableTextAreas;
- (void)setShouldUnderlineLinks:(BOOL)fp8;
- (BOOL)overridePageColors;
- (void)setOverridePageColors:(BOOL)fp8;
- (id)domain;
- (BOOL)presetMatchesColorSettingsForAddress:(id)fp8;
- (id)pageColorsDictionary;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;

@end

@interface OWKStyleSheet (PrivateAPI)
+ (void)_removeStyleSheetFromCache:(id)fp8;
- (id)_initWithDomain:(id)fp8;
- (id)_initWithDictionary:(id)fp8;
- (void)_invalidate;
- (void)_generate;
- (void)_generatePageBackgroundColor:(id)fp8 overridePageColors:(BOOL)fp12;
- (void)_generateTextColor:(id)fp8 overridePageColors:(BOOL)fp12;
- (void)_generateLinkColor:(id)fp8 overridePageColors:(BOOL)fp12;
- (void)_generateVisitedLinkColor:(id)fp8 overridePageColors:(BOOL)fp12;
- (void)_generateActiveLinkColor:(id)fp8 overridePageColors:(BOOL)fp12;
- (void)_generateAnchorTextDecoration:(id)fp8;
- (void)_generateFocusRingStyle:(id)fp8;
- (void)_generateResizeableTextArea:(id)fp8;
- (void)_generateUserStyleSheetImport:(id)fp8;
- (id)_preferenceForKey:(id)fp8;
- (void)_setDomain:(id)fp8;
- (void)_didChange;
@end

@interface OAPreferenceController (OAPreferenceControllerOWExtensions)
+ (id)overrideNameForCategoryName:(id)fp8;
+ (id)overrideLocalizedNameForCategoryName:(id)fp8 bundle:(id)fp12;
@end

@interface OWFileListProcessor : OWObjectToDataStreamProcessor
{
}

+ (void)didLoad;
+ (id)resultContentType;
+ (void)initialize;
- (void)process;

@end

@interface OWFileListProcessor (Private)
- (void)writeHTMLForFileInfo:(id)fp8 isEven:(BOOL)fp12;
@end

@interface OWSGMLObjectsToHTML : OWObjectToDataStreamProcessor
{
}

+ (void)didLoad;
+ (id)resultContentType;
- (void)process;
- (void)processAbort;

@end

@interface OWSourceToSourceViewProcessor : OWDataStreamCharacterProcessor
{
    OWSourceTextView *sourceTextView;
}

+ (void)didLoad;
+ (void)initialize;
- (void)dealloc;
- (void)process;

@end

@interface OWHistoryDateEntry : NSObject <OWHistoryEntry>
{
    NSCalendarDate *date;
    NSMutableArray *entries;
    id menuItem;
    OWBookmark *bookmark;
}

- (id)_dateTitle;
- (id)initWithEntries:(id)fp8 forDate:(id)fp12;
- (void)dealloc;
- (id)description;
- (int)compare:(id)fp8;
- (void)invalidate;
- (id)date;
- (id)entries;
- (void)addEntry:(id)fp8 sort:(BOOL)fp12;
- (void)removeEntries:(id)fp8;
- (id)menuItem;
- (id)bookmark;
- (void)updateMenuItemTitle;
- (void)addAddressCompletionItems:(id)fp8;
- (id)historyAddress;
- (id)historyLabel;
- (unsigned int)historyVisits;
- (int)objectId;

@end

@interface OWHistoryDateEntry (Private)
- (void)_buildBookmark;
- (void)_invalidateBookmark;
- (void)_buildMenu;
- (void)_invalidateMenu;
- (unsigned int)_indexForEntry:(id)fp8;
@end

@interface OWHistoryIndexManager : OFObject
{
    OXDatabase *database;
    NSLock *indexLock;
    BOOL quittingDoNotModify;
}

+ (void)didLoad;
+ (void)initialize;
+ (id)sharedHistoryIndexManager;
+ (id)indexWordsContentType;
- (id)init;
- (id)matchesForSearchString:(id)fp8;
- (BOOL)isAddressIndexed:(id)fp8;
- (void)indexFrame:(id)fp8;
- (void)removeAddress:(id)fp8;

@end

@interface OWHistoryIndexManager (Private) <OFWeakRetain>
- (BOOL)_stopWord:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (id)strongRetain;
- (void)invalidateWeakRetains;
- (void)_removeAddresses:(id)fp8;
- (void)_save:(id)fp8;
- (void)_addAddress:(id)fp8 string:(id)fp12;
- (void)rebuildIndex;
- (void)controllerStartedRunning:(id)fp8;
- (void)controllerWillTerminate:(id)fp8;
@end

@interface OWPersistentEntry : OWAddressEntry <OWHistoryEntry>
{
    OWHistoryDateEntry *dateEntry;
    NSCalendarDate *dateLastVisited;
    id menuItem;
    id recentHistoryMenuItem;
    OWBookmark *bookmark;
    unsigned int numberOfVisits;
}

- (id)initWithAddress:(id)fp8;
- (void)dealloc;
- (void)invalidate;
- (double)timeIntervalSinceReferenceDate;
- (void)markVisited;
- (void)markVisitedOnDate:(id)fp8;
- (id)dateLastVisited;
- (unsigned int)numberOfVisits;
- (id)dateEntry;
- (void)setDateEntry:(id)fp8;
- (id)menuItem;
- (id)recentHistoryMenuItem;
- (id)bookmark;
- (id)initWithArchiveDictionary:(id)fp8;
- (id)archiveDictionary;
- (id)historyAddress;
- (id)historyLabel;
- (unsigned int)historyVisits;
- (int)objectId;

@end

@interface OWPersistentEntry (Private)
- (short)_menuItemWidth;
- (void)_titleChanged;
- (void)_cacheMenuItems;
- (void)_cacheBookmark;
@end

@interface OWWebHistory : WebHistory
{
}

- (BOOL)containsItemForURLString:(id)fp8;

@end

@interface OWPersistentHistoryManager : OFObject
{
    NSMutableArray *_dateEntries;
    NSLock *_visitedPageCacheKeysLock;
    NSMutableSet *_visitedPageCacheKeys;
    NSLock *entryCacheLock;
    NSMutableDictionary *entryCache;
    NSMutableDictionary *dateEntryCache;
    NSLock *pendingAutosaveEventLock;
    OFScheduledEvent *pendingAutosaveEvent;
    NSLock *pendingMenuRebuildEventLock;
    OFScheduledEvent *pendingMenuRebuildEvent;
    struct {
        unsigned int clearingHistory:1;
    } flags;
}

+ (void)didLoad;
+ (id)sharedPersistentHistoryManager;
+ (BOOL)isEnabled;
- (id)init;
- (void)dealloc;
- (void)visitedAddress:(id)fp8 fromPipeline:(id)fp12;
- (BOOL)haveVisitedAddress:(id)fp8;
- (id)dateLastVisitedAddress:(id)fp8;
- (unsigned int)numberOfVisitsForAddress:(id)fp8;
- (id)dateEntries;
- (id)dateEntryForDate:(id)fp8 sortIfCreated:(BOOL)fp12;
- (id)allEntries;
- (BOOL)hasEntries;
- (unsigned int)addressCount;
- (id)addressAtIndex:(unsigned int)fp8;
- (void)addAddressCompletionItems:(id)fp8;
- (void)removeEntries:(id)fp8;
- (void)removeDateEntries:(id)fp8;
- (void)flushEntries;

@end

@interface OWAddress (OWPersistentHistoryOverrides)
- (BOOL)isVisited;
@end

@interface OWPersistentHistoryManager (Private)
+ (void)controllerStartedRunning:(id)fp8;
+ (void)controllerWillTerminate:(id)fp8;
+ (unsigned int)_maximumNumberOfEntriesToSave;
+ (unsigned int)_maximumNumberOfEntriesInMenu;
+ (unsigned int)_maximumNumberOfDatesInMenu;
+ (double)_maxAllowedEntryAge;
- (id)_init;
- (void)_load;
- (void)_readOW4HistoryFromFile:(id)fp8;
- (void)_readHistoryFromFile:(id)fp8;
- (void)_save;
- (void)_scheduleAutosave;
- (void)_saveIfNeeded;
- (void)_scheduleDidChangeNotification;
- (void)_sendHistoryDidChangeNotification;
- (BOOL)_haveVisitedPageWithCacheKey:(id)fp8;
- (void)_markVisitedPageForCacheKey:(id)fp8;
- (id)_entryForAddress:(id)fp8 addToCache:(BOOL)fp12;
- (void)_cacheEntry:(id)fp8;
- (void)_truncateDateEntriesIfNeeded;
- (id)_recentHistory;
- (void)_scheduleRebuildHistoryMenu;
- (void)_rebuildHistoryMenu;
@end

@interface OWAddressCompletionController : OWCompletionController
{
    OWAddressWell *targetAddressWell;
    NSTableColumn *addressTableColumn;
    NSTableColumn *titleTableColumn;
    NSArray *items;
    NSMutableArray *terms;
}

+ (id)sharedAddressCompletionController;
+ (void)initialize;
+ (id)globalAddressCompletionItems;
+ (id)matchStringForAddress:(id)fp8;
- (void)dealloc;
- (id)nibName;
- (void)adjustToWidth:(float)fp8 scrollerWidth:(float)fp12;
- (struct _NSRect)windowFrame;
- (void)attachToControl:(id)fp8 items:(id)fp12 addressWell:(id)fp16;
- (void)detach;
- (id)matchesForString:(id)fp8;
- (void)selectDefaultCompletion;
- (BOOL)complete;
- (void)tableViewAction:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;

@end

@interface OWAddressCompletionController (PrivateAPI)
+ (id)_searchTermsForString:(id)fp8;
- (id)_init;
- (id)_defaultMatchForTermString:(id)fp8;
@end

@interface OWAddressCompletionTerm : NSObject
{
    NSString *term;
    NSArray *matches;
}

- (void)dealloc;
- (id)term;
- (id)matches;
- (void)invalidate;
- (BOOL)updateMatchesForTerm:(id)fp8 searchItems:(id)fp12;
- (id)debugDictionary;

@end

@interface OWAddressCompletionTerm (Private)
@end

@interface OWAddressCompletionTerm (NotificationsDelegatesDatasources)
@end

@interface OWAddressEntry : OFObject <OWAddressCompletionItem>
{
    OWAddress *address;
    NSString *addressCompletionMatchString;
}

- (id)initWithAddress:(id)fp8;
- (void)dealloc;
- (id)address;
- (id)drawLabel;
- (id)drawImage;
- (id)dragImage;
- (void)copyToPasteboard:(id)fp8;
- (void)addAddressCompletionItems:(id)fp8;
- (id)addressCompletionAddress;
- (id)addressCompletionTitleString;
- (id)addressCompletionMatchString;
- (id)addressCompletionImage;
- (id)initWithArchiveDictionary:(id)fp8;
- (id)archiveDictionary;
- (id)debugDictionary;

@end

@interface OWAddressWell : NSControl
{
    id companion;
    OWAddress *address;
    OWAddress *baseAddress;
    NSImage *overrideImage;
    NSImage *cachedDrawImage;
    id nonretainedTarget;
    SEL action;
    struct {
        unsigned int highlighted:1;
        unsigned int isInTitleBar:1;
        unsigned int allowsNilAddress:1;
        unsigned int highlightsCompanionOnSingleClick:1;
    } flags;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setDocumentEdited:(BOOL)fp8;
- (id)awakeAfterUsingCoder:(id)fp8;
- (void)dealloc;
- (void)setBaseAddress:(id)fp8;
- (void)setAddress:(id)fp8;
- (id)address;
- (void)setAllowsNilAddress:(BOOL)fp8;
- (BOOL)allowsNilAddress;
- (id)companion;
- (void)setCompanion:(id)fp8;
- (void)takeValueFromCompanion;
- (id)addressForString:(id)fp8;
- (void)setURL:(id)fp8;
- (void)takeURLFrom:(id)fp8;
- (void)takeStringValueFrom:(id)fp8;
- (void)setHighlighted:(BOOL)fp8;
- (BOOL)isHighlighted;
- (void)setIsInTitleBar:(BOOL)fp8;
- (void)setOverrideImage:(id)fp8;
- (void)setHighlightsCompanionOnSingleClick:(BOOL)fp8;
- (BOOL)acceptsFirstResponder;
- (BOOL)refusesFirstResponder;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)isOpaque;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setTarget:(id)fp8;
- (id)target;
- (void)setAction:(SEL)fp8;
- (SEL)action;
- (void)mouseDown:(id)fp8;
- (void)controlTextDidEndEditing:(id)fp8;
- (id)debugDictionary;

@end

@interface OWAddressWell (Private)
+ (void)_setupImages;
- (void)_redisplayAddress;
- (void)_faviconPreferenceDidChange:(id)fp8;
@end

@interface OWAddressWell (SubclassesOnly)
- (void)showPopup;
@end

@interface OWAddressWellFrame : NSThemeFrame
{
}

- (id)newFileButton;
- (void)showPopup;

@end

@interface OWAddressWindow : NSWindow
{
    OWFrameAddressWell *addressDragButton;
}

+ (Class)frameViewClassForStyleMask:(unsigned int)fp8;
- (void)dealloc;
- (double)animationResizeTime:(struct _NSRect)fp8;
- (float)toolbarHeight;
- (void)setAddressDragButton:(id)fp8;
- (id)addressDragButton;

@end

@interface NSWindow (OWExtensions)
- (double)animationResizeTime:(struct _NSRect)fp8;
@end

@interface OWAlternatingColorsOutlineView : NSOutlineView <OWSpringLoadHelper>
{
    OWSpringLoadHelper *springLoadHelper;
    struct {
        unsigned int shouldDrawDropHighlight:1;
        unsigned int shouldDrawGrid:1;
        unsigned int respondsToBackgroundColor:1;
    } flags;
}

+ (id)primaryColor;
+ (id)secondaryColor;
+ (id)gridColor;
- (void)dealloc;
- (void)awakeFromNib;
- (void)setDataSource:(id)fp8;
- (id)menu;
- (void)drawRect:(struct _NSRect)fp8;
- (void)drawRow:(int)fp8 clipRect:(struct _NSRect)fp12;
- (void)drawGridInClipRect:(struct _NSRect)fp8;
- (void)_drawDropHighlight;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)_sendDelegateDidClickColumn:(int)fp8;
- (void)_sendDelegateDidDragColumn:(int)fp8;
- (BOOL)springLoadHelperShouldFlash:(id)fp8;
- (void)springLoadHelper:(id)fp8 wantsFlash:(BOOL)fp12;
- (void)springLoadHelperWantsSpringLoad:(id)fp8;

@end

@interface OWAlternatingColorsOutlineView (Private)
- (void)_startWindowSpringLoad;
- (void)_stopWindowSpringLoad;
@end

@interface OWBookmark : OFObject <OWTarget, OWBookmarkObserver, DifferencableObject, OFWeakRetain, OWConcreteCacheEntry, OWFrameDidShowAddressObserver>
{
    OWAddress *address;
    NSString *label;
    NSString *annotation;
    NSDate *lastCheckedDate;
    NSArray *validator;
    NSString *externalUniqueID;
    CDAnonymousStruct3 changeFlaggingFrequency;
    unsigned int documentWordCount;
    NSMutableDictionary *attributes;
    int status;
    struct {
        unsigned int defaultChangeChecking:1;
        unsigned int fetchedDeferredInfo:1;
        unsigned int observingAddressViewed:1;
    } flags;
    OFScheduledEvent *changeCheckEvent;
    NSMutableArray *children;
    OWBookmark *nonretainedParent;
    OWBookmarkDelegate *delegate;
    int objectId;
    NSString *specialBookmarkType;
    NSString *addressCompletionMatchString;
    NSMutableArray *observers;
    NSLock *observersLock;
    OWBookmark *observedBookmark;
    OWWebTask *webTask;
    struct _OFWeakRetainIvars weakRetainIvars;
}

+ (void)initialize;
+ (id)textSignatureType;
+ (id)contentType;
+ (CDAnonymousStruct3)bookmarksDefaultCheckFrequency;
+ (id)recognizedPasteboardTypes;
+ (id)bookmarksFromPasteboard:(id)fp8;
+ (void)copyBookmarks:(id)fp8 toPasteboard:(id)fp12;
+ (id)resolveAlias:(id)fp8;
+ (void)addBookmarksObserver:(id)fp8;
+ (void)removeBookmarksObserver:(id)fp8;
+ (BOOL)differenceIsSignificantForKey:(id)fp8;
- (id)init;
- (id)initWithAddress:(id)fp8 label:(id)fp12 status:(int)fp16 changeCheckingFromString:(id)fp20 lastCheckedDate:(id)fp24 documentWordCount:(unsigned int)fp28;
- (id)initWithAddress:(id)fp8;
- (id)initWithLabel:(id)fp8;
- (id)initWithArchiveDictionary:(id)fp8;
- (void)dealloc;
- (void)loadDeferredInfo;
- (void)revalidate;
- (void)becameTopLevelBookmarkForBookmarks:(id)fp8;
- (id)findChildWithLabel:(id)fp8;
- (id)findChildWithAddress:(id)fp8;
- (id)findRootLevelChildWithSpecialType:(id)fp8;
- (BOOL)matchesPattern:(id)fp8 orAddressSet:(id)fp12 inMode:(int)fp16;
- (void)replaceAllWithPattern:(id)fp8;
- (void)copyToPasteboard:(id)fp8;
- (id)cloneBookmark;
- (id)drawImage;
- (id)drawImageIncludingBadge:(BOOL)fp8;
- (void)addAddressCompletionItems:(id)fp8;
- (id)dateLastVisited;
- (id)attributes;
- (void)setValue:(id)fp8 forAttribute:(id)fp12;
- (id)archiveDictionary;
- (id)aliasDictionary;
- (void)checkForUpdates;
- (void)checkForUpdatesIncludingChildren;
- (void)resetChangeCheckEvent;
- (void)markAsReadIncludingChildrenNotify:(BOOL)fp8;
- (void)markAsReadIncludingChildren;
- (void)markAsUnviewedIncludingChildrenNotify:(BOOL)fp8;
- (void)markAsUnviewedIncludingChildren;
- (void)markAsAliveIncludingChildrenNotify:(BOOL)fp8;
- (void)markAsAliveIncludingChildren;
- (void)markAsUnreachableIncludingChildrenNotify:(BOOL)fp8;
- (void)markAsUnreachableIncludingChildren;
- (unsigned int)countOfStatus:(int)fp8;
- (int)predominantStatusIncludingChildren;
- (id)address;
- (void)setAddress:(id)fp8 notify:(BOOL)fp12;
- (void)setAddress:(id)fp8;
- (id)label;
- (void)setLabel:(id)fp8;
- (void)setLabel:(id)fp8 notify:(BOOL)fp12;
- (id)menuLabel;
- (id)labelOrGroupLabel;
- (id)specialBookmarkType;
- (void)setSpecialBookmarkType:(id)fp8;
- (id)annotation;
- (void)setAnnotation:(id)fp8;
- (void)setAnnotationNoCopyNoNotify:(id)fp8;
- (id)externalUniqueID;
- (void)setExternalUniqueID:(id)fp8;
- (BOOL)isFolder;
- (BOOL)isSeparator;
- (BOOL)isReadOnly;
- (BOOL)bookmarksAreReadOnly;
- (id)keyword;
- (void)setKeyword:(id)fp8;
- (BOOL)isIndexed;
- (unsigned int)numberOfVisits;
- (BOOL)canSetLabel;
- (BOOL)canSetAddress;
- (BOOL)canSetAnnotation;
- (BOOL)supportsChangeChecking;
- (BOOL)canHaveChangeCheckingState;
- (BOOL)canBeDeleted;
- (BOOL)shouldBeOpened;
- (int)status;
- (void)setStatus:(int)fp8 withUndo:(BOOL)fp12;
- (void)setStatus:(int)fp8;
- (id)lastCheckedDate;
- (void)setLastCheckedDate:(id)fp8;
- (void)justDidCheck;
- (CDAnonymousStruct3)changeFlaggingFrequency;
- (CDAnonymousStruct3)effectiveChangeFlaggingFrequency;
- (void)setChangeFlaggingFrequency:(CDAnonymousStruct3)fp8;
- (void)setChangeFlaggingFrequency:(CDAnonymousStruct3)fp8 notify:(BOOL)fp16;
- (void)setChangeFlaggingFrequencyFromString:(id)fp8;
- (BOOL)defaultChangeChecking;
- (void)setChangeCheckingToDefault;
- (void)setChangeCheckingToDefaultAndNotify:(BOOL)fp8;
- (id)changeCheckString;
- (unsigned int)documentWordCount;
- (void)setDocumentWordCount:(unsigned int)fp8;
- (id)validator;
- (void)setValidator:(id)fp8;
- (void)recursivelyResetChangeChecking;
- (void)anyDescendantHasAddress:(char *)fp8 hasUnviewedContent:(char *)fp12 wasUnreachable:(char *)fp16;
- (id)children;
- (BOOL)hasChildren;
- (BOOL)isDescendantOf:(id)fp8;
- (id)parent;
- (id)rootBookmark;
- (id)lastBookmarkInTree;
- (void)setChildren:(id)fp8;
- (void)setChildren:(id)fp8 notify:(BOOL)fp12;
- (void)setChildrenWithoutResettingChildParent:(id)fp8;
- (void)fileChild:(id)fp8;
- (void)addChild:(id)fp8;
- (void)insertChild:(id)fp8 atIndex:(unsigned int)fp12;
- (void)insertChild:(id)fp8 atIndex:(unsigned int)fp12 notify:(BOOL)fp16;
- (void)removeChild:(id)fp8;
- (void)removeChild:(id)fp8 notify:(BOOL)fp12;
- (void)removeFromParent;
- (void)addDescendantsToArray:(id)fp8;
- (id)allChildrenMatchingPattern:(id)fp8 orAddressSet:(id)fp12 inMode:(int)fp16;
- (id)descendentWithExternalUniqueID:(id)fp8;
- (id)childrenSortedUsingOrderings:(id)fp8;
- (unsigned int)descendentCount;
- (id)descendentCountString;
- (void)addBookmarksWithStatus:(int)fp8 toArray:(id)fp12;
- (void)deleteChildrenFromArray:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (void)addBookmarkObserver:(id)fp8;
- (void)removeBookmarkObserver:(id)fp8;
- (int)objectId;
- (void)setObjectId:(int)fp8;
- (id)attributesSnapshot;
- (id)relationshipsSnapshot;
- (void)_setDelegateClass:(id)fp8;
- (id)contentType;
- (BOOL)endOfData;
- (BOOL)contentIsValid;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;
- (void)controllerRequestsTerminate:(id)fp8;
- (void)pasteboard:(id)fp8 provideDataForType:(id)fp12;
- (id)targetContentType;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (id)parentContentInfo;
- (id)targetTypeFormatString;
- (void)updateStatusForPipeline:(id)fp8;
- (void)pipelineDidEnd:(id)fp8;
- (id)promptViewForPipeline:(id)fp8;
- (id)addressCompletionAddress;
- (id)addressCompletionTitleString;
- (id)addressCompletionMatchString;
- (id)addressCompletionImage;
- (void)bookmarkNeedsRedisplay:(id)fp8;
- (void)frameDidShowAddress:(id)fp8;

@end

@interface OWBookmark (Private)
+ (void)_setupImages;
+ (id)_zapFolderImageWithFolder:(id)fp8 andZap:(id)fp12;
+ (id)_badgeFolderImageWithFolder:(id)fp8 andBadge:(id)fp12;
+ (id)_badgeZapImageWithZap:(id)fp8 andBadge:(id)fp12;
+ (void)_rebuildShortcutCache;
+ (void)_notifyObservers:(id)fp8 forBookmark:(id)fp12;
+ (void)_notifyObserversForBookmark:(id)fp8;
+ (void)_pipelineFetchedAddressNotification:(id)fp8;
- (id)_observersSnapshot;
- (void)_notifyObservers;
- (void)_setObservedBookmark:(id)fp8;
- (void)_pipelineFetchedAddressNotification:(id)fp8;
- (void)_mainThreadAddressFetchedNotification:(id)fp8;
- (void)_mainThreadNeedsRedisplay;
- (void)_needsRedisplay;
- (void)_needsSave;
- (void)_handleRedirection:(id)fp8;
- (void)_automaticChangeCheck;
- (void)_resetChangeCheckEventForDefaultChildren;
- (void)_lockedAbortChangeCheckEvent;
- (void)_abortPendingChangeCheckEvent;
- (void)_listenForFrameDidShowAddressIfNotViewed;
- (void)_titleForAddressDidChange:(id)fp8;
- (BOOL)_isTopBookmark;
- (void)_treeWillDeleteFromBookmarks:(id)fp8;
- (void)_treeDidInsertInBookmarks:(id)fp8;
- (id)_initWithAddress:(id)fp8;
- (void)_setNonretainedParent:(id)fp8;
- (void)_setNonretainedParent:(id)fp8 notify:(BOOL)fp12;
- (id)_findDescendentWithDepth:(unsigned int)fp8 labelPath:(id)fp12;
- (void)_addChildrenMatchingPattern:(id)fp8 orAddressSet:(id)fp12 inMode:(int)fp16 toArray:(id)fp20;
- (id)_group;
- (BOOL)_canEdit;
- (void)_bookmarkDelegateUpdated;
- (id)_containingDelegate;
- (void)_closeWebTask;
- (id)debugDictionary;
@end

@interface OWBookmarkController : NSResponder <OWBookmarkObserver>
{
    NSOutlineView *outlineView;
    OAContextButton *bookmarkContextButton;
    NSDateFormatter *dateFormatter;
    OWBookmarksController *nonretainedBookmarksController;
    NSButton *newFolderButton;
    OASearchField *searchField;
    OWBookmarkGroup *displayedBookmarkGroup;
    int _newItemContext;
    NSMutableArray *displayedBookmarks;
    NSArray *currentSortOrderings;
    NSArray *currentSortedChildren;
    OWBookmark *nonretainedCurrentParent;
    int searchMode;
    id searchPattern;
    struct {
        unsigned int needsReload:1;
        unsigned int suppressUpdate:1;
        unsigned int outlineIncludesStatusBadges:1;
        unsigned int outlineSelectionIsChanging:1;
    } flags;
    struct _OFWeakRetainIvars weakRetainIvars;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)sizeDidChange;
- (void)reloadDisplayedBookmarks;
- (void)expandAndSelectBookmark:(id)fp8;
- (int)expandBookmarkInCurrentGroup:(id)fp8 andSelect:(BOOL)fp12;
- (void)setDisplayedBookmarkGroup:(id)fp8;
- (id)displayedBookmarkGroup;
- (void)newBookmarkFolder:(id)fp8;
- (void)newBookmarkSeparator:(id)fp8;
- (void)newBookmark:(id)fp8;
- (void)editLabel:(id)fp8;
- (void)editAddress:(id)fp8;
- (void)deleteBookmark:(id)fp8;
- (void)outlineViewSingleClick:(id)fp8;
- (void)outlineViewDoubleClick:(id)fp8;
- (void)save:(id)fp8;
- (void)search:(id)fp8;
- (void)willHide;
- (void)willShow;
- (id)undoManager;
- (id)windowWillReturnUndoManager:(id)fp8;
- (id)omniFindControllerTarget;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)outlineView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 byItem:(id)fp20;
- (id)outlineView:(id)fp8 itemForPersistentObject:(id)fp12;
- (id)outlineView:(id)fp8 persistentObjectForItem:(id)fp12;
- (BOOL)outlineView:(id)fp8 writeItems:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)outlineView:(id)fp8 validateDrop:(id)fp12 proposedItem:(id)fp16 proposedChildIndex:(int)fp20;
- (BOOL)outlineView:(id)fp8 acceptDrop:(id)fp12 item:(id)fp16 childIndex:(int)fp20;
- (void)outlineView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (BOOL)outlineView:(id)fp8 shouldEditTableColumn:(id)fp12 item:(id)fp16;
- (BOOL)outlineView:(id)fp8 shouldExpandItem:(id)fp12;
- (void)outlineViewSelectionDidChange:(id)fp8;
- (void)outlineViewItemDidExpand:(id)fp8;
- (void)outlineViewItemDidCollapse:(id)fp8;
- (BOOL)tableView:(id)fp8 writeRows:(id)fp12 toPasteboard:(id)fp16;
- (id)tableViewDefaultColumnIdentifiers:(id)fp8;
- (id)tableView:(id)fp8 menuStringForColumn:(id)fp12;
- (BOOL)tableView:(id)fp8 shouldAllowTogglingColumn:(id)fp12;
- (BOOL)tableViewAllowsColumnAutosizing:(id)fp8;
- (void)tableView:(id)fp8 didActivateColumn:(id)fp12;
- (void)tableView:(id)fp8 didDeactivateColumn:(id)fp12;
- (unsigned int)tableView:(id)fp8 draggingSourceOperationMaskForLocal:(BOOL)fp12;
- (BOOL)tableView:(id)fp8 addItemsFromPasteboard:(id)fp12;
- (void)tableView:(id)fp8 deleteRows:(id)fp12;
- (BOOL)tableViewShouldEditNextItemWhenEditingEnds:(id)fp8;
- (id)tableView:(id)fp8 contextMenuForRow:(int)fp12 column:(int)fp16;
- (id)outlineView:(id)fp8 toolTipForCell:(id)fp12 rect:(struct _NSRect *)fp16 tableColumn:(id)fp20 item:(id)fp24 mouseLocation:(struct _NSPoint)fp28;
- (BOOL)tableView:(id)fp8 itemAtRow:(int)fp12 matchesPattern:(id)fp16;
- (void)tableView:(id)fp8 didClickTableColumn:(id)fp12;
- (void)tableView:(id)fp8 didDragTableColumn:(id)fp12;
- (id)menuForContextControl:(id)fp8;
- (id)targetViewForContextControl:(id)fp8;
- (void)bookmarksContextMenuOpenInNewWindow:(id)fp8;
- (void)bookmarksContextMenuOpenInCurrentWindow:(id)fp8;
- (void)bookmarksContextMenuOpenInNewTab:(id)fp8;
- (void)bookmarksContextMenuEditLabel:(id)fp8;
- (void)bookmarksContextMenuEditAddress:(id)fp8;
- (void)bookmarksContextMenuCheckForChanges:(id)fp8;
- (void)bookmarksContextMenuSetViewed:(id)fp8;
- (void)bookmarksContextMenuSetUnviewed:(id)fp8;
- (void)bookmarksContextMenuSetAlive:(id)fp8;
- (void)bookmarksContextMenuSetUnreachable:(id)fp8;
- (void)bookmarksContextMenuDelete:(id)fp8;
- (void)bookmarkNeedsRedisplay:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;

@end

@interface OWBookmarkController (Private)
+ (id)_changedBookmarkBackgroundColor;
+ (id)_unreachableBookmarkBackgroundColor;
- (void)_reloadBookmarksNotification:(id)fp8;
- (void)_controlTintChanged:(id)fp8;
- (id)_selectedBookmarks;
- (id)_realParentBookmarkForOutlineParentItem:(id)fp8;
- (void)_rebuildSortOrderings;
- (id)_bookmarkContextButtonMenu;
- (void)_editColumn:(id)fp8 ofItem:(id)fp12;
- (void)_insertNewChildBookmark:(id)fp8 andEditColumn:(id)fp12;
- (void)_rememberExpansionForBookmark:(id)fp8 inGroup:(id)fp12;
- (void)_updateEditor;
- (void)_restoreExpansionForBookmark:(id)fp8 inGroup:(id)fp12;
- (void)_rememberExpansions;
- (void)_restoreExpansions;
- (void)_updateSortIndicators;
- (BOOL)_shouldIncludeSearchMode:(int)fp8;
- (void)_rebuildSearchMenu;
- (BOOL)_isSearching;
- (void)_beginSearch:(id)fp8;
- (void)_clearSearch;
- (id)_searchResults;
- (void)_willShowBookmarks;
- (void)_willHideBookmarks;
- (unsigned int)_validateDropOfBookmarks:(id)fp8 intoParent:(id)fp12;
@end

@interface OWBookmarkCreator : OFObject
{
    int mode;
    OWBrowserController *browserController;
    OWBookmark *bookmark;
    BOOL userRequestedBookmark;
    NSWindow *creatorSheet;
    NSTextField *messageField;
    NSTextField *nameField;
    OWBookmarkFolderPopUpController *folderPopUpController;
    NSButton *dontShowAgainButton;
    NSButton *okButton;
    NSTextView *notesView;
}

+ (void)createBookmark:(id)fp8 withBrowserController:(id)fp12 prompt:(BOOL)fp16 userRequested:(BOOL)fp20;
- (void)dealloc;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)showHelp:(id)fp8;

@end

@interface OWBookmarkCreator (Private)
- (id)_initWithBookmark:(id)fp8 andBrowserController:(id)fp12 userRequested:(BOOL)fp16;
- (void)_run;
- (void)_creatorSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
@end

@interface OWBookmarkCreator (NotificationsDelegatesDatasources)
- (BOOL)textView:(id)fp8 doCommandBySelector:(SEL)fp12;
@end

@interface OWBookmarkDelegate : NSObject <OWBookmarkDataSourceOwner>
{
    NSString *className;
    NSBundle *bundle;
    NSDictionary *dataSourceDescription;
    NSDictionary *archiveDictionary;
    id _dataSource;
    OWBookmark *topBookmark;
}

+ (void)initialize;
+ (id)delegates;
+ (id)newDelegateForClassName:(id)fp8 withArchiveDictionary:(id)fp12;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
- (id)initWithClassName:(id)fp8 bundle:(id)fp12 description:(id)fp16 archiveDictionary:(id)fp20;
- (void)dealloc;
- (id)className;
- (id)bundle;
- (id)dataSourceDescription;
- (id)name;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
- (int)compareName:(id)fp8;
- (id)bookmarks;
- (id)controlView;
- (void)updateUI;
- (id)archiveDictionary;
- (id)icon;
- (BOOL)isReadOnly;
- (void)addressDidChange;
- (void)loadDeferredInfo;
- (BOOL)canDelete;
- (void)deleteBookmarks:(id)fp8;
- (BOOL)canDeleteCollection;
- (BOOL)overridesChangeChecking;
- (void)checkForUpdates;
- (BOOL)canEditAttributes;
- (BOOL)shouldBeOpened;
- (id)labelColumnTitle;
- (id)excludedSearchModes;
- (void)setTopBookmark:(id)fp8;
- (id)topBookmark;

@end

@interface OWBookmarkDelegate (Private)
- (id)_dataSource;
- (int)compareByName:(id)fp8;
@end

@interface OWBookmarkDelegate (NotificationsDelegatesDatasources)
@end

@interface OWBookmarkEditor : OWSiteEditorController <OWBookmarkObserver>
{
    NSTextField *label;
    NSTextField *url;
    NSTextField *lastChecked;
    NSTextField *visitCountField;
    NSTextField *lastVisitedField;
    NSTextField *shortcutField;
    NSPopUpButton *bookmarkStatusPopUp;
    NSPopUpButton *checkingFrequencyPopUp;
    NSTextView *annotationTextView;
    NSButton *checkNowButton;
    NSView *multipleSelectionView;
    NSView *editorView;
    NSArray *bookmarks;
    OWBookmark *bookmark;
    NSTextStorage *plainTextStorage;
    struct _OFWeakRetainIvars weakRetainIvars;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (id)bookmarks;
- (void)setBookmarks:(id)fp8;
- (void)updateUI;
- (void)setKeyword:(id)fp8;
- (void)labelEntry:(id)fp8;
- (void)urlEntry:(id)fp8;
- (void)changeCheckPopup:(id)fp8;
- (void)setStatus:(id)fp8;
- (void)checkNow:(id)fp8;
- (void)addressDidChange;
- (void)bookmarkNeedsRedisplay:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;

@end

@interface OWBookmarkEditor (Private)
- (void)_ensureAnnotationIsSet;
@end

@interface OWBookmarkEditor (NotificationsDelegatesDatasources)
- (void)textDidEndEditing:(id)fp8;
- (BOOL)textView:(id)fp8 clickedOnLink:(id)fp12 atIndex:(unsigned int)fp16;
@end

@interface OWBookmarkFolderPopUpController : NSObject
{
    id delegate;
    NSPopUpButton *bookmarkFolderPopUp;
}

+ (id)defaultBookmarkFolder;
- (void)dealloc;
- (void)awakeFromNib;
- (id)bookmarkFolder;
- (void)setBookmarkFolder:(id)fp8;
- (void)setListensForBookmarkChanges:(BOOL)fp8;
- (void)chooseBookmarkFolder:(id)fp8;

@end

@interface OWBookmarkFolderPopUpController (Private)
- (void)_rebuildFolderPopUp;
- (void)_addBookmark:(id)fp8 toMenu:(id)fp12 withIndentationLevel:(unsigned int)fp16;
@end

@interface OWBookmarkFolderPopUpController (NotificationsDelegatesDatasources)
- (void)bookmarksDidChange:(id)fp8;
@end

@interface OWBookmarkGroup : NSObject
{
    NSString *_label;
    NSImage *_icon;
    OWBookmarks *_bookmarks;
    OWBookmark *_bookmark;
    NSArray *_sortOrderings;
    NSMutableSet *_expandedBookmarkIds;
    NSDictionary *_bookmarkAlias;
    struct {
        unsigned int canDelete:1;
        unsigned int readOnly:1;
    } flags;
}

+ (void)initialize;
+ (void)loadGroups;
+ (id)personalGroups;
+ (void)addPersonalGroup:(id)fp8 atIndex:(unsigned int)fp12;
+ (void)removePersonalGroup:(id)fp8;
+ (void)removePersonalGroupAtIndex:(unsigned int)fp8 justMoving:(BOOL)fp12;
+ (id)bookmarkGroupsFromPasteboard:(id)fp8;
+ (void)copyBookmarkGroups:(id)fp8 toPasteboard:(id)fp12;
+ (void)saveGroups;
+ (id)separatorGroup;
+ (id)groupForBookmark:(id)fp8;
+ (id)groupContainingBookmark:(id)fp8;
- (id)initWithAddress:(id)fp8 readOnly:(BOOL)fp12;
- (id)initWithArchiveDictionary:(id)fp8;
- (void)takeValuesFromDictionary:(id)fp8;
- (id)archiveDictionary;
- (id)initWithBookmark:(id)fp8;
- (void)dealloc;
- (id)label;
- (void)setLabel:(id)fp8;
- (id)icon;
- (void)setIcon:(id)fp8;
- (id)bookmarks;
- (id)bookmark;
- (void)setBookmark:(id)fp8;
- (id)children;
- (BOOL)isReadOnly;
- (BOOL)isSeparator;
- (BOOL)isCollection;
- (BOOL)canDelete;
- (void)deleteBookmarks:(id)fp8;
- (BOOL)canDeleteCollection;
- (id)delegateName;
- (id)uniqueName;
- (id)labelColumnTitle;
- (id)excludedSearchModes;
- (id)sortOrderings;
- (void)setSortOrderings:(id)fp8;
- (BOOL)bookmarkWasExpanded:(id)fp8;
- (void)setExpanded:(BOOL)fp8 forBookmark:(id)fp12;
- (void)flushExpansions;

@end

@interface OWBookmarkGroup (Private)
+ (id)_addGroupWithArchiveDictionary:(id)fp8;
+ (void)_loadGroupsFromDictionary:(id)fp8;
+ (void)_loadPersonalGroups;
+ (void)_mainThreadGroupsDidLoad;
+ (void)_autosaveGroups;
+ (void)_saveGroupsFromAutosave;
- (id)_init;
- (void)_setBookmarks:(id)fp8;
- (BOOL)_setIconByContentType:(id)fp8;
- (BOOL)_delegateHandlesDeletion;
- (void)_bookmarksDidLoad:(id)fp8;
- (void)_bookmarksSyncChange:(id)fp8;
@end

@interface OWBookmarkGroupController : NSResponder
{
    NSTableView *groupTableView;
    OWBookmarkController *bookmarkController;
    OWBookmarksController *nonretainedBookmarksController;
    OAContextButton *contextButton;
    NSImage *barImage;
    NSMutableArray *groups;
    OWBookmarkGroup *rootedGroup;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)sizeDidChange;
- (void)groupTableSingleClick:(id)fp8;
- (void)groupTableDoubleClick:(id)fp8;
- (void)rootAtGroup:(id)fp8;
- (id)selectedGroup;
- (void)selectGroup:(id)fp8;
- (void)reloadGroups;
- (void)selectGroupWithDelegateName:(id)fp8;
- (id)selectedGroupDelegateName;
- (id)menuForContextControl:(id)fp8;
- (id)targetViewForContextControl:(id)fp8;
- (void)toggleSmartGroup:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableView:(id)fp8 deleteRows:(id)fp12;
- (unsigned int)tableView:(id)fp8 validateDrop:(id)fp12 proposedRow:(int)fp16 proposedDropOperation:(int)fp20;
- (BOOL)tableView:(id)fp8 acceptDrop:(id)fp12 row:(int)fp16 dropOperation:(int)fp20;
- (BOOL)tableView:(id)fp8 shouldSelectRow:(int)fp12;
- (void)tableViewSelectionDidChange:(id)fp8;
- (BOOL)tableView:(id)fp8 writeRows:(id)fp12 toPasteboard:(id)fp16;
- (id)tableView:(id)fp8 contextMenuForRow:(int)fp12 column:(int)fp16;

@end

@interface OWBookmarkGroupController (Private)
- (void)_controlTintChanged:(id)fp8;
@end

@interface OWBookmarkImporter : OFObject
{
    OWBookmarks *bookmarks;
    NSWindow *window;
    NSPopUpButton *browserPopUp;
    NSTextField *bookmarkPathField;
}

+ (void)initialize;
+ (void)importIntoBookmarks:(id)fp8;
+ (id)appIdentifierForBookmarksContentType:(id)fp8;
- (void)dealloc;
- (void)awakeFromNib;
- (void)import:(id)fp8;
- (void)cancel:(id)fp8;
- (void)importOther:(id)fp8;
- (void)chooseImportSource:(id)fp8;
- (void)showHelp:(id)fp8;

@end

@interface OWBookmarkImporter (Private)
+ (id)_popupIconForPath:(id)fp8;
- (id)_initWithBookmarks:(id)fp8;
- (void)_show;
- (void)_importBookmarkFile:(id)fp8 fromApplication:(id)fp12 label:(id)fp16;
@end

@interface OWBookmarkMenuController : OFObject <OWBookmarkObserver>
{
    OWBookmarks *bookmarks;
    struct _NSMapTable *bookmarkToMenuItemMapping;
    id favoritesMenuItem;
    unsigned int staticItemCount;
    NSMutableArray *itemsWithKeyboardShortcuts;
    struct _OFWeakRetainIvars weakRetainIvars;
}

+ (void)initialize;
+ (void)didLoad;
+ (void)controllerStartedRunning:(id)fp8;
+ (void)controllerWillTerminate:(id)fp8;
+ (id)sharedBookmarkMenuController;
- (id)init;
- (void)dealloc;
- (void)bookmarkNeedsRedisplay:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;

@end

@interface OWBookmarkMenuController (Private)
- (void)_bookmarkSelected:(id)fp8;
- (void)_openInTabs:(id)fp8;
- (void)_synchronizeBookmarks:(id)fp8;
- (void)_addBookmark:(id)fp8 toMenu:(id)fp12;
- (id)_insertFavoritesMenuItem;
- (void)_updateMenuForBookmark:(id)fp8;
- (unsigned int)_extraEntriesForMenuItems:(id)fp8;
- (void)_removeChildItemsFromMenu:(id)fp8 startingWithIndex:(unsigned int)fp12;
- (void)_assignKeyboardShortcuts;
- (void)_removeAllMenus;
- (void)_setupBookmarksMenu;
- (id)_bookmarksMenu;
- (id)_favoritesMenu;
- (id)_bookmarkChildrenSeparator;
- (void)_personalBookmarksLoaded:(id)fp8;
- (void)_faviconPreferenceDidChange:(id)fp8;
- (void)_updateBookmarkSyncMenuItem:(id)fp8;
@end

@interface OWBookmarkRelocationController : NSObject <OWTarget, OFWeakRetain>
{
    NSTextField *statusField;
    NSProgressIndicator *progressView;
    NSButton *cancelButton;
    OWAddress *destinationAddress;
    OWAddress *currentAddress;
    NSMutableArray *creationStack;
    int copyingFiles;
    struct {
        unsigned int isChecking:1;
        unsigned int isCreating:1;
        unsigned int isHeading:1;
        unsigned int success:1;
        unsigned int doReload:1;
        unsigned int isCancelled:1;
        unsigned int isBusy:1;
        unsigned int isError:1;
    } flags;
}

+ (void)didLoad;
+ (id)sharedController;
- (id)init;
- (void)dealloc;
- (void)controllerStartedRunning:(id)fp8;
- (void)controllerWillTerminate:(id)fp8;
- (void)serverSyncLocationChanged:(id)fp8;
- (void)cancel:(id)fp8;
- (id)targetContentType;
- (id)targetTypeFormatString;
- (id)parentContentInfo;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (void)pipelineDidEnd:(id)fp8;
- (id)promptViewForPipeline:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (id)strongRetain;
- (void)invalidateWeakRetains;

@end

@interface OWBookmarkRelocationController (Private)
- (void)_updateUI;
- (void)_copyToLocal;
- (void)_startCopyToServer;
- (void)_done:(id)fp8;
- (void)_performCheck;
- (void)_didCheck;
- (void)_performCreate;
- (void)_didCreate;
- (void)_performHead;
- (void)_alreadyExistsSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_didHead;
- (void)_updateStatusForCopies;
- (void)_didCopy:(id)fp8;
- (void)_performCopyToServer;
- (void)_updateStatusForReloads;
- (void)_didReload:(id)fp8;
- (void)_performReloadFromServer;
@end

@interface OWBookmarkSharingController : NSObject
{
    NSLock *lock;
    NSNetService *netService;
    ONTCPSocket *listeningSocket;
    NSString *sharedName;
    ONUDPSocket *sendSocket;
    CDAnonymousStruct1 flags;
}

+ (id)sharedBookmarkSharingController;
+ (void)didLoad;
+ (void)controllerStartedRunning:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)publishedBookmarksWillChange;
- (void)netServiceWillPublish:(id)fp8;
- (void)netService:(id)fp8 didNotPublish:(id)fp12;
- (void)netServiceDidStop:(id)fp8;

@end

@interface OWBookmarkSharingController (Private)
- (void)_publishedBookmarksGroupEnabledChanged:(id)fp8;
- (void)_bookmarksDidLoad:(id)fp8;
- (void)_server;
- (void)_updateSharing;
- (void)_writeBookmarksToSocket:(id)fp8;
- (void)_applicationWillTerminate:(id)fp8;
@end

@interface OWBookmarkSignatureProcessor : OWProcessor
{
    OWContent *bookmarkDocument;
    OWObjectStream *outputObjectStream;
}

+ (void)didLoad;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)process;
- (void)processEnd;
- (void)processAbort;

@end

@interface OWBookmarkSignatureProcessor (privateSignatureGeneration)
- (unsigned long)wordCountForHTML:(id)fp8;
@end

@interface OWBookmarkWell : NSImageView <OWBookmarkObserver>
{
    NSTextField *labelField;
    OWBookmark *_bookmark;
    struct _OFWeakRetainIvars weakRetainIvars;
}

- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (id)bookmark;
- (void)setBookmark:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)setEnabled:(BOOL)fp8;
- (void)bookmarkNeedsRedisplay:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;

@end

@interface OWBookmarkWell (Private)
- (void)_updateLabel;
@end

@interface OWBookmarkWell (NotificationsDelegatesDatasources)
@end

@interface OWBookmarks : OFObject <OWTarget, OFWeakRetain, FileSaverController>
{
    OWAddress *localCacheAddress;
    OWAddress *address;
    OWBookmark *_topBookmark;
    OWBookmarks *_serverVersion;
    OWBookmarks *_lastSeenServerVersion;
    NSUndoManager *undoManager;
    struct {
        unsigned int readOnly:1;
        unsigned int unsavedChanges:1;
        unsigned int lostData:1;
        unsigned int registered:1;
        unsigned int errorLoading:1;
        unsigned int isSaving:1;
        unsigned int isSavingToServer:1;
        unsigned int isPersonalBookmarks:1;
        unsigned int shouldAttemptToLoadOW4Bookmarks:1;
        unsigned int shouldAttemptToLoadSampleBookmarks:1;
        unsigned int didAttemptToFindSpecialBookmarks:1;
        unsigned int shouldAttemptToSaveImmediatelyAfterMerge:1;
        unsigned int registeredForFileChanges:1;
        unsigned int disableUndoRegistration:1;
        unsigned int shouldCreateLocalCache:1;
        unsigned int isCreatingServerFile:1;
        unsigned int synchedYet:1;
        unsigned int lastSynchSuccessful:1;
        unsigned int usingValidator:1;
        unsigned int isReloading:1;
        unsigned int wasTruncated:1;
        unsigned int preconditionFailed:1;
    } flags;
    NSConditionLock *waitForLoadLock;
    OFDelayedEvent *autosaveEvent;
    OFDelayedEvent *autosynchronizeEvent;
    ODDifferenceEngine *differences;
    NSArray *validator;
    NSDate *fileModificationDate;
    struct _OFWeakRetainIvars weakRetainIvars;
}

+ (void)initialize;
+ (void)synchronizeAllBookmarks;
+ (void)updateDockStatus;
+ (id)commonBookmarksBaseAddress;
+ (id)personalBookmarks;
+ (id)favoritesBookmarks;
+ (id)publishedBookmarks;
+ (id)sharedUndoManager;
+ (id)allOpenBookmarks;
+ (id)openBookmarksWithAddress:(id)fp8;
+ (id)bookmarksWithAddress:(id)fp8;
+ (id)bookmarksWithAddress:(id)fp8 readOnly:(BOOL)fp12;
+ (id)bookmarksContainingBookmark:(id)fp8;
+ (id)bookmarksInAllOpenBookmarksWithStatus:(int)fp8;
- (void)dealloc;
- (id)address;
- (BOOL)isReadOnly;
- (BOOL)willBeReadOnlyAfterLoad;
- (BOOL)isPersonalBookmarks;
- (BOOL)loadIsComplete;
- (BOOL)hasUnsavedChanges;
- (BOOL)shouldAutosave;
- (BOOL)hasPersistentObjectIds;
- (id)topBookmark;
- (id)undoManager;
- (void)waitForLoadToComplete;
- (void)notifyWhenLoadIsCompleteObject:(id)fp8 selector:(SEL)fp12;
- (BOOL)canSynchronize;
- (BOOL)isSynchronizing;
- (void)synchronizeWithServer;
- (void)synchronizeNow:(id)fp8;
- (id)lastSynchronizationDate;
- (BOOL)lastSynchronizationSuccessful;
- (void)addAddressCompletionItems:(id)fp8;
- (int)nextBookmarkId;
- (void)setNextBookmarkId:(int)fp8;
- (id)bookmarkWithId:(int)fp8;
- (void)bookmarkWillChange:(id)fp8;
- (void)bookmarkDidInsert:(id)fp8;
- (void)bookmarkWillDelete:(id)fp8;
- (void)bookmarkNeedsRedisplay:(id)fp8;
- (void)bookmarkNeedsSave:(id)fp8;
- (void)bookmark:(id)fp8 didRemoveChild:(id)fp12;
- (void)save;
- (void)_setNewAddress:(id)fp8;
- (void)saveAsNewAddress:(id)fp8;
- (void)reloadFromNewAddress:(id)fp8;
- (unsigned int)countOfBookmarksOfStatus:(int)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;
- (id)targetContentType;
- (id)targetAlternateContentTypes;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (id)targetTypeFormatString;
- (id)parentContentInfo;
- (void)pipelineDidEnd:(id)fp8;
- (void)fileSavedSuccessfully:(id)fp8;
- (void)newVersionLoaded:(id)fp8;
- (void)fileSavedUnsuccessfully:(id)fp8 withReason:(id)fp12;

@end

@interface OWBookmarks (Private)
+ (id)_getBookmarkRelocations;
+ (id)_bookmarksRelocationForAddress:(id)fp8;
+ (void)_bookmarksRelocatedFromAddress:(id)fp8 toAddress:(id)fp12;
+ (BOOL)_bookmarksExistAtAddress:(id)fp8;
+ (void)_mainThreadUpdateDockStatus;
- (id)_initWithAddress:(id)fp8 readOnly:(BOOL)fp12 isPersonal:(BOOL)fp16 isInternal:(BOOL)fp20;
- (void)_loadFromServerOnlyIfNotMatchingValidator:(id)fp8;
- (void)_loadFromLocalCache;
- (void)_loadOW4Bookmarks;
- (void)_loadSampleBookmarks;
- (void)controllerRequestsTerminate:(id)fp8;
- (void)_save_onlyToCache:(BOOL)fp8;
- (void)autosave;
- (void)cancelAutosaveEvent;
- (void)autosynchronize;
- (void)cancelAutosynchronizeEvent;
- (void)_flushCaches:(id)fp8;
- (void)_updateDefaultChangeChecking:(id)fp8;
- (id)_oldStyleFavoritesBookmarkInPersonalBookmarks;
- (id)_oldStylePublishedBookmarkInPersonalBookmarks;
- (void)_createEmptyTopBookmark;
- (void)_takeSpecialFolderFromPersonalBookmarks:(id)fp8;
- (void)_updateValidator;
- (void)_updateFileModificationDate;
- (BOOL)_hasFileModificationDateChanged;
- (id)_lastSeenFilename;
- (void)_saveServerLastSeen;
- (void)_removeServerLastSeen;
- (BOOL)_lastSeenExists;
- (void)_fetchLastSeenVersion;
- (void)_didFetchLastSeen:(id)fp8;
- (void)_didMerge;
- (void)_setValidator:(id)fp8;
- (BOOL)_getLocalCache;
- (void)_serverUnreachableSoResetToStandardAddress;
- (void)_setTopBookmark:(id)fp8;
@end

@interface OWBookmarksController : NSResponder
{
    OWBrowserController *browserController;
    NSView *contentView;
    NSView *mainView;
    NSWindow *nibWindow;
    OASplitView *groupsAndBookmarksSplitView;
    OWBookmarkGroupController *groupController;
    OWBookmarkController *bookmarkController;
    NSOutlineView *bookmarkOutlineView;
    NSView *groupsSplitViewSubview;
    NSView *bookmarksSplitViewSubview;
    OAStackView *standaloneStackView;
    OWSiteEditor *standaloneSiteEditor;
    OWBookmarkGroup *rootedGroup;
    OWBookmark *bookmarkToExpand;
    struct _NSSize oldMinWindowSize;
    struct _NSSize oldWindowSize;
    struct {
        unsigned int editorVisible:1;
        unsigned int windowIsAnimating:1;
        unsigned int loadedNib:1;
        unsigned int shouldEditExpandedBookmark:1;
        unsigned int shouldInspectExpandedBookmark:1;
    } flags;
}

+ (void)initialize;
+ (id)standaloneController;
+ (id)standaloneControllerCreateIfNone:(BOOL)fp8;
+ (id)standaloneControllerForBookmarkGroup:(id)fp8;
+ (id)standaloneControllerForBookmarkFolder:(id)fp8;
- (id)initWithBookmarkGroup:(id)fp8 inBrowser:(id)fp12;
- (void)dealloc;
- (id)browserController;
- (id)documentView;
- (void)makeKeyAndOrderFront;
- (id)window;
- (id)siteEditor;
- (void)selectPersonalBookmarksGroup;
- (void)selectGroup:(id)fp8;
- (void)selectGroupWithDelegateName:(id)fp8;
- (id)selectedGroupDelegateName;
- (id)importBookmarksFromAddress:(id)fp8 withLabel:(id)fp12 readOnly:(BOOL)fp16;
- (void)togglePageInfo:(id)fp8;
- (void)toggleSitePreferences:(id)fp8;
- (void)setStandaloneEditorVisible:(BOOL)fp8;
- (void)save:(id)fp8;
- (BOOL)isVisible;
- (void)willHide;
- (void)willShow;
- (void)openBookmarks:(id)fp8 inBrowser:(id)fp12 replaceCurrentTab:(BOOL)fp16 expandFolders:(BOOL)fp20;
- (void)openBookmarks:(id)fp8 inBrowser:(id)fp12 replaceCurrentTab:(BOOL)fp16 expandFolders:(BOOL)fp20 activateFirstTab:(BOOL)fp24;
- (void)setBookmarkToExpandAndSelect:(id)fp8 editLabel:(BOOL)fp12 showInspector:(BOOL)fp16;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (void)splitView:(id)fp8 resizeSubviewsWithOldSize:(struct _NSSize)fp12;
- (void)splitViewDidResizeSubviews:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (id)undoManager;
- (id)windowWillReturnUndoManager:(id)fp8;
- (id)subviewsForStackView:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;

@end

@interface OWBookmarksController (Private)
- (void)_loadNib;
- (id)_standaloneSiteEditor;
- (BOOL)_standaloneEditorVisible;
- (void)_recalculateWindowSize;
- (void)_expandAndSelectBookmark;
@end

@interface OWBookmarksPageProcessor : OWAddressProcessor
{
}

+ (void)didLoad;
+ (id)processorQueue;
- (void)process;

@end

@interface OWBookmarksToSGMLProcessor : OWObjectStreamProcessor
{
    OWObjectStream *outputStream;
}

+ (void)didLoad;
- (void)startProcessing;
- (void)dealloc;
- (void)process;
- (void)processAbort;

@end

@interface OWBookmarksToSGMLProcessor (Private)
+ (void)_setupDTD;
- (id)_intervalStringForDate:(id)fp8;
- (void)_processSingleBookmark:(id)fp8 hasChildren:(BOOL)fp12;
- (void)_processBookmark:(id)fp8 isTopBookmark:(BOOL)fp12;
@end

@interface OWBrowserController : NSResponder <OWSpringLoadHelper>
{
    OWBrowserWindow *window;
    NSBox *addressBox;
    NSView *tabPlaceholderView;
    NSBox *locationFieldBox;
    NSBox *chasingArrowsBox;
    NSView *searchFieldContainerView;
    OASearchField *searchField;
    OWPipelineStatusDisplayer *pipelineStatusDisplayer;
    NSView *chasingArrowsView;
    NSView *chasingArrowsProgressIndicator;
    OWLocationField *locationField;
    NSView *addressFieldsView;
    NSView *overrideEncodingView;
    OAHierarchicalPopUpController *overrideEncodingPopUpController;
    OWToolbarButton *goBackButton;
    OWToolbarButton *goForthButton;
    NSPopUpButton *goBackPopUpButton;
    NSPopUpButton *goForthPopUpButton;
    OWToolbarButton *previousMarkButton;
    OWToolbarButton *nextMarkButton;
    NSPopUpButton *previousMarkPopUpButton;
    NSPopUpButton *nextMarkPopUpButton;
    OWDragTargetToolbarButton *bookmarksButton;
    OWWorkspaceWindow *workspaceWindow;
    NSMutableArray *tabs;
    OWTab *activeTab;
    NSView *inactiveTabHolderView;
    NSImage *siteEditorToolbarIcon;
    OAHierarchicalPopUpController *overrideEncodingDropDownController;
    OWFavoritesView *favoritesView;
    OAStackView *stackView;
    OWBookmarksController *bookmarksController;
    OWSiteEditor *siteEditor;
    OWTabSwitcherController *tabSwitcherController;
    NSToolbar *toolbar;
    struct _NSSize savedWindowSize;
    struct _NSSize oldMinWindowSize;
    struct _NSSize oldWindowSize;
    OWTab *nonretainedUnrequestedPopUpOwner;
    NSDate *lastExpensiveUIValidationDate;
    OWSpringLoadHelper *springLoadHelper;
    NSUndoManager *windowUndoManager;
    OWBrowserPrintAccessoryController *printAccessoryController;
    double loadStartTimeInterval;
    double lastLoadTime;
    struct rusage loadStartUsage;
    struct rusage lastLoadUsage;
    struct {
        unsigned int canGoBack:1;
        unsigned int canGoForth:1;
        unsigned int canGoToStartPage:1;
        unsigned int canGoToPreviousMark:1;
        unsigned int canGoToNextMark:1;
        unsigned int canStop:1;
        unsigned int userIsEditingURLField:1;
        unsigned int canAutoFill:1;
        unsigned int hasRSSFeed:1;
        unsigned int hasCookies:1;
        unsigned int hasSitePreferences:1;
        unsigned int urlIsSecure:1;
        unsigned int toolbarsNeedRedisplay;
        unsigned int toolbarsVisible:1;
        unsigned int toolbarIncludesNavigationBar:1;
        unsigned int toolbarIncludesAddress:1;
        unsigned int toolbarIncludesSitePreferences:1;
        unsigned int toolbarIncludesFavoritesView:1;
        unsigned int addressIsInNavigationBar:1;
        unsigned int addressInNavigationBarIsLabelOnly:1;
        unsigned int addressTemporarilyNeeded:1;
        unsigned int searchFieldIsInNavigationBar:1;
        unsigned int searchFieldTemporarilyNeeded:1;
        unsigned int stackViewShowsAddress:1;
        unsigned int stackViewShowsFavorites:1;
        unsigned int stackViewShowsStatusBar:1;
        unsigned int stackViewShowsEditor:1;
        unsigned int toolbarIsVisible:1;
        unsigned int statusBarVisible:1;
        unsigned int editorIsVisible:1;
        unsigned int editorShouldBeVisibleForNormalPages:1;
        unsigned int alreadyForwardingKeyDownEvent:1;
        unsigned int alreadyFindingUndoManager:1;
        unsigned int windowIsAnimating:1;
        unsigned int windowWasMiniaturized:1;
        unsigned int windowIsClosing:1;
        unsigned int performanceTesting:1;
    } flags;
    unsigned int lastDestinationDragOperation;
    int dragNumber;
}

+ (void)initialize;
+ (id)defaultStartPageAddress;
+ (id)startPageAddress;
+ (void)setStartPageAddress:(id)fp8;
+ (int)commandClickBehaviorForModifierFlags:(unsigned int)fp8;
+ (int)commandClickBehaviorForModifierFlags:(unsigned int)fp8 defaultBehavior:(int)fp12;
- (id)initAtPoint:(struct _NSPoint)fp8;
- (id)initAtPoint:(struct _NSPoint)fp8 withTabs:(id)fp16 createNewTab:(BOOL)fp20;
- (id)initWithStateDictionary:(id)fp8;
- (id)init;
- (void)dealloc;
- (BOOL)performanceTesting;
- (void)setPerformanceTesting:(BOOL)fp8;
- (double)lastLoadTime;
- (struct rusage)lastLoadUsage;
- (id)window;
- (void)makeKeyAndOrderFront;
- (void)orderWindowBehindMainWindow:(BOOL)fp8;
- (void)closeWindow;
- (void)closeWindowUnconditionally;
- (id)documentTitle;
- (void)setWindowTitle:(id)fp8;
- (void)hide;
- (BOOL)windowWasMiniaturized;
- (void)showObscuredByMainWindow:(BOOL)fp8;
- (id)workspaceWindow;
- (void)setWorkspaceWindow:(id)fp8;
- (id)stateDictionary;
- (void)addTab:(id)fp8 atIndex:(unsigned int)fp12;
- (void)removeTab:(id)fp8 createIfNone:(BOOL)fp12;
- (id)newTabAtIndex:(unsigned int)fp8 activate:(BOOL)fp12;
- (void)newTabWithAddress:(id)fp8 activate:(BOOL)fp12;
- (void)newTabWithStateDictionary:(id)fp8 atIndex:(unsigned int)fp12;
- (id)documentView;
- (id)scrollView;
- (void)moveTab:(id)fp8 toIndex:(unsigned int)fp12;
- (id)activeTab;
- (id)tabs;
- (void)willLoadPage:(id)fp8;
- (void)startedLoadingPage:(id)fp8;
- (void)didLoadPage:(id)fp8;
- (id)pageAddressTextField;
- (BOOL)canGoToStartPage;
- (BOOL)canGoBack;
- (BOOL)canGoForth;
- (BOOL)canGoToPreviousMark;
- (BOOL)canGoToNextMark;
- (BOOL)canMarkPage;
- (BOOL)canStop;
- (BOOL)canExpandZoomedEditor;
- (void)setClickToAddress:(id)fp8;
- (void)resetPageAddressComboBox;
- (void)browserGoBack:(id)fp8;
- (void)goForth:(id)fp8;
- (void)markPage:(id)fp8;
- (void)nextMark:(id)fp8;
- (void)previousMark:(id)fp8;
- (void)selectNextAnchor:(id)fp8;
- (void)selectPreviousAnchor:(id)fp8;
- (void)showLinearHistoryAddressFromArrowMenu:(id)fp8;
- (void)showMarkPointFromArrowMenu:(id)fp8;
- (void)goToStartPage:(id)fp8;
- (void)autoFillForms:(id)fp8;
- (void)saveFormValues:(id)fp8;
- (void)sendLink:(id)fp8;
- (void)sendPage:(id)fp8;
- (void)addToBookmarks:(id)fp8;
- (void)openAllChangedBookmarks:(id)fp8;
- (void)toggleBookmarks:(id)fp8;
- (void)hideBookmarks:(id)fp8;
- (void)showBookmarks:(id)fp8;
- (void)viewBookmarksInPreferredMode:(id)fp8;
- (void)viewAsBookmarks:(id)fp8;
- (void)showHistoryBookmarks:(id)fp8;
- (void)toggleTabDrawer:(id)fp8;
- (void)hideTabDrawer:(id)fp8;
- (void)showTabDrawer:(id)fp8;
- (void)newTab:(id)fp8;
- (void)closeTab:(id)fp8;
- (void)nextTab:(id)fp8;
- (void)previousTab:(id)fp8;
- (void)toggleAddressBox:(id)fp8;
- (void)toggleNavigationBar:(id)fp8;
- (void)toggleFavoritesView:(id)fp8;
- (void)toggleToolbars:(id)fp8;
- (void)hideToolbars:(id)fp8;
- (void)showToolbars:(id)fp8;
- (void)toggleStatusBar:(id)fp8;
- (void)togglePageInfo:(id)fp8;
- (void)toggleSitePreferences:(id)fp8;
- (void)saveConfigurationAsDefault:(id)fp8;
- (void)showZoomedEditor:(id)fp8;
- (void)reload:(id)fp8;
- (void)increaseSize:(id)fp8;
- (void)decreaseSize:(id)fp8;
- (void)buildShortcut:(id)fp8;
- (void)viewSource:(id)fp8;
- (void)loadAllImages:(id)fp8;
- (void)saveAllLinkedDocuments:(id)fp8;
- (void)saveAllLinkedImages:(id)fp8;
- (void)startAnimations:(id)fp8;
- (void)stopAnimations:(id)fp8;
- (void)goToLocation:(id)fp8;
- (void)printDocument:(id)fp8;
- (void)paste:(id)fp8;
- (void)takeAddressFromPopUpButton:(id)fp8;
- (void)takeAddressFromWell:(id)fp8;
- (void)stopAll:(id)fp8;
- (void)stopLoad:(id)fp8;
- (void)cancel:(id)fp8;
- (void)saveAsNativeFormat:(id)fp8;
- (void)saveAs:(id)fp8;
- (void)save:(id)fp8;
- (void)doNothing:(id)fp8;
- (void)overrideEncodingPopupSelected:(id)fp8;
- (void)search:(id)fp8;
- (void)searchTheWeb:(id)fp8;
- (void)blockedPopupStatus:(id)fp8;
- (void)cookieStatus:(id)fp8;
- (void)securityStatus:(id)fp8;
- (void)rssStatus:(id)fp8;
- (void)sitePreferencesStatus:(id)fp8;
- (void)updateCurrentTab:(id)fp8;
- (void)repeatedlyUpdateCurrentTab:(id)fp8;
- (void)forceLayoutMainFrame:(id)fp8;
- (struct _NSRect)windowContentRect;
- (void)setInnerSize:(struct _NSSize)fp8 outerSize:(struct _NSSize)fp16;
- (BOOL)addressAlwaysVisible;
- (void)setAddressAlwaysVisible:(BOOL)fp8;
- (BOOL)navigationBarVisible;
- (void)setNavigationBarVisible:(BOOL)fp8;
- (BOOL)favoritesVisible;
- (void)setFavoritesVisible:(BOOL)fp8;
- (BOOL)toolbarsVisible;
- (void)setToolbarsVisible:(BOOL)fp8;
- (BOOL)statusBarVisible;
- (void)setStatusBarVisible:(BOOL)fp8;
- (BOOL)editorIsVisible;
- (void)setEditorVisible:(BOOL)fp8;
- (id)siteEditor;
- (void)setLinkHoverText:(id)fp8;
- (void)setStatusText:(id)fp8;
- (id)statusText;
- (void)activateTab:(id)fp8;
- (id)address;
- (void)showAddress:(id)fp8;
- (void)closeTab:(id)fp8 activateNext:(BOOL)fp12;
- (void)closeAllTabsWithoutCreatingNewTab;
- (id)tabSwitcherController;
- (void)refreshHistoryDisplay;
- (void)resetAddressWellAddress;
- (void)setAddressWellLoadAddress:(id)fp8;
- (void)updateFrameStatus;
- (void)updateLoadingStatusIndicatorsForTab:(id)fp8;
- (BOOL)handleKeyDown:(id)fp8;
- (void)flagsChanged:(id)fp8;
- (void)updateLanguageModel;
- (float)textMultiplier;
- (BOOL)setTextMultiplier:(float)fp8;
- (id)pipelineStatusDisplayer;
- (id)bookmarksController;
- (id)bookmarksView;
- (id)openPreferredBookmarksController;
- (void)selectBookmark:(id)fp8 editLabel:(BOOL)fp12 showInspector:(BOOL)fp16;
- (BOOL)isShowingBookmarks;
- (void)followSpokenLinkNamed:(id)fp8;
- (void)setIsUnrequestedPopUpOpenedBy:(id)fp8;
- (BOOL)isUnrequestedPopUp;
- (void)popUpWasRequested;
- (void)searchTheWebWithStartingString:(id)fp8;
- (void)validateStatusItems;
- (id)debugDictionary;
- (BOOL)validateStatusCell:(id)fp8;
- (id)menuForStatusCell:(id)fp8;
- (BOOL)springLoadHelperShouldFlash:(id)fp8;
- (void)springLoadHelper:(id)fp8 wantsFlash:(BOOL)fp12;
- (void)springLoadHelperWantsSpringLoad:(id)fp8;
- (BOOL)dragSourceMatchesDestination:(id)fp8;

@end

@interface NSScrollView (OAScrollViewCompatibility)
- (struct _NSSize)contentSizeForFrameSize:(struct _NSSize)fp8 hasHorizontalScroller:(BOOL)fp16 hasVerticalScroller:(BOOL)fp20;
- (struct _NSSize)idealSizeForAvailableSize:(struct _NSSize)fp8;
@end

@interface OWBrowserController (Private)
+ (id)_addressFromString:(id)fp8;
+ (id)_acceptedDragTypes;
+ (id)_pressedBookmarksImage;
+ (id)_bookmarksImage;
+ (id)_tabDrawerLeftImage;
+ (id)_tabDrawerRightImage;
+ (id)_blankSitePreferencesImage;
- (void)_saveToolbarConfiguration;
- (void)_restoreSavedToolbarConfiguration;
- (id)_toolbarState;
- (void)_restoreToolbarState:(id)fp8;
- (BOOL)_hasActiveWebPage;
- (void)_setupWindowAtPoint:(struct _NSPoint)fp8;
- (void)_autosizeWindow;
- (void)_attachHistoryPopUp:(id)fp8 toButton:(id)fp12 usingPopUpNotificationSelector:(SEL)fp16;
- (BOOL)_editableAddressIsInNavigationBar;
- (BOOL)_searchFieldIsInNavigationBar;
- (void)_setAddressTemporarilyNeeded:(BOOL)fp8;
- (void)_setSearchFieldTemporarilyNeeded:(BOOL)fp8;
- (BOOL)_calculateStackedViews;
- (void)_redisplayToolbars;
- (void)_redisplayToolbarsIfNeeded;
- (void)_toolbarsNeedRedisplay;
- (void)_updateLabel:(id)fp8 onToolbarItem:(id)fp12;
- (void)_userStartedEditingURLField;
- (void)_userFinishedEditingURLField;
- (BOOL)_searchFieldHasFocus;
- (BOOL)_addressFieldHasFocus;
- (void)_checkIfAddressIsTemporarilyNeeded;
- (void)_checkIfSearchFieldIsTemporarilyNeeded;
- (BOOL)_updateStartPageButton;
- (BOOL)_updateLeftArrow;
- (BOOL)_updateRightArrow;
- (BOOL)_updatePreviousMarkButton;
- (BOOL)_updateNextMarkButton;
- (id)_addressCompletionControllerItems;
- (void)_mainthread_updateLoadingStatusIndicatorsForTab:(id)fp8;
- (void)_checkForAutoFillableForms;
- (void)_checkForRSSFeeds;
- (void)_checkForCookies;
- (void)_checkForSecurity;
- (void)_checkForSitePreferences;
- (void)_activateTab:(id)fp8;
- (void)_closeTab:(id)fp8 activateNext:(BOOL)fp12 createIfNone:(BOOL)fp16;
- (void)_markWindowAsDirtyIfNecessary;
- (id)_tabState;
- (void)_restoreTabState:(id)fp8;
- (id)_searchableShortcuts;
- (void)_shortcutsDidChange:(id)fp8;
- (void)_editSearches:(id)fp8;
- (void)_restoreDefaultSearchMode;
- (void)_updateSearchThisSiteAddress;
- (BOOL)_searchFieldIsInToolbarBeforeLocationField:(char *)fp8;
- (id)_siteEditor;
- (void)_tabFaviconDidChange:(id)fp8;
- (void)_updateSitePrefsToolbarIcon;
- (void)_zoomTextBy:(float)fp8;
- (void)_validateExpensiveUI;
- (void)_doExpensiveValidation;
- (void)_startDragFocusTimer;
- (void)_stopDragFocusTimer;
- (void)_invalidateImmediately;
- (void)_releaseInstanceVariables;
@end

@interface OWBrowserController (DelegatesDatasourcesNotifications)
- (id)subviewsForStackView:(id)fp8;
- (void)_controlTintChanged:(id)fp8;
- (void)_documentTitleChangedNotification:(id)fp8;
- (void)_populateHistoryPopUpButton:(id)fp8 includeOnlyMarkPoints:(BOOL)fp12;
- (void)_goPopUpButtonWillPopUpNotification:(id)fp8;
- (void)_markPopUpButtonWillPopUpNotification:(id)fp8;
- (id)popUpButtonForToolbarButton:(id)fp8;
- (struct _NSRect)windowWillUseStandardFrame:(id)fp8 defaultFrame:(struct _NSRect)fp12;
- (BOOL)windowShouldZoom:(id)fp8 toFrame:(struct _NSRect)fp12;
- (void)windowDidResize:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (BOOL)window:(id)fp8 shouldPopUpDocumentPathMenu:(id)fp12;
- (BOOL)window:(id)fp8 shouldDragDocumentWithEvent:(id)fp12 from:(struct _NSPoint)fp16 withPasteboard:(id)fp24;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)_closeWindowWarningSheetDidDismiss:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)windowDidBecomeKey:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)windowWillMiniaturize:(id)fp8;
- (void)windowDidMiniaturize:(id)fp8;
- (void)windowDidDeminiaturize:(id)fp8;
- (void)controlTextDidChange:(id)fp8;
- (void)controlTextDidEndEditing:(id)fp8;
- (BOOL)control:(id)fp8 textShouldBeginEditing:(id)fp12;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (id)omniFindControllerTarget;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (id)_toolbarItemForButton:(id)fp8 withIdentifier:(id)fp12 withItemInfo:(id)fp16 willInsert:(BOOL)fp20;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (void)toolbarWillAddItem:(id)fp8;
- (void)toolbarDidRemoveItem:(id)fp8;
- (BOOL)validateToolbarItem:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)searchField:(id)fp8 didChooseSearchMode:(id)fp12;
- (void)searchFieldDidEndEditing:(id)fp8;
- (void)dragTargetToolbarButtonWantsSpringLoad:(id)fp8;
- (void)dragTargetToolbarButton:(id)fp8 receivedDrag:(id)fp12;
@end

@interface OWBrowserFrameView : OWAddressWellFrame
{
}

- (void)_reshapeContentAndToolbarView:(int)fp8 resizeWindow:(BOOL)fp12 animate:(BOOL)fp16;

@end

@interface OWBrowserPrintAccessoryController : OFObject
{
    NSView *printAccessoryView;
    NSButton *printDateButton;
    NSButton *printPageNumberButton;
    NSButton *printTitleButton;
    NSButton *printURLButton;
    NSButton *printBackgroundImagesButton;
    NSPopUpButton *paginationModePopUp;
    NSPrintOperation *lastPrintOperation;
}

- (id)init;
- (void)dealloc;
- (id)preparedPrintAccessoryViewForOperation:(id)fp8;
- (void)printAccessoryButtonChecked:(id)fp8;
- (void)choosePaginationMode:(id)fp8;

@end

@interface OWBrowserPrintAccessoryController (Private)
- (void)_setPrintInfoHorizontalPagination:(int)fp8;
@end

@interface OWBrowserPrintAccessoryView : NSView
{
}

- (void)viewDidMoveToSuperview;

@end

@interface OWBrowserPrintAccessoryView (Private)
@end

@interface OWBrowserPrintAccessoryView (NotificationsDelegatesDatasources)
@end

@interface OWBrowserWindow : OWAddressWindow
{
    NSEvent *nonretainedProcessingEvent;
    id helper;
    id helper2;
    NSText *formFieldEditor;
    NSText *customFieldEditor;
    void *carbonEventHandlerUPP;
    struct OpaqueEventHandlerRef *carbonEventHandlerRef;
    BOOL carbonEventHandlerInstalled;
    struct {
        unsigned int delegateValidatesStatusItems:1;
        unsigned int wasActiveDuringLastMouseDown:1;
        unsigned int sentMouseMovedEventThisEvent:1;
    } flags;
}

+ (Class)frameViewClassForStyleMask:(unsigned int)fp8;
- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (void)dealloc;
- (BOOL)wasActiveDuringLastMouseDown;
- (void)touched;
- (void)sendEvent:(id)fp8;
- (void)mouseMoved:(id)fp8;
- (void)setDelegate:(id)fp8;
- (void)setFrame:(struct _NSRect)fp8 display:(BOOL)fp24;
- (void)becomeMainWindow;
- (void)resignMainWindow;
- (void)keyDown:(id)fp8;
- (BOOL)performKeyEquivalent:(id)fp8;
- (void)close;
- (void)update;
- (void)toggleToolbarShown:(id)fp8;
- (void)_performToggleToolbarShown:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)fieldEditor:(BOOL)fp8 forObject:(id)fp12;
- (BOOL)validateMenuItem:(id)fp8;
- (void *)carbonWindowRef;

@end

@interface OWBrowserWindow (Private)
+ (void)_setup:(id)fp8;
- (void)_setup;
- (BOOL)_sendEventToDelegate:(id)fp8;
- (BOOL)_testForMouseHoldEvent:(id)fp8;
@end

@interface OWColorizeState : OFObject
{
    NSColor *color;
    id nonretainedDelegate;
}

- (id)initWithColor:(id)fp8;
- (void)dealloc;
- (id)color;
- (void)setColor:(id)fp8;
- (id)delegate;
- (void)setDelegate:(id)fp8;
- (id)performScan:(id)fp8;
- (id)nextStateByScanning:(id)fp8 inTextStorage:(id)fp12;

@end

@interface OWColorizer : OFObject
{
    OWColorizeState *startingState;
    OWExternalTextAttribute *stateAttribute;
}

- (id)initForTextStorage:(id)fp8;
- (void)setupAtStartingPosition:(unsigned int)fp8 inTextStorage:(id)fp12;
- (BOOL)allowEndAtPosition:(unsigned int)fp8 inTextStorage:(id)fp12;
- (void)didEndAtPosition:(unsigned int)fp8 inTextStorage:(id)fp12;
- (void)didChangeRange:(struct _NSRange)fp8 andLength:(int)fp16;
- (struct _NSRange)invalidatedRangeToRecolorWithEditedRange:(struct _NSRange)fp8 andLengthChange:(int)fp16 inTextStorage:(id)fp20;

@end

@interface OWColorizingTextStorage : NSConcreteTextStorage
{
    OWColorizer *colorizer;
    BOOL alreadyColorizing;
}

- (id)init;
- (void)dealloc;
- (id)colorizer;
- (void)setColorizer:(id)fp8;
- (void)_notifyEdited:(unsigned int)fp8 range:(struct _NSRange)fp12 changeInLength:(int)fp20 invalidatedRange:(struct _NSRange)fp24;
- (void)addAttribute:(id)fp8 value:(id)fp12 range:(struct _NSRange)fp16;
- (void)removeAttribute:(id)fp8 range:(struct _NSRange)fp12;
- (void)endEditing;

@end

@interface OWCompletionController : NSResponder
{
    NSView *nibView;
    NSTableView *tableView;
    NSWindow *completionWindow;
    NSWindow *targetWindow;
    NSControl *targetControl;
    NSArray *matches;
}

- (id)init;
- (void)dealloc;
- (id)nibName;
- (void)adjustToWidth:(float)fp8 scrollerWidth:(float)fp12;
- (void)attachToControl:(id)fp8;
- (id)targetControl;
- (BOOL)isVisible;
- (void)hideWindow;
- (void)detach;
- (void)controlUpdated:(id)fp8;
- (void)_hide:(id)fp8;
- (void)_createWindow;
- (BOOL)isAttached;
- (id)textFieldValue;
- (void)setTextFieldValue:(id)fp8;
- (void)updateMatches;
- (void)cancel:(id)fp8;
- (void)tableViewAction:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)selectDefaultCompletion;
- (id)matchesForString:(id)fp8;
- (BOOL)complete;
- (struct _NSRect)windowFrame;

@end

@interface OWCompletionController (PrivateAPI)
- (void)_positionWindow;
- (void)_showWindow;
- (void)_controlResized:(id)fp8;
@end

@interface OWConsoleController : OFObject
{
    NSPanel *consolePanel;
    OWPlainTextView *consoleTextView;
    NSButton *cleanConsoleButton;
    NSButton *showHTTPRequestsButton;
    BOOL writeCopyOfLogToStandardError;
    NSLock *stderrLock;
}

+ (void)initialize;
+ (void)didLoad;
+ (id)sharedConsoleController;
+ (void)startTrappingNSLog;
+ (void)controllerStartedRunning:(id)fp8;
- (id)init;
- (id)initWithFrameSaveName:(id)fp8;
- (void)showConsolePanel:(id)fp8;
- (void)clearConsole:(id)fp8;
- (void)updateSettings:(id)fp8;
- (void)debugHTTP:(id)fp8;
- (void)debugScheduler:(id)fp8;
- (void)logAttributedString:(id)fp8;
- (void)logString:(id)fp8;
- (void)logTimestampedString:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (void)pipelineHasErrorNotification:(id)fp8;
- (id)omniFindControllerTarget;
- (BOOL)validateMenuItem:(id)fp8;

@end

@interface OWConsoleController (Private)
- (void)deferredPipelineHasErrorNotification:(id)fp8;
@end

@interface OWCookieListController : OFObject
{
    NSWindow *window;
    OASplitView *splitView;
    NSTableView *cookieTableView;
    NSButton *deleteButton;
    NSButton *deleteAllButton;
    OASearchField *searchField;
    NSTextView *valueTextView;
    NSPopUpButton *statusPopUp;
    NSTextField *explanationField;
    NSString *siteDomain;
    BOOL includeRejected;
    NSArray *cookies;
    NSMutableArray *displayedCookies;
    NSMutableArray *sortOrderings;
}

+ (void)initialize;
+ (void)showCookiesForSite:(id)fp8 forWindow:(id)fp12 includeRejected:(BOOL)fp16;
- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)cancel:(id)fp8;
- (void)done:(id)fp8;
- (void)delete:(id)fp8;
- (void)deleteAll:(id)fp8;
- (void)search:(id)fp8;
- (void)takeStatusFromSender:(id)fp8;
- (void)showHelp:(id)fp8;

@end

@interface OWCookieListController (Private)
- (id)_initWithSite:(id)fp8 forWindow:(id)fp12 includeRejected:(BOOL)fp16;
- (void)_cookieSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_adjustExplanationText;
- (void)_fetchCookies;
- (void)_updateUI;
- (id)_selectedCookies;
- (void)_filterCookies;
- (BOOL)_cookie:(id)fp8 matchesSearchString:(id)fp12;
- (void)_deleteCookies:(id)fp8;
- (void)_rebuildSortOrderings;
@end

@interface OWCookieListController (NotificationsDelegatesDatasources)
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;
- (id)tableViewDefaultColumnIdentifiers:(id)fp8;
- (id)tableView:(id)fp8 menuStringForColumn:(id)fp12;
- (BOOL)tableView:(id)fp8 shouldAllowTogglingColumn:(id)fp12;
- (void)tableView:(id)fp8 didClickTableColumn:(id)fp12;
- (void)tableView:(id)fp8 didDragTableColumn:(id)fp12;
@end

@interface OWDrawerController : NSResponder
{
    NSDrawer *drawer;
    float parentOriginalX;
    float slideTargetX;
    float parentOriginalWidth;
    float slideTargetWidth;
    struct _NSRect parentWindowMovedFrame;
    struct {
        unsigned int shouldAutoOpen:1;
    } drawerControllerFlags;
}

- (void)dealloc;
- (id)stateDictionary;
- (void)setStateDictionary:(id)fp8;
- (float)parentOriginalX;
- (float)parentOriginalWidth;
- (BOOL)isOpen;
- (void)openDrawer;
- (void)closeDrawer;
- (void)autoOpen;
- (void)autoClose;
- (id)drawer;
- (void)slideParentWindowToOpenPosition:(id)fp8;
- (void)slideParentWindowToOriginalPosition;

@end

@interface OWDrawerController (Private)
- (void)slide;
@end

@interface OWExternalTextAttribute : OFObject
{
    id attributeArray;
}

- (id)initWithLength:(unsigned int)fp8;
- (id)attributeAtPosition:(unsigned int)fp8;
- (id)attributeAtPosition:(unsigned int)fp8 effectiveRange:(struct _NSRange *)fp12;
- (id)attributeAtPosition:(unsigned int)fp8 effectiveRange:(struct _NSRange *)fp12 runIndex:(unsigned int *)fp16;
- (id)attributeAtRunIndex:(unsigned int)fp8 length:(unsigned int *)fp12;
- (struct _NSRange)rangeOfFirstOccurrenceOfAttribute:(id)fp8;
- (void)setAttribute:(id)fp8 inRange:(struct _NSRange)fp12;
- (void)updateAttributesForEditedRange:(struct _NSRange)fp8 lengthChange:(int)fp16;

@end

@interface OWFavoritesElement : OFObject
{
    OWBookmark *bookmark;
    NSAttributedString *title;
    struct _NSSize titleSize;
    struct _NSRect frame;
}

+ (void)didLoad;
+ (void)initialize;
+ (id)titleFont;
+ (id)titleAttributes;
- (id)initWithBookmark:(id)fp8 atPoint:(struct _NSPoint)fp12;
- (void)dealloc;
- (id)bookmark;
- (float)width;
- (void)setOrigin:(struct _NSPoint)fp8;
- (struct _NSRect)frame;
- (struct _NSRect)titleFrame;
- (struct _NSRect)imageFrame;
- (id)title;
- (id)menuForTarget:(id)fp8;
- (void)draw;
- (void)drawAsDragDestinationParent;
- (BOOL)acceptsChildren;
- (id)debugDictionary;

@end

@interface OWFavoritesElement (PrivateAPI)
- (void)_addChildrenOfBookmark:(id)fp8 toMenu:(id)fp12 target:(id)fp16 layout:(int)fp20;
- (void)_drawAsParent:(BOOL)fp8;
@end

@interface OWFavoritesPopUpButtonCell : NSPopUpButtonCell
{
}

- (void)dismissPopUp;

@end

@interface OWFavoritesView : NSView
{
    OWBrowserController *nonretainedController;
    OWBookmarks *favoriteBookmarks;
    OWBookmark *favoritesBookmark;
    NSMutableArray *rows;
    float smallestWidthBeforeNeedingLayout;
    float largestWidthBeforeNeedingLayout;
    OWFavoritesElement *nonretained_sourceElement;
    OWFavoritesElement *nonretained_closestDestinationElement;
    OWFavoritesElement *nonretained_currentlyClickingOnElement;
    struct _NSPoint lastDragLocation;
    struct {
        unsigned int isDraggingDestinationAcceptable:1;
        unsigned int destinationRelativeDropLocation:2;
    } flags;
    OWFavoritesElement *editingElement;
    NSTextField *editingField;
    NSPopUpButtonCell *popupCell;
}

+ (void)initialize;
+ (id)favoritesBookmark;
- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (void)setBrowserController:(id)fp8;
- (void)_windowChangedKeyState;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)fp8;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (void)setFrame:(struct _NSRect)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (id)menuForEvent:(id)fp8;
- (void)otherMouseDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)favoritesMenuItemSelected:(id)fp8;
- (void)openInTabs:(id)fp8;
- (void)bookmarksContextMenuOpenInNewWindow:(id)fp8;
- (void)bookmarksContextMenuOpenInCurrentWindow:(id)fp8;
- (void)bookmarksContextMenuOpenInNewTab:(id)fp8;
- (void)bookmarksContextMenuEditLabel:(id)fp8;
- (void)bookmarksContextMenuInspect:(id)fp8;
- (void)bookmarksContextMenuCheckForChanges:(id)fp8;
- (void)bookmarksContextMenuSetViewed:(id)fp8;
- (void)bookmarksContextMenuSetUnviewed:(id)fp8;
- (void)bookmarksContextMenuSetAlive:(id)fp8;
- (void)bookmarksContextMenuSetUnreachable:(id)fp8;
- (void)bookmarksContextMenuDelete:(id)fp8;
- (void)controlTextDidEndEditing:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (void)popupDidDismiss:(id)fp8;

@end

@interface OWFavoritesView (PrivateAPI)
- (void)_initFavoritesView;
- (void)_faviconPreferenceDidChange:(id)fp8;
- (void)_bookmarksChanged:(id)fp8;
- (void)_bookmarksChanged;
- (void)_relayout;
- (id)_favoriteAtPoint:(struct _NSPoint)fp8 closest:(BOOL)fp16;
- (void)_startDragFromPoint:(struct _NSPoint)fp8 downEvent:(id)fp16 currentEvent:(id)fp20 currentPoint:(struct _NSPoint)fp24 element:(id)fp32;
- (void)_clearEditingField;
- (id)_favoritesContextMenuWithMenu:(id)fp8;
- (void)_createNewFavoritesFolder:(id)fp8;
- (void)_inspectFavorites:(id)fp8;
- (void)_editFavorite:(id)fp8;
- (void)_bookmarkSelected:(id)fp8;
- (void)_displayPopUpMenuForElement:(id)fp8 event:(id)fp12;
- (void)_openBookmarkFolder:(id)fp8 withBehavior:(int)fp12 closeAll:(BOOL)fp16;
@end

@interface OWFileSaver : OFObject <OWTarget, OFWeakRetain>
{
    NSString *filename;
    OWContentType *contentType;
    OFObject *saverController;
    OWContent *contentToSave;
    NSConditionLock *documentSavingLock;
    struct {
        unsigned int hasError:1;
    } flags;
}

+ (void)initialize;
+ (id)parentContentInfo;
- (id)initWithFilename:(id)fp8 toContentType:(id)fp12 saverController:(id)fp16;
- (void)dealloc;
- (id)targetContentType;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (id)targetTypeFormatString;
- (id)parentContentInfo;
- (void)pipelineDidBegin:(id)fp8;
- (void)pipelineDidEnd:(id)fp8;
- (id)expectedContentDescriptionString;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (id)strongRetain;
- (void)invalidateWeakRetains;

@end

@interface OWFileSaver (PrivateForSubclassers)
- (BOOL)saveContent:(id)fp8;
@end

@interface OWFileStorer : OWFileSaver
{
    OWAddress *storeAddress;
    OWAddress *saveAddress;
    NSArray *validator;
    BOOL revalidate;
    int truncationRetries;
}

+ (BOOL)canStoreAddress:(id)fp8;
- (id)initWithSaverController:(id)fp8;
- (id)initWithStoreAddress:(id)fp8 toContentType:(id)fp12 saverController:(id)fp16;
- (void)setValidator:(id)fp8;
- (void)setFilenameForLocalCopy:(id)fp8;
- (void)setShouldRevalidate:(BOOL)fp8;
- (id)validator;
- (void)dealloc;
- (id)targetContentType;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (void)pipelineDidEnd:(id)fp8;
- (id)promptViewForPipeline:(id)fp8;

@end

@interface OWFileStorer (Private)
- (BOOL)_constructStoreAddressFromContent:(id)fp8;
@end

@interface OWFrameAddressWell : OWAddressWell
{
    OWTab *tab;
}

+ (void)setupParentAddressesMenu:(id)fp8 forAddress:(id)fp12;
- (void)setTab:(id)fp8;
- (void)setAddress:(id)fp8;
- (id)address;
- (void)showPopup;
- (void)setRepresentedFilename:(id)fp8;
- (id)representedFilename;
- (void)setRepresentedURL:(id)fp8;
- (id)representedURL;

@end

@interface OWFrameAddressWell (Private)
+ (void)_addItemForAddress:(id)fp8 toMenu:(id)fp12;
+ (void)_parentAddressSelected:(id)fp8;
- (id)_parentAddressesMenu;
@end

@interface OWGeneralColorizeState : OWColorizeState
{
    OFCharacterSet *interestingSet;
    struct _NSMapTable *transitions;
    OWColorizeState *nonretainedDefaultTransition;
    OWColorizeState *nonretainedEndTransition;
    BOOL eatFirstCharacter;
}

- (id)initWithColor:(id)fp8;
- (void)dealloc;
- (void)addTransition:(unsigned short)fp8 toState:(id)fp12;
- (void)addDefaultTransition:(id)fp8 toState:(id)fp12;
- (void)addEndTransition:(unsigned short)fp8 toEndState:(id)fp12;
- (void)setEatsFirstCharacter:(BOOL)fp8;
- (id)performScan:(id)fp8;

@end

@interface OWHTMLColorizer : OWColorizer
{
    NSColor *tagMatchingErrorsBackgroundColor;
    NSColor *unrecognizedErrorsBackgroundColor;
    OWGeneralColorizeState *textState;
    OWGeneralColorizeState *textWhitespaceState;
    OWGeneralColorizeState *preformattedState;
    OWGeneralColorizeState *textEntityState;
    OWGeneralColorizeState *singleQuotedEntityState;
    OWGeneralColorizeState *doubleQuotedEntityState;
    OWGeneralColorizeState *startOfTagState;
    OWGeneralColorizeState *endOfTagState;
    OWGeneralColorizeState *beginTagState;
    OWGeneralColorizeState *endTagState;
    OWGeneralColorizeState *tagInteriorState;
    OWGeneralColorizeState *attributeState;
    OWGeneralColorizeState *attributeValueState;
    OWGeneralColorizeState *singleQuotedValueState;
    OWGeneralColorizeState *doubleQuotedValueState;
    OWStringColorizeState *markupState;
    OWStringColorizeState *commentState;
    OWExternalTextAttribute *tagStackAttribute;
    OWStackTag *currentTag;
    unsigned int currentTagLocation;
    BOOL isCurrentTagNewlyCreated;
    unsigned int earliestMismatchLocation;
    BOOL doNotColor;
}

+ (void)initialize;
- (id)initForTextStorage:(id)fp8;
- (void)dealloc;
- (void)setupAtStartingPosition:(unsigned int)fp8 inTextStorage:(id)fp12;
- (BOOL)allowEndAtPosition:(unsigned int)fp8 inTextStorage:(id)fp12;
- (void)didEndAtPosition:(unsigned int)fp8 inTextStorage:(id)fp12;
- (void)didChangeRange:(struct _NSRange)fp8 andLength:(int)fp16;
- (struct _NSRange)invalidatedRangeToRecolorWithEditedRange:(struct _NSRange)fp8 andLengthChange:(int)fp16 inTextStorage:(id)fp20;
- (BOOL)colorizeState:(id)fp8 willColorRange:(struct _NSRange)fp12 andTransitionToState:(id *)fp20 inTextStorage:(id)fp24;
- (void)compactTextStorage:(id)fp8;
- (void)reformatTextStorage:(id)fp8;

@end

@interface OWHTMLColorizer (PrivateMethods)
- (void)_setup;
- (void)_insertBreakInRange:(struct _NSRange)fp8 indentation:(unsigned int)fp16 inTextStorage:(id)fp20;
- (int)_insertBreakBeforePosition:(unsigned int)fp8 indentation:(unsigned int)fp12 inTextStorage:(id)fp16;
- (void)_insertBreakAfterPosition:(unsigned int)fp8 indentation:(unsigned int)fp12 inTextStorage:(id)fp16;
- (void)_markRecognizedRange:(struct _NSRange)fp8 inTextStorage:(id)fp16;
- (void)_markUnrecognizedRange:(struct _NSRange)fp8 inTextStorage:(id)fp16;
- (void)_markMismatchedRange:(struct _NSRange)fp8 inTextStorage:(id)fp16;
- (void)_unmarkMismatchedRange:(struct _NSRange)fp8 inTextStorage:(id)fp16;
- (void)_updateTagStackToPosition:(unsigned int)fp8 inTextStorage:(id)fp12;
@end

@interface OWLocationBar : NSView
{
}

+ (void)initialize;
- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface OWLocationBar (Private)
+ (void)_invalidateImages:(id)fp8;
- (void)_windowChangedKeyState;
@end

@interface OWLocationField : OABackgroundImageControl
{
    id delegate;
    OWFrameAddressWell *frameAddressWell;
    NSTextField *pageAddressTextField;
    struct {
        unsigned int acceptingDrag:1;
    } flags;
}

+ (Class)cellClass;
- (void)dealloc;
- (void)awakeFromNib;
- (BOOL)acceptsFirstResponder;
- (id)font;
- (void)setFont:(id)fp8;
- (void)drawBackgroundImageForBounds:(struct _NSRect)fp8;
- (void)setEnabled:(BOOL)fp8;
- (id)frameAddressWell;
- (id)pageAddressTextField;
- (void)setAcceptingDrag:(BOOL)fp8;
- (void)selectText:(id)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface OWLocationField (Private)
+ (void)_setupImages;
+ (id)_darkenImage:(id)fp8 by:(float)fp12;
- (struct _NSRect)_textRectForBounds:(struct _NSRect)fp8;
- (struct _NSRect)_addressWellRectForBounds:(struct _NSRect)fp8;
- (id)_leftImage;
- (void)_drawLeftImageForBounds:(struct _NSRect)fp8;
- (id)_middleImage;
- (void)_drawMiddleImageForBounds:(struct _NSRect)fp8;
- (id)_rightImage;
- (void)_drawRightImageForBounds:(struct _NSRect)fp8;
@end

@interface OWLocationField (NotificationsDelegatesDatasources)
@end

@interface OWNewSpinnyThing : NSProgressIndicator <OWThrobber>
{
    id nonretainedTarget;
    SEL action;
    BOOL animating;
    BOOL shouldAnimate;
}

+ (void)initialize;
+ (struct _NSSize)minSize;
+ (struct _NSSize)maxSize;
+ (id)staticImage;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)setTarget:(id)fp8;
- (void)setAction:(SEL)fp8;
- (void)mouseUp:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)startAnimation:(id)fp8;
- (void)stopAnimation:(id)fp8;

@end

@interface OWOpaqueView : NSView
{
}

- (BOOL)isOpaque;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface OWPlainTextView : NSTextView
{
    OWFrameView *nonretainedFrameView;
}

- (id)initWithFrame:(struct _NSRect)fp8 textContainer:(id)fp24;
- (void)dealloc;
- (void)setRTFData:(id)fp8;
- (void)threadsafeAppendTextString:(id)fp8;
- (void)threadsafeSetRTFData:(id)fp8;
- (void)layoutGlyphs;
- (void)stepFontSize:(int)fp8;
- (void)appendTextString:(id)fp8;
- (id)omniFindControllerTarget;
- (id)searchableContent;

@end

@interface OWQuickDrawView : NSQuickDrawView
{
}

@end

@interface OWSGMLToBookmarksProcessor : OWSGMLProcessor
{
    NSMutableString *cDataCollectorString;
    OWBookmark *topBookmark;
    OWBookmark *nonretainedCurrentParentBookmark;
    OWBookmark *nonretainedCurrentBookmark;
    BOOL shouldCleanUpBookmarks;
    BOOL haveSeenBookmarkInfoTag;
    BOOL haveLostData;
    BOOL haveSeenBookmarkInfoEnd;
    OWContent *outputContent;
}

+ (void)didLoad;
- (void)dealloc;
- (void)processBegin;
- (void)processEnd;
- (void)processCData:(id)fp8;

@end

@interface OWSGMLToBookmarksProcessor (Private)
- (void)_setCDataCollectorString:(id)fp8;
- (id)_dateWithIntervalString:(id)fp8;
@end

@interface OWSGMLToBookmarksProcessor (Tags)
+ (void)didLoad;
- (void)processUnknownTag:(id)fp8;
- (void)processBodyTag:(id)fp8;
- (void)processAnchorTag:(id)fp8;
- (void)processLineBreakTag:(id)fp8;
- (void)processHeaderTag:(id)fp8;
- (void)processListTag:(id)fp8;
- (void)processBookmarkInfoTag:(id)fp8;
- (void)processEndBookmarkInfoTag:(id)fp8;
@end

@interface OWSafariBookmarksProcessor : OWDataStreamProcessor
{
    OWBookmark *topBookmark;
}

+ (void)didLoad;
- (void)dealloc;
- (void)process;

@end

@interface OWSafariBookmarksProcessor (Private)
- (id)_processBookmarkEntry:(id)fp8 inBookmark:(id)fp12;
@end

@interface OWSourceTextView : OWPlainTextView <OWConcreteCacheEntry>
{
    OWParameterizedContentType *sourceContentType;
    BOOL keepReformatting;
    BOOL keepColorizing;
    BOOL isProcessed;
    BOOL isEntityized;
    BOOL isAtEnd;
}

+ (void)initialize;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)endOfData;
- (BOOL)contentIsValid;
- (void)setSourceContentType:(id)fp8;
- (id)sourceContentType;
- (void)appendTextString:(id)fp8;
- (void)updateDragTypeRegistration;
- (id)acceptableDragTypes;
- (void)toggleContinuousSpellChecking:(id)fp8;
- (void)sourceDidEnd;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;

@end

@interface OWSourceTextView (PrivateAPI)
- (void)_mainThreadSetup;
@end

@interface OWSpringLoadedTableView : OAGradientTableView <OWSpringLoadHelper>
{
    OWSpringLoadHelper *windowSpringLoadHelper;
    id _nonretainedDragSender;
    int _flashRow;
    BOOL _flashState;
}

- (void)dealloc;
- (void)awakeFromNib;
- (void)setDropRow:(int)fp8 dropOperation:(int)fp12;
- (void)drawRow:(int)fp8 clipRect:(struct _NSRect)fp12;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (BOOL)springLoadHelperShouldFlash:(id)fp8;
- (void)springLoadHelper:(id)fp8 wantsFlash:(BOOL)fp12;
- (void)springLoadHelperWantsSpringLoad:(id)fp8;

@end

@interface OWSpringLoadedTableView (Private)
- (void)_setFlashRow:(int)fp8;
- (void)_endDrag;
- (void)_startWindowSpringLoad;
- (void)_stopWindowSpringLoad;
@end

@interface OWSpringLoadedTableView (NotificationsDelegatesDatasources)
@end

@interface OWStackTag : OFObject
{
    NSString *name;
    OWStackTag *previousTag;
    OWSGMLTagType *nonretainedTagType;
    struct {
        unsigned int isNonSGML:1;
        unsigned int isPreformatted:1;
        unsigned int isPossibleContainer:1;
        unsigned int isNonContainer:1;
        unsigned int isMismatched:1;
        unsigned int noReformat:1;
        unsigned int indentValid:1;
        unsigned int indentLevel:8;
    } flags;
}

+ (void)initialize;
+ (BOOL)recognizesCloseTag:(id)fp8;
- (id)initWithTag:(id)fp8 onStack:(id)fp12;
- (void)dealloc;
- (id)name;
- (id)previousStackTag;
- (BOOL)isRecognized;
- (BOOL)recognizesAttributeNamed:(id)fp8;
- (BOOL)isMismatched;
- (void)setIsMismatched:(BOOL)fp8;
- (BOOL)isNonSGML;
- (BOOL)isPreformatted;
- (BOOL)isNonContainer;
- (BOOL)requiresEndTag;
- (id)description;
- (id)debugDictionary;
- (BOOL)shouldBreakBeforeStartTag;
- (BOOL)shouldBreakAfterStartTag;
- (BOOL)shouldBreakBeforeEndTag;
- (BOOL)shouldBreakAfterEndTag;
- (int)indentLevel;

@end

@interface OWStackTag (Private)
- (BOOL)_matchesStackTag:(id)fp8;
- (void)_scanStack;
@end

@interface OWStringColorizeState : OWColorizeState
{
    NSString *startString;
    NSString *endString;
    OWColorizeState *nonretainedFailureState;
    OWColorizeState *nonretainedEndState;
    BOOL includeEndString;
}

- (id)initWithColor:(id)fp8 startString:(id)fp12 failureState:(id)fp16 endString:(id)fp20 includeEndString:(BOOL)fp24 endState:(id)fp28;
- (void)dealloc;
- (id)performScan:(id)fp8;

@end

@interface OWTabCell : NSCell
{
    OWTabSwitcherView *tabSwitcherView;
    OWTab *tab;
    NSImage *_thumbnail;
    NSImage *smallCachedThumbnail;
    NSImage *favicon;
    NSString *title;
    struct _NSSize titleSize;
    NSString *shortTitle;
    struct _NSSize shortTitleSize;
    NSImage *cachedImage;
    float alphaValue;
    struct _NSSize previousSize;
    struct _NSRect startFrame;
    NSMutableDictionary *thumbnailFontAttributes;
    NSMutableDictionary *faviconFontAttributes;
    struct {
        unsigned int cacheIsValid:1;
        unsigned int hasSmallCachedThumbnail:1;
        unsigned int isSelected:1;
        unsigned int isActive:1;
        unsigned int isDragging:1;
        unsigned int isUnselectedContextTarget:1;
        unsigned int canBeDeleted:1;
        unsigned int shouldBeDeleted:1;
        unsigned int isReceivingDrag:1;
        unsigned int isSwitchingModes:1;
        unsigned int mouseOverCloseButton:1;
        unsigned int mouseDownInCloseButton:1;
    } flags;
    int fullTag;
    int closeTag;
}

+ (void)initialize;
+ (float)heightForWidth:(float)fp8;
- (id)initWithTab:(id)fp8;
- (void)dealloc;
- (id)tab;
- (id)tabSwitcherView;
- (void)setTabSwitcherView:(id)fp8;
- (struct _NSRect)frame;
- (void)setFrame:(struct _NSRect)fp8;
- (struct _NSRect)bounds;
- (struct _NSRect)startFrame;
- (void)setStartFrame:(struct _NSRect)fp8;
- (id)title;
- (void)setTitle:(id)fp8;
- (float)amountOfTitleTruncated;
- (id)shortTitle;
- (void)setShortTitle:(id)fp8;
- (id)thumbnail;
- (id)favicon;
- (void)setFavicon:(id)fp8;
- (id)address;
- (BOOL)isSelected;
- (void)setSelected:(BOOL)fp8;
- (BOOL)isActive;
- (void)setActive:(BOOL)fp8;
- (BOOL)isDragging;
- (void)setDragging:(BOOL)fp8;
- (BOOL)isLoading;
- (void)setIsUnselectedContextTarget:(BOOL)fp8;
- (BOOL)isUnselectedContextTarget;
- (BOOL)canBeDeleted;
- (void)setCanBeDeleted:(BOOL)fp8;
- (BOOL)shouldBeDeleted;
- (void)setShouldBeDeleted:(BOOL)fp8;
- (float)alphaValue;
- (void)setAlphaValue:(float)fp8;
- (struct _NSRect)closeBoxRect;
- (void)setMouseOverCloseBox:(BOOL)fp8;
- (void)setMouseDownInCloseBox:(BOOL)fp8;
- (void)removeCursorRects;
- (void)resetCursorRectsWithVisibleFrame:(struct _NSRect)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (BOOL)isReceivingDrag;
- (void)setReceivingDrag:(BOOL)fp8;
- (void)finishSwoop;
- (void)invalidateThumbnail;
- (void)windowChangedKeyState;
- (BOOL)matchesPattern:(id)fp8 inMode:(int)fp12;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface OWTabCell (Private)
+ (id)_tabBookmarksImage;
- (id)_inactiveSelectedBorderColorWithKeyState:(BOOL)fp8;
- (id)_activeNonSelectedBorderColorWithKeyState:(BOOL)fp8;
- (id)_inactiveNonSelectedThumbnailBorderColorWithKeyState:(BOOL)fp8;
- (id)_activeSelectedTintColorWithKeyState:(BOOL)fp8;
- (id)_inactiveSelectedTintColorWithKeyState:(BOOL)fp8;
- (id)_receivingDragBorderColorWithKeyState:(BOOL)fp8;
- (id)_receivingDragTintColorWithKeyState:(BOOL)fp8;
- (id)_inactiveNonSelectedTintColor;
- (id)_inactiveNonSelectedBorderColor;
- (void)_invalidateCache;
- (void)_recache;
- (void)_invalidateSmallCachedThumbnail;
- (void)_recacheSmallThumbnail;
- (struct _NSRect)_bounds;
- (struct _NSRect)_thumbnailRect;
- (struct _NSRect)_faviconRect;
- (struct _NSRect)_titleRect;
- (struct _NSRect)_titleRectForDrawing;
- (id)_badgeImage;
- (struct _NSRect)_badgeRect;
- (id)_closeImage;
- (struct _NSRect)_borderRect;
- (void)_drawBackground;
- (void)_drawThumbnail;
- (void)_drawTitle;
- (void)_drawBadge;
- (void)_drawAsThumbnail;
@end

@interface NSView (OWShadowExtras)
+ (void)startShadowingWithHeight:(unsigned int)fp8 radius:(unsigned int)fp12 azimuth:(unsigned int)fp16 alpha:(float)fp20;
+ (void)stopShadowing;
@end

@interface OWTabSwitcherController : OWDrawerController
{
    NSView *controlsView;
    OWTabSwitcherView *tabSwitcherView;
    NSMatrix *tabModeMatrix;
    OAContextButton *contextButton;
    OWBrowserController *nonretainedBrowserController;
    NSMutableArray *tabs;
    NSMutableArray *selectedTabs;
    NSMutableArray *draggedTabs;
    NSMutableArray *draggedPositions;
}

- (id)initWithBrowserController:(id)fp8;
- (void)dealloc;
- (void)closeDrawer;
- (void)openDrawer;
- (id)browserController;
- (void)toggleDrawer;
- (id)tabSwitcherView;
- (void)performSetMode:(int)fp8;
- (id)drawerState;
- (void)restoreDrawerState:(id)fp8;
- (id)tabs;
- (id)selectedTabs;
- (id)targetTabs;
- (unsigned int)firstSelectedTabIndex;
- (unsigned int)lastSelectedTabIndex;
- (id)activeTab;
- (id)draggedTabs;
- (void)_setAsideTabCell:(id)fp8;
- (void)_restoreTabCell:(id)fp8 toIndex:(int)fp12;
- (void)setDraggedTabs:(id)fp8;
- (void)insertTabCell:(id)fp8 atIndex:(unsigned int)fp12;
- (void)moveTabCell:(id)fp8 toIndex:(unsigned int)fp12;
- (void)removeTabCell:(id)fp8;
- (void)selectTab:(id)fp8 withEvent:(id)fp12 activate:(BOOL)fp16 keepSelection:(BOOL)fp20;
- (void)deselectTab:(id)fp8;
- (void)activateTab:(id)fp8 withEvent:(id)fp12;
- (BOOL)performDragOperation:(unsigned int)fp8 draggingInfo:(id)fp12 atIndex:(unsigned int)fp16;
- (BOOL)dragTabsFrom:(id)fp8 toIndex:(unsigned int)fp12;
- (BOOL)copyTabsFrom:(id)fp8 toIndex:(unsigned int)fp12;
- (BOOL)dragBookmarksFrom:(id)fp8 toIndex:(unsigned int)fp12;
- (void)setMode:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)newTab:(id)fp8;
- (void)delete:(id)fp8;
- (void)closeOtherTabs:(id)fp8;
- (void)closeAllTabs:(id)fp8;
- (void)reload:(id)fp8;
- (void)reloadAllTabs:(id)fp8;
- (void)stop:(id)fp8;
- (void)stopAllTabs:(id)fp8;
- (void)openAsTabsInNewWindow:(id)fp8;
- (void)openInNewWindows:(id)fp8;
- (void)nextTab:(id)fp8;
- (void)previousTab:(id)fp8;

@end

@interface OWTabSwitcherController (Private)
- (void)_activateTab:(id)fp8;
- (BOOL)_dragAddressFrom:(id)fp8 toIndex:(unsigned int)fp12;
- (void)_windowDidChangeKeyState:(id)fp8;
- (void)_preferredTabDrawerSideChanged:(id)fp8;
- (void)_deselectAllTabs;
- (struct _NSSize)_drawerSizeForProposedSize:(struct _NSSize)fp8;
- (void)_adjustControlsForSize:(struct _NSSize)fp8;
@end

@interface OWTabSwitcherController (NotificationsDelegatesDatasources)
- (id)menuForContextControl:(id)fp8;
- (id)targetViewForContextControl:(id)fp8;
- (struct _NSSize)drawerWillResizeContents:(id)fp8 toSize:(struct _NSSize)fp12;
@end

@interface OWTabSwitcherView : OASwoopView <OWMoveOrCopyDraggingSource>
{
    OWTabSwitcherController *tabSwitcherController;
    int mode;
    NSArray *draggingTabs;
    unsigned int lastSourceDragOperation;
    unsigned int lastDestinationDragOperation;
    unsigned int draggedTabIndex;
    OWTabCell *dropCell;
    OWTabCell *rightClickedCell;
    struct {
        unsigned int receivingDrag:1;
        unsigned int isResizing:1;
        unsigned int needsLayout:1;
        unsigned int isLayingOut:1;
        unsigned int isDraggingSingleObject:1;
        unsigned int isTargetOfUselessDrag:1;
        unsigned int isSwitchingModes:1;
        unsigned int layoutDeferred:1;
        unsigned int layoutWasDeferred:1;
    } flags;
}

+ (void)initialize;
+ (id)recognizedPasteboardTypes;
- (void)dealloc;
- (void)willMove;
- (void)didMove;
- (void)cellsFinished:(id)fp8;
- (id)tabSwitcherController;
- (void)nullifyTabSwitcherController;
- (int)mode;
- (void)setMode:(int)fp8;
- (BOOL)isSwitchingModes;
- (void)addTab:(id)fp8;
- (void)removeTab:(id)fp8;
- (id)draggingTabs;
- (void)layoutIfNeeded;
- (void)layout;
- (void)setLayoutDeferred:(BOOL)fp8;
- (float)currentTabWidth;
- (float)tabWidthForContentWidth:(float)fp8;
- (float)currentTabHeight;
- (float)tabHeightForTabWidth:(float)fp8;
- (float)intercellSpacing;
- (float)horizontalMargin;
- (float)verticalMargin;
- (id)dropCell;
- (id)rightClickedCell;
- (id)menuForSelection;
- (void)shortenTabTitles;
- (void)dragTabs:(id)fp8 withEvent:(id)fp12;
- (BOOL)acceptsFirstResponder;
- (void)mouseMoved:(id)fp8;
- (void)keyDown:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)_setRightClickedCell:(id)fp8;
- (void)controlMouseDown:(id)fp8;
- (void)rightMouseDown:(id)fp8;
- (void)resetCursorRects;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)setTabSwitcherController:(id)fp8;
- (id)menuForEvent:(id)fp8;
- (BOOL)acceptsFirstMouse:(id)fp8;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)cut:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;
- (void)awakeFromNib;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (void)viewDidEndLiveResize;
- (struct _NSSize)drawerWillResizeContents:(id)fp8 toSize:(struct _NSSize)fp12;
- (void)setFrameSize:(struct _NSSize)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)currentDragOperationIs:(unsigned int)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;

@end

@interface OWTabSwitcherView (Private)
- (struct _NSSize)_calculateFrameSizeForTabCount:(unsigned int)fp8;
- (BOOL)_updateFrameSizeForTabCount:(unsigned int)fp8;
- (void)_positionTabCells;
- (void)_queueRedisplay;
- (void)_redisplayFromNotification;
- (void)_needsLayout;
- (struct _NSRect)_closeBoxRectInLocalCoordinatesForCell:(id)fp8;
@end

@interface OWTextInputCompletionController : OWCompletionController
{
    NSString *oldTerm;
    NSMutableArray *previousMatches;
    unsigned int maximumLength;
    DOMHTMLInputElement *targetElement;
    WebFrame *targetFrame;
    struct {
        unsigned int storeTermsEnabled:1;
    } flags;
}

+ (id)sharedTextInputCompletionController;
- (void)dealloc;
- (void)attachToElement:(id)fp8 inFrame:(id)fp12;
- (id)nibName;
- (void)adjustToWidth:(float)fp8 scrollerWidth:(float)fp12;
- (void)setStoreTermsEnabled:(BOOL)fp8;
- (void)addCompletionTerm:(id)fp8;
- (void)removeCompletionTerm:(id)fp8;
- (id)completionTerms;
- (void)setMaximumLength:(unsigned int)fp8;
- (void)selectDefaultCompletion;
- (id)matchesForString:(id)fp8;
- (BOOL)complete;
- (id)textFieldValue;
- (void)setTextFieldValue:(id)fp8;
- (BOOL)element:(id)fp8 doCommandBySelector:(SEL)fp12;
- (void)detach;
- (struct _NSRect)windowFrame;
- (void)hideWindow;

@end

@interface NSString (OWTextInputCompletionControllerExtensions)
- (BOOL)hasCaseInsensitivePrefix:(id)fp8;
@end

@interface OWTextInputCompletionController (Private)
+ (void)notifyCompletionsChanged;
- (id)_init;
- (void)_matchStringsDefaultChanged:(id)fp8;
@end

@interface OWTextView : NSTextView
{
    NSTextField *label;
}

- (id)initWithCoder:(id)fp8;
- (void)setEditable:(BOOL)fp8;
- (void)viewDidMoveToWindow;

@end

@interface OWTextView (Private)
- (void)_updateLabel;
@end

@interface OWTextWithIconCell : OATextWithIconCell
{
    BOOL isSeparator;
}

- (void)setIsSeparator:(BOOL)fp8;
- (void)drawInteriorWithFrame:(struct _NSRect)fp8 inView:(id)fp24;

@end

@interface OWTinyPopUpButton : NSPopUpButton
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;

@end

@interface OWToolbarButton : NSButton
{
    id delegate;
    NSToolbarItem *_nonretainedToolbarItem;
}

- (void)dealloc;
- (id)toolbarItem;
- (void)setToolbarItem:(id)fp8;
- (int)controlSize;
- (void)setEnabled:(BOOL)fp8;
- (void)setControlSize:(int)fp8;
- (void)mouseDown:(id)fp8;

@end

@interface OWToolbarButton (Private)
- (id)_popUpButton;
- (void)_showMenu;
@end

@interface OWZWindow : NSWindow
{
    NSWindow *nonretained_window;
}

+ (void)initialize;
- (id)initWithWindow:(id)fp8;
- (void)close;
- (void)sendEvent:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;

@end

@interface NSEvent (OBBrowserWindow)
- (void)setWindow:(id)fp8;
@end

@interface OWDownloadedFileFossil : OFObject
{
    NSString *_filename;
    NSDate *_startDate;
    unsigned long long _archivedStartPosition;
    unsigned long long _archivedWorkDone;
    unsigned long long _archivedWorkToBeDone;
    double _archivedDuration;
    OWAddress *_archivedAddress;
    struct {
        unsigned int succeeded:1;
        unsigned int scheduledUpdatePending:1;
    } _flags;
    NSString *_errorString;
    double lastPeriodicUpdateTimeInterval;
}

+ (id)fossils;
+ (void)saveFossilArchive;
- (id)initWithArchive:(id)fp8;
- (void)dealloc;
- (id)archiveDictionary;
- (void)deleteFossil;
- (BOOL)succeeded;
- (id)filename;
- (BOOL)fileExists;
- (id)startDate;
- (id)errorString;
- (BOOL)isActive;
- (id)lastAddress;
- (unsigned long long)startPosition;
- (unsigned long long)workDone;
- (unsigned long long)workToBeDone;
- (double)duration;
- (double)estimatedRemainingTimeInterval;
- (void)abortDownload;
- (void)resume;
- (void)reload;

@end

@interface OWDownloadedFileFossil (Private)
+ (void)_saveFossilArchiveIfNeeded;
+ (void)_fossilArchiveDidChange;
+ (id)_mutableFossilsOnlyWhenLocked;
- (void)_postPeriodicUpdateNotification;
@end

@interface OWDownloadedFileFossil (SubclassesOnly)
+ (void)_addFossil:(id)fp8;
- (void)_setFilename:(id)fp8;
- (void)_setErrorString:(id)fp8;
- (void)_updateStartDate;
- (void)_updatedStatus;
- (void)_updatedProgress;
- (void)_updatedAddress;
@end

@interface OWDownloadsController : NSObject
{
    NSPanel *panel;
    OWViewMatrix *fossilMatrix;
    NSTextField *addressHeaderTextField;
    NSTextField *addressTextField;
    NSTextField *localPathHeaderTextField;
    NSTextField *localPathTextField;
    NSView *basicContentView;
    NSButton *detailsDisclosureButton;
    NSTextField *detailsDisclosureField;
    NSBox *detailsBox;
    double lastUpdateTimeInterval;
    NSArray *fossilsSnapshot;
    struct _NSRange savedSelectedRange;
    struct {
        unsigned int canReload:1;
        unsigned int canStop:1;
        unsigned int canPause:1;
        unsigned int canResume:1;
        unsigned int canRevealInFinder:1;
        unsigned int canAbandon:1;
        unsigned int canClearSelected:1;
        unsigned int canClearAllFinished:1;
    } flags;
}

+ (void)didLoad;
+ (id)sharedDownloadsController;
+ (void)initialize;
- (id)init;
- (void)dealloc;
- (void)addFossil:(id)fp8;
- (void)showDownloadsAndSelectFossil:(id)fp8;
- (id)fossilAtIndex:(unsigned int)fp8;
- (BOOL)hasActiveFossil;
- (void)closeWindowIfNoActiveFossils;
- (id)window;
- (void)showDownloads:(id)fp8;
- (void)revealInFinder:(id)fp8;
- (void)stop:(id)fp8;
- (void)resume:(id)fp8;
- (void)reload:(id)fp8;
- (void)abandon:(id)fp8;
- (void)clear:(id)fp8;
- (void)clearAllFinished:(id)fp8;
- (void)stopAll:(id)fp8;
- (void)toggleDetailsDisclosed:(id)fp8;
- (void)paste:(id)fp8;

@end

@interface OWDownloadsController (Private)
- (void)_showDownloads;
- (void)_loadInterface;
- (void)_setAutosizingMasksBeforeDisclosure;
- (void)_restoreAutosizingMasksAfterDisclosure;
- (BOOL)_onScreen;
- (void)_reloadData;
- (void)_removeExpiredFossils;
- (void)_deleteFossil:(id)fp8;
- (void)_selectFossil:(id)fp8;
- (void)_saveSelection;
- (void)_restoreSelection;
- (void)_redrawFossils;
- (void)_fillInStatusFieldsForSelectedFossilIfNeeded;
- (void)_fillInStatusFieldsForSelectedFossil;
- (void)_clearStatusFields;
- (void)_controlTintChanged:(id)fp8;
@end

@interface OWDownloadsController (DataSourceAndDelegates)
+ (void)controllerStartedRunning:(id)fp8;
+ (void)controllerRequestsTerminate:(id)fp8;
+ (void)_quitDownloadSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)viewMatrixSelectionDidChange:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (BOOL)validateToolbarItem:(id)fp8;
- (void)_downloadFossilUpdateNotification:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
@end

@interface OWDownloadsFossilView : NSView
{
    NSImageView *iconView;
    NSTextField *filenameField;
    NSTextField *statusField;
    NSProgressIndicator *progressBar;
    OWDownloadedFileFossil *_fileFossil;
    NSString *lastFilename;
    struct {
        unsigned int highlighted:1;
        unsigned int progressIndicatorsNeedUpdate:1;
    } flags;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (BOOL)isOpaque;
- (void)_windowChangedKeyState;
- (BOOL)isHighlighted;
- (void)setHighlighted:(BOOL)fp8;
- (id)fossil;
- (void)setFossil:(id)fp8;

@end

@interface OWDownloadsFossilView (Private)
- (void)_initFossilView;
- (void)_downloadFossilUpdateNotification:(id)fp8;
- (void)_updateStaticIndicators;
- (void)_updateProgressIndicators;
- (void)_updateProgressIndicatorsIfNeeded;
- (void)_queueUpdateProgressIndicatorsIfNeeded;
- (void)_setStatus:(id)fp8;
- (void)_addProgressBar;
- (void)_removeProgressBar;
- (void)_setSizeOnTextFields;
@end

@interface OWPipelineStatusDisplayer : OFObject
{
    OWBrowserController *browserController;
    OWStatusView *statusBarView;
    NSTextField *statusField;
    NSMutableArray *progressIndicators;
    OFScheduledEvent *hideStatusEvent;
    NSString *loadStatus;
    NSString *hoverText;
}

+ (void)initialize;
+ (id)statusScheduler;
- (id)init;
- (void)awakeFromNib;
- (void)dealloc;
- (id)statusBarView;
- (id)browserController;
- (void)setBrowserController:(id)fp8;
- (void)updateUI;
- (void)setStatusText:(id)fp8;
- (id)loadStatus;
- (void)setLinkHoverText:(id)fp8;
- (void)addProgressIndicator:(id)fp8;
- (void)removeProgressIndicator:(id)fp8;
- (void)updateStatusForTab:(id)fp8;
- (id)statusItemForIdentifier:(id)fp8;
- (void)validateStatusItems;
- (void)updateStatusFieldFrame;

@end

@interface OWPipelineStatusDisplayer (Private)
- (void)_hideStatus;
- (void)_reallyHideStatus;
- (void)_abortHideIfNecessary;
- (void)_coalescedUpdateStatusForTab:(id)fp8;
@end

@interface OWPipelineStatusDisplayer (NotificationsDelegatesDatasources)
@end

@interface OWStatusCell : NSButtonCell <NSValidatedUserInterfaceItem>
{
    NSString *identifier;
    NSString *toolTip;
    NSString *imageName;
    OWStatusView *nonretainedStatusView;
}

+ (void)didLoad;
- (id)initWithIdentifier:(id)fp8 inStatusView:(id)fp12;
- (void)dealloc;
- (id)description;
- (void)setEnabled:(BOOL)fp8;
- (void)drawWithFrame:(struct _NSRect)fp8 inView:(id)fp24;
- (id)identifier;
- (id)toolTip;
- (void)setToolTip:(id)fp8;
- (void)setImageName:(id)fp8;
- (BOOL)showMenu;
- (void)click;
- (void)update;
- (int)tag;
- (SEL)action;

@end

@interface OWStatusCell (Private)
- (id)_menu;
@end

@interface OWStatusCell (NotificationsDelegatesDatasources)
@end

@interface OWStatusDisplayController : OFObject
{
    NSOutlineView *outlineView;
    NSPanel *pipelinesPanel;
    NSTextField *progressField;
    NSTextField *statusField;
    NSTextField *addressField;
    NSButton *stopButton;
    NSRecursiveLock *lock;
    NSString *lastError;
    BOOL onScreen;
    double lastUpdateTimeInterval;
    NSMutableSet *allTasksRetained;
    NSTimer *activeStatusUpdateTimer;
}

+ (void)didLoad;
+ (id)sharedStatusDisplayController;
- (id)init;
- (void)showStatusDisplay:(id)fp8;
- (void)abortCurrentPipeline:(id)fp8;
- (void)activeTasksDidChange;
- (BOOL)windowShouldClose:(id)fp8;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)outlineViewItemDidCollapse:(id)fp8;
- (void)outlineViewSelectionDidChange:(id)fp8;

@end

@interface OWStatusDisplayController (Private)
+ (void)_lazySetup;
+ (void)controllerStartedRunning:(id)fp8;
- (void)_loadInterface;
- (void)_pipelineTreePeriodicUpdateNotificationName:(id)fp8;
- (void)_redrawActivePipelines;
- (void)_startActiveStatusUpdateTimer;
- (void)_stopActiveStatusUpdateTimer;
- (void)_clearStatusFields;
- (void)_fillInTopLevelStatus;
- (void)_updateStatusFieldsIfNeeded;
- (void)_fillInProgressFieldForWorkDone:(unsigned long long)fp8 workToBeDone:(unsigned long long)fp16 timeSinceTreeActivationInterval:(double)fp24 estimatedRemainingTreeTimeInterval:(double)fp32;
- (void)_fillInProgressFieldWithTopLevelStatus;
- (void)reloadData;
- (id)selectedTask;
- (void)expandAllRows;
- (void)setupOutlineView;
- (void)_fillInStatusFieldsForTask:(id)fp8;
- (void)_fillInStatusFieldsForSelectedTask;
@end

@interface OWStatusView : OASwoopView
{
    OWPipelineStatusDisplayer *nonretainedStatusDisplayer;
    NSMutableArray *statusCells;
    unsigned int draggedItemIndex;
    NSString *draggedItemIdentifier;
    float progress;
}

+ (void)didLoad;
- (void)dealloc;
- (void)awakeFromNib;
- (BOOL)acceptsFirstResponder;
- (BOOL)isOpaque;
- (void)mouseDown:(id)fp8;
- (void)setFrameSize:(struct _NSSize)fp8;
- (id)_domain;
- (id)view:(id)fp8 stringForToolTip:(int)fp12 point:(struct _NSPoint)fp16 userData:(void *)fp24;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setStatusDisplayer:(id)fp8;
- (void)setProgress:(float)fp8;
- (struct _NSRect)boundingRectForAllCells;
- (void)validateStatusItems;
- (void)layout;
- (void)statusCellDidHide:(id)fp8;
- (void)statusCellDidShow:(id)fp8;

@end

@interface OWStatusView (Private)
- (void)_loadStatusCells;
- (void)_updateStatusItemsPreference;
- (unsigned int)_visibleIndexOfCell:(id)fp8;
- (unsigned int)_realIndexForVisibleIndex:(unsigned int)fp8;
@end

@interface OWStatusView (NotificationsDelegatesDatasources)
@end

@interface OWViewMatrix : NSControl
{
    struct {
        unsigned int needToRepositionSubviews:1;
    } flags;
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (id)initWithCoder:(id)fp8;
- (id)fossilViewForFossil:(id)fp8;
- (id)selectedFossils;
- (void)selectSubviewAtIndex:(int)fp8 byExtendingSelection:(BOOL)fp12;
- (void)deselectSubviewAtIndex:(int)fp8;
- (BOOL)scrollSubviewToVisibleAtIndex:(int)fp8;
- (struct _NSRange)selectedRange;
- (void)setSelectedRange:(struct _NSRange)fp8;
- (BOOL)acceptsFirstResponder;
- (void)selectAll:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)pageDown:(id)fp8;
- (void)pageUp:(id)fp8;
- (void)keyDown:(id)fp8;
- (BOOL)isFlipped;
- (void)drawRect:(struct _NSRect)fp8;
- (void)resizeWithOldSuperviewSize:(struct _NSSize)fp8;
- (void)didAddSubview:(id)fp8;
- (void)willRemoveSubview:(id)fp8;

@end

@interface OWViewMatrix (Private)
- (id)_subviewAtPoint:(struct _NSPoint)fp8;
- (void)_needToRepositionSubviews;
- (void)_repositionSubviews;
- (void)_view:(id)fp8 setSelected:(BOOL)fp12 notify:(BOOL)fp16;
- (void)_deselectAll;
- (void)_noteSelectionChanged;
- (id)_selectedSubviews;
- (id)_firstSelectedView;
- (id)_lastSelectedView;
- (void)_startDragOfSelectedFossils:(id)fp8 dragEvent:(id)fp12;
@end

@interface OWViewMatrix (NotificationsDelegatesDatasources)
@end

@interface OWAuthorizationRequestUIActionResponder : NSResponder
{
    OWAuthorizationRequestUI *nonretainedRequestUIController;
}

- (id)initWithRequestUIController:(id)fp8;
- (void)cancel:(id)fp8;

@end

@interface OWAuthorizationRequestUI : OWAuthorizationRequest
{
    NSWindow *sheetWindow;
    NSTextField *titleField;
    NSTextField *promptField;
    NSTextField *loginField;
    NSSecureTextField *passwordField;
    NSButton *disclosureButton;
    NSButton *saveSwitch;
    NSButtonCell *cancelButton;
    NSButtonCell *okButton;
    OWAuthorizationRequestUIActionResponder *actionResponder;
    NSDictionary *parms;
    int panelMode;
    NSWindow *targetWindow;
}

+ (void)didLoad;
+ (void)controllerStartedRunning:(id)fp8;
- (void)dealloc;
- (void)getPasswordFallback:(id)fp8;
- (void)_cacheChanged:(id)fp8;
- (void)_dismiss;
- (void)_releaseUI;
- (void)_done;
- (void)sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;
- (void)disclose:(id)fp8;
- (void)showHelp:(id)fp8;

@end

@interface OWAppWrapperProcessor : OWAddressProcessor
{
}

+ (void)initialize;
+ (void)didLoad;
+ (id)applicationPageIcon;
- (void)process;

@end

@interface OWAppWrapperProcessor (Private)
- (id)_resultPathForURLPath:(id)fp8;
- (id)_pathForResource:(id)fp8 ofType:(id)fp12 inDirectory:(id)fp16;
- (id)_createAppWrapperFavIcon;
- (id)_createContentForAppWrapperAddress;
@end

@interface OWBlackWhiteListController : OFObject
{
    NSWindow *sheet;
    NSTableView *blacklistTableView;
    NSButton *addBlacklistExpressionButton;
    NSButton *removeBlacklistExpressionButton;
    NSTableView *whitelistTableView;
    NSButton *addWhitelistExpressionButton;
    NSButton *removeWhitelistExpressionButton;
    OFPreferenceWrapper *defaults;
}

- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)configureBlackAndWhiteListsWithWindow:(id)fp8;
- (void)addExpression:(id)fp8;
- (void)removeExpressions:(id)fp8;
- (void)ok:(id)fp8;
- (void)showHelp:(id)fp8;
- (void)copy:(id)fp8;
- (void)paste:(id)fp8;

@end

@interface OWBlackWhiteListController (Private)
- (void)updateButtons;
- (void)_sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_blacklistPreferenceDidChange:(id)fp8;
- (void)_whitelistPreferenceDidChange:(id)fp8;
@end

@interface OWBlackWhiteListController (NotificationsDelegatesDatasources)
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (BOOL)tableViewShouldEditNextItemWhenEditingEnds:(id)fp8;
- (void)tableView:(id)fp8 deleteRows:(id)fp12;
- (void)tableViewSelectionDidChange:(id)fp8;
- (float)splitView:(id)fp8 constrainSplitPosition:(float)fp12 ofSubviewAt:(int)fp16;
@end

@interface OWSiteEditor : OFObject
{
    OWBrowserController *nonretainedBrowserController;
    NSView *editorView;
    NSTabView *tabView;
    OWSitePreferencesController *sitePreferencesController;
    OWPageInfoController *pageInfoController;
    OWBookmarkEditor *bookmarkEditor;
    NSButton *closeButton;
    NSTabViewItem *bookmarkTab;
    NSTabViewItem *pageInfoTab;
    NSTabViewItem *sitePreferencesTab;
    struct {
        unsigned int needsAddressChanged:1;
        unsigned int needsUpdateUI:1;
    } flags;
}

+ (void)didLoad;
- (id)initWithBrowserController:(id)fp8;
- (void)dealloc;
- (void)awakeFromNib;
- (id)address;
- (id)browserController;
- (id)window;
- (id)editorView;
- (id)tabView;
- (void)addressChanged;
- (void)updateUI;
- (void)willShow;
- (id)sitePreferencesController;
- (id)visibleController;
- (id)bookmarkEditor;
- (BOOL)bookmarkInfoTabIsSelected;
- (void)selectBookmarksTab;
- (BOOL)pageInfoTabIsSelected;
- (void)selectPageInfoTab;
- (BOOL)sitePreferencesTabIsSelected;
- (void)selectSitePreferencesTab;
- (id)tabViewItemForController:(id)fp8;
- (void)close:(id)fp8;

@end

@interface OWSiteEditor (Private)
- (id)_controllerForTabViewItem:(id)fp8;
- (BOOL)_isShowingBookmarks;
- (BOOL)_hasAddress;
- (BOOL)_shouldShowSitePreferencesForAddress;
- (void)_updateSitePreferencesTabTitle;
- (void)_swapTabs;
- (void)_changeAddressIfNeeded;
- (void)_updateUIIfNeeded;
@end

@interface OWSiteEditor (NotificationsDelegatesDatasources)
- (void)tabView:(id)fp8 willSelectTabViewItem:(id)fp12;
@end

@interface OWSiteEditorController : NSObject
{
    OWSiteEditor *siteEditor;
    struct {
        unsigned int addressChanged:1;
        unsigned int needsUIUpdate:1;
    } flags;
}

- (void)invalidate;
- (void)addressChanged;
- (void)needsUIUpdate;
- (void)willShow;
- (BOOL)isVisible;
- (id)tabViewItem;
- (void)addressDidChange;
- (void)updateUI;

@end

@interface OWSiteEditorController (Private)
- (void)_updateUI;
@end

@interface OWSitePreference (OWExtensions)
- (id)colorValue;
- (void)setColorValue:(id)fp8;
@end

@interface OWSitePreferencesController : OWSiteEditorController
{
    NSView *controlView;
    NSTabView *preferencesTabView;
    NSPopUpButton *fontStylePopUp;
    NSButton *underlineLinksButton;
    NSPopUpButton *pageColorsPopUp;
    NSPopUpButton *styleSheetPopUp;
    NSButton *loadImagesButton;
    NSButton *showBackgroundImagesButton;
    NSButton *useColorSyncButton;
    NSTextField *textZoomField;
    NSStepper *textZoomStepper;
    NSButton *resetPageAppearanceButton;
    NSButton *pageAppearanceHelpButton;
    NSWindow *fontStyleSheet;
    OAFontView *fontStyleNormalFontView;
    OAFontView *fontStyleFixedFontView;
    NSButton *fontStyleHasMinSizeButton;
    NSComboBox *fontStyleMinSizeComboBox;
    NSButton *fontStyleHasMaxSizeButton;
    NSComboBox *fontStyleMaxSizeComboBox;
    NSString *savedFontStyleName;
    NSString *savedFixedFontFamily;
    float savedFixedFontSize;
    NSString *savedNormalFontFamily;
    float savedNormalFontSize;
    float savedMinSize;
    BOOL savedHasMinSize;
    float savedMaxSize;
    BOOL savedHasMaxSize;
    NSWindow *pageColorSheet;
    NSColorWell *backgroundColorWell;
    NSColorWell *textColorWell;
    NSColorWell *linkColorWell;
    NSColorWell *visitedLinkColorWell;
    NSColorWell *hoverLinkColorWell;
    NSColorWell *activeLinkColorWell;
    NSButton *alwaysUsePreferenceColorsButton;
    NSString *savedStyleSheetName;
    NSColor *savedPageBackgroundColor;
    NSColor *savedTextColor;
    NSColor *savedLinkColor;
    NSColor *savedVisitedLinkColor;
    NSColor *savedActiveLinkColor;
    NSColor *savedHoverLinkColor;
    BOOL savedOverridePageColors;
    NSPopUpButton *blockPopUpsPopUp;
    NSButton *usePopUpTrapButton;
    NSPopUpButton *animateImagesPopUp;
    NSButton *blockKnownAdSizeButton;
    NSButton *blockOtherSitesButton;
    NSButton *blockBlacklistedSitesButton;
    NSButton *configureBlacklistButton;
    NSButton *resetAdBlockingButton;
    NSButton *adBlockingHelpButton;
    OWBlackWhiteListController *blackWhiteListController;
    NSPopUpButton *browserIdentityPopUp;
    NSPopUpButton *openLinksToOtherSitesPopUp;
    NSButton *openNewWindowLinksInTabsCheckbox;
    NSPopUpButton *downloadDestinationPopUp;
    NSButton *autoSaveCheckbox;
    NSButton *autocompletionSaveCheckbox;
    NSButton *resetGeneralButton;
    NSButton *generalHelpButton;
    NSWindow *browserIdentitySheet;
    NSTextField *userAgentTextField;
    NSTextField *userAgentInfoTextField;
    NSTextField *appNameTextField;
    NSTextField *appCodeNameTextField;
    NSTextField *appVersionTextField;
    NSTextField *platformTextField;
    NSButton *sendLanguageHeaderButton;
    NSButton *setUpLanguagesButton;
    OAHierarchicalPopUpController *incomingCharsetController;
    NSPopUpButton *incomingCharsetPopUp;
    OAHierarchicalPopUpController *outgoingCharsetController;
    NSPopUpButton *outgoingCharsetPopUp;
    NSButton *resetLanguagesButton;
    NSButton *languagesHelpButton;
    NSButton *enableJavaScriptButton;
    NSButton *allowWindowFocusButton;
    NSButton *allowWindowResizeButton;
    NSButton *enableJavaButton;
    NSButton *clickToRunAppletsButton;
    NSButton *acceptCookiesButton;
    NSButton *acceptCookiesFromOtherSitesButton;
    NSButton *cookiesExpireAtEndOfSessionButton;
    NSButton *resetSecurityButton;
    NSButton *securityHelpButton;
    NSMutableDictionary *preferencesToIndicators;
    NSDictionary *tabViewItemsToResetButtons;
    OWAddress *address;
    OAPreferenceClient *attachedPreferenceClient;
    struct {
        unsigned int haveSetupEncodingPopups:1;
        unsigned int isGlobalController:1;
        unsigned int editingPageColors:1;
    } preferenceFlags;
}

+ (id)nameForDownloadDirectory:(id)fp8;
+ (void)updateDownloadDestinationPopUpButton:(id)fp8 currentValue:(id)fp12;
+ (id)standardizeDownloadPath:(id)fp8;
+ (id)globalSitePreferencesController;
- (void)dealloc;
- (void)awakeFromNib;
- (void)addressChanged;
- (void)addressDidChange;
- (void)updateUI;
- (void)updateUIForTabViewItem:(id)fp8;
- (id)tabViewItemWithIdentifier:(id)fp8;
- (id)tabViewItemWithLabel:(id)fp8;
- (void)setAttachedPreferenceClient:(id)fp8;
- (void)setValueForSender:(id)fp8;
- (void)resetDefaults:(id)fp8;
- (void)showHelp:(id)fp8;
- (void)showFontStyles:(id)fp8;
- (void)fontStyleSheetOK:(id)fp8;
- (void)fontStyleSheetCancel:(id)fp8;
- (void)showPageColors:(id)fp8;
- (void)pageColorSheetOK:(id)fp8;
- (void)pageColorSheetCancel:(id)fp8;
- (void)configureBlacklist:(id)fp8;
- (void)customizeUserAgent:(id)fp8;
- (void)customizeUserAgentSheetOK:(id)fp8;
- (void)customizeUserAgentSheetCancel:(id)fp8;
- (void)setUpLanguages:(id)fp8;
- (void)setIncomingCharset:(id)fp8;
- (void)setOutgoingCharset:(id)fp8;
- (void)showCookies:(id)fp8;

@end

@interface OWSitePreferencesController (Private)
+ (void)_addDownloadItemWithPath:(id)fp8 icon:(id)fp12 title:(id)fp16 toPopUpButton:(id)fp20;
+ (void)_addDownloadItemWithPath:(id)fp8 title:(id)fp12 toPopUpButton:(id)fp16;
+ (id)_downloadIconForPath:(id)fp8;
- (BOOL)_haveAnyDefaultsChangedInTab:(id)fp8;
- (void)_modifierFlagsChanged:(id)fp8;
- (void)_sitePreferencesBookmarkWillReload:(id)fp8;
- (void)_removeResetAndHelpButtons;
- (void)_listenForDefaults;
- (void)_startListeningForDefault:(id)fp8 representedByControl:(id)fp12;
- (id)_preferenceForKey:(id)fp8;
- (void)_preferenceDidChange:(id)fp8;
- (void)_updateControlStateForPreference:(id)fp8;
- (void)_restoreDefaultsSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (id)_styleSheetPresetMatchingCurrentSettings;
- (void)_updateAppearanceUI;
- (void)_resetAppearanceDefaults;
- (void)_buildPageColorsPopUp;
- (void)_buildStyleSheetPopUp;
- (void)_updatePageColorsSheetUI;
- (void)_savePageColorsInCaseOfCancel;
- (void)_restoreSavedPageColors;
- (void)_buildFontStylePopUp;
- (void)_updateFontStyleSheetUI;
- (void)_saveFontStylesInCaseOfCancel;
- (void)_restoreSavedFontStyles;
- (id)_styleSheet;
- (void)_fontStyleSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_pageColorSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_chooseUserStyleSheetLocationSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_updateAdBlockingUI;
- (void)_resetAdBlockingDefaults;
- (void)_updateGeneralUI;
- (void)_resetGeneralDefaults;
- (void)_chooseDownloadDestinationSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_buildUserAgentMenu;
- (void)_buildBrowserIdentitySheet;
- (void)_updateBrowserIdentitySheet;
- (void)_browserIdentitySheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_updateLanguagesUI;
- (void)_resetLanguagesDefaults;
- (void)_buildEncodingPopups;
- (void)_updateSecurityUI;
- (void)_resetSecurityDefaults;
@end

@interface OWSitePreferencesController (NotificationsDelegatesDatasources)
- (void)tabView:(id)fp8 willSelectTabViewItem:(id)fp12;
- (void)fontView:(id)fp8 didChangeToFont:(id)fp12;
- (id)defaultObjectValueForSettingIndicatorButton:(id)fp8;
- (id)objectValueForSettingIndicatorButton:(id)fp8;
- (void)restoreDefaultObjectValueForSettingIndicatorButton:(id)fp8;
- (id)toolTipForSettingIndicatorButton:(id)fp8;
@end

@interface OWErrorContentProcessor : OWProcessor
{
    OWContent *sourceContent;
    OWDataStream *outputStream;
}

+ (void)didLoad;
+ (id)htmlForErrorMessage:(id)fp8;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)startProcessing;
- (void)process;

@end

@interface OWPlainTextProcessor : OWDataStreamProcessor
{
    OWContent *outputContent;
    OWDataStream *outputStream;
}

+ (void)didLoad;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)startProcessing;
- (void)process;

@end

@interface NSDrawer (OWFixes)
+ (void)didLoad;
- (void)_omni_displayIfNeeded;
@end

@interface NSNotificationCenter (OWFixes)
+ (void)didLoad;
+ (void)_disableMultiThreadedNotifications;
- (void)replacement_addObserver:(id)fp8 selector:(SEL)fp12 name:(id)fp16 object:(id)fp20;
- (void)replacement_addObserver:(id)fp8 selector:(SEL)fp12 name:(id)fp16 object:(id)fp20 flags:(unsigned int)fp24;
- (void)replacement_postNotification:(id)fp8;
@end

@interface NSWindow (OWExtras)
- (void)orderFrontFromRect:(struct _NSRect)fp8 ofWindow:(id)fp24 duration:(double)fp28;
@end

@interface OAApplication (Scriptability)
- (id)fullVersion;
- (id)browsers;
- (id)valueInBrowsersAtIndex:(unsigned int)fp8;
- (void)replaceInBrowsers:(id)fp8 atIndex:(int)fp12;
- (void)insertInBrowsers:(id)fp8 atIndex:(int)fp12;
- (void)insertInBrowsers:(id)fp8;
- (void)removeFromBrowsersAtIndex:(unsigned int)fp8;
- (id)getBookmarkControllers;
- (id)personalBookmarks;
- (id)favoritesBookmarkItem;
- (id)activeWorkspace;
- (void)setActiveWorkspace:(id)fp8;
- (void)handleFlushCommand:(id)fp8;
- (id)workspaces;
- (id)valueInWorkspacesAtIndex:(unsigned int)fp8;
- (void)replaceInWorkspaces:(id)fp8 atIndex:(int)fp12;
- (void)insertInWorkspaces:(id)fp8 atIndex:(int)fp12;
- (void)insertInWorkspaces:(id)fp8;
- (void)removeFromWorkspacesAtIndex:(int)fp8;
@end

@interface ONTCPSocket (OWExtensions)
- (unsigned int)readInteger;
- (void)writeInteger:(unsigned int)fp8;
- (id)readDataMessage;
- (void)writeDataMessage:(id)fp8;
@end

@interface OWAddressBookBookmark : OWBookmark
{
    ABPerson *person;
}

+ (void)initialize;
- (id)initWithPerson:(id)fp8 Address:(id)fp12;
- (void)dealloc;

@end

@interface OWAddressBookBookmark (Private)
@end

@interface OWAddressBookBookmark (NotificationsDelegatesDatasources)
@end

@interface OWAddressBookBookmarks : NSObject <OWBookmarkDataSource>
{
    id owner;
}

- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (void)dealloc;
- (id)archiveDictionary;
- (id)controlView;
- (id)icon;
- (void)updateUI;
- (void)reloadBookmarks;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
- (id)labelColumnTitle;

@end

@interface OWAddressBookBookmarks (Private)
@end

@interface OWAddressBookBookmarks (NotificationsDelegatesDatasources)
@end

@interface OWAutosizingButton : NSButton
{
}

- (id)initWithFrame:(struct _NSRect)fp8;
- (void)awakeFromNib;

@end

@interface OWAutosizingButton (Private)
- (void)_autosize;
@end

@interface OWAutosizingPopUpButton : NSPopUpButton
{
}

- (id)initWithFrame:(struct _NSRect)fp8;

@end

@interface OWBookmark (Scriptability)
- (id)addressString;
- (void)setAddressString:(id)fp8;
- (id)getAddressEffect;
- (void)setAddressEffect:(id)fp8;
- (id)applescriptHasChanges;
- (void)setApplescriptHasChanges:(id)fp8;
- (id)applescriptWasReachable;
- (void)setApplescriptWasReachable:(id)fp8;
- (id)applescriptCheckInterval;
- (void)setApplescriptCheckInterval:(id)fp8;
- (id)objectSpecifier;
- (void)handleCheckForUpdatesCommand:(id)fp8;
- (void)removeFromChildrenAtIndex:(unsigned int)fp8;
- (void)insertInChildren:(id)fp8 atIndex:(unsigned int)fp12;
- (void)handleOpenCommand:(id)fp8;
@end

@interface OWBookmarks (Scriptability)
- (id)addressString;
- (id)getContainedBookmarks;
- (void)removeFromContainedBookmarksAtIndex:(unsigned int)fp8;
- (void)insertInContainedBookmarks:(id)fp8 atIndex:(unsigned int)fp12;
- (BOOL)isDocumentEdited;
- (id)fileName;
- (id)lastComponentOfFileName;
- (id)objectSpecifier;
- (void)handleSaveCommand:(id)fp8;
@end

@interface OWChangedBookmarks : OWStatusBookmarks
{
}

- (id)icon;
- (void)reloadBookmarks;
- (id)collectionName;
- (void)bookmarkNeedsRedisplay:(id)fp8;

@end

@interface OWGetURLScriptCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface OWHistoryBookmarks : NSObject <OWBookmarkDataSource>
{
    id owner;
}

- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (void)dealloc;
- (id)archiveDictionary;
- (id)controlView;
- (id)icon;
- (void)updateUI;
- (void)reloadBookmarks;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
- (void)deleteBookmarks:(id)fp8;
- (BOOL)canDeleteCollection;
- (id)labelColumnTitle;

@end

@interface OWHistoryBookmarks (Private)
- (void)_rebuildChildBookmarks;
@end

@interface OWHistoryBookmarks (NotificationsDelegatesDatasources)
@end

@interface OWMostVisitedBookmark : OWBookmark
{
    id entry;
}

- (id)initWithHistoryEntry:(id)fp8;
- (id)historyEntry;
- (void)dealloc;
- (id)label;
- (BOOL)canHaveChangeCheckingState;
- (BOOL)supportsChangeChecking;
- (int)objectId;
- (unsigned int)numberOfVisits;

@end

@interface OWMostVisitedBookmark (Private)
@end

@interface OWMostVisitedBookmark (NotificationsDelegatesDatasources)
@end

@interface OWMostVisitedBookmarks : NSObject <OWBookmarkDataSource>
{
    id owner;
}

- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (void)dealloc;
- (id)archiveDictionary;
- (id)controlView;
- (id)icon;
- (void)updateUI;
- (void)reloadBookmarks;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
- (id)labelColumnTitle;

@end

@interface OWMostVisitedBookmarks (Private)
@end

@interface OWMostVisitedBookmarks (NotificationsDelegatesDatasources)
@end

@interface OWRSSBookmarks : OFObject <OWBookmarkDataSource, OWTarget, OFWeakRetain>
{
    id nonretainedOwner;
    NSDictionary *archiveDictionary;
    OWWebTask *webTask;
    BOOL hasFetched;
    struct _OFWeakRetainIvars weakRetainIvars;
}

- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (void)dealloc;
- (id)archiveDictionary;
- (id)controlView;
- (id)icon;
- (void)updateUI;
- (void)reloadBookmarks;
- (void)checkForUpdates;
- (BOOL)canEditAttributes;
- (BOOL)shouldBeOpened;
- (void)addressDidChange;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
- (id)labelColumnTitle;
- (id)targetContentType;
- (id)targetAlternateContentTypes;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (id)parentContentInfo;
- (id)targetTypeFormatString;
- (void)pipelineDidEnd:(id)fp8;
- (void)updateStatusForPipeline:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;
- (void)controllerRequestsTerminate:(id)fp8;

@end

@interface OWRSSBookmarks (Private)
- (void)_setNewChildren:(id)fp8 andTitle:(id)fp12;
- (id)_uniqueIDForBookmark:(id)fp8;
- (id)_lastKnownArticlesForBookmark:(id)fp8;
- (void)_closeWebTask;
@end

@interface OWRSSBookmarks (NotificationsDelegatesDatasources)
@end

@interface OWRSSProcessor : OWDataStreamProcessor
{
    OWRSSBookmarks *bookmarks;
    OWBookmark *topBookmark;
}

+ (void)didLoad;
+ (id)rssBookmarksContentType;
- (void)dealloc;
- (void)process;

@end

@interface OWRSSProcessor (Private)
- (void)_parseElementsFromCursor:(id)fp8;
- (void)_parseChannelElement:(id)fp8 fromCursor:(id)fp12;
- (void)_parseItemElement:(id)fp8 fromCursor:(id)fp12;
- (id)_singleChildOfElement:(id)fp8;
@end

@interface NSString (RSSExtensions)
- (void)mainThreadRSSTitleStringWithResultHolder:(id)fp8;
- (id)rssTitleString;
@end

@interface OWRendezvousBookmark : OWBookmark
{
    NSNetService *netService;
    OWRendezvousBookmarks *nonretainedBookmarks;
    unsigned int serviceCount;
    struct {
        unsigned int error:1;
        unsigned int revalidating:1;
    } rendezvousBookmarkFlags;
}

- (id)initWithNetService:(id)fp8 inBookmarks:(id)fp12;
- (void)dealloc;
- (id)drawImageIncludingBadge:(BOOL)fp8;
- (BOOL)isFolder;
- (id)netService;
- (void)incrementServiceCount;
- (void)decrementServiceCount;
- (unsigned int)serviceCount;
- (void)loadDeferredInfo;
- (void)revalidate;

@end

@interface NSNetService (OmniNetworking)
- (id)onPortAddresses;
@end

@interface OWRendezvousBookmark (Private)
- (void)_resolve;
@end

@interface OWRendezvousBookmark (NotificationsDelegatesDatasources)
- (void)netServiceDidResolveAddress:(id)fp8;
- (void)netService:(id)fp8 didNotResolve:(id)fp12;
@end

@interface OWRendezvousBookmarks : NSObject <OWBookmarkDataSource>
{
    id owner;
    NSNetServiceBrowser *browser;
    NSMutableArray *pendingAdds;
    NSMutableArray *pendingRemoves;
    NSMutableDictionary *serviceNameToBookmarkDictionary;
}

- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (void)dealloc;
- (id)archiveDictionary;
- (id)controlView;
- (id)icon;
- (void)updateUI;
- (void)reloadBookmarks;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
- (id)labelColumnTitle;

@end

@interface OWRendezvousBookmarks (Private)
- (id)_bookmarkWithDistinctService:(id)fp8;
- (void)_serviceRemovedForBookmark:(id)fp8;
- (void)_stopSearch;
@end

@interface OWRendezvousBookmarks (NotificationsDelegatesDatasources)
- (void)netServiceBrowser:(id)fp8 didFindService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didRemoveService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didNotSearch:(id)fp12;
@end

@interface OWSharedBookmark : OWBookmark
{
    NSNetService *netService;
    OWSharedBookmarks *nonretainedBookmarks;
    NSArray *addresses;
    unsigned int serviceCount;
    struct {
        unsigned int isSearchingForChildren:1;
    } sharedBookmarkFlags;
}

+ (void)initialize;
- (id)initWithNetService:(id)fp8 inBookmarks:(id)fp12;
- (void)dealloc;
- (id)drawImage;
- (id)netService;
- (void)incrementServiceCount;
- (void)decrementServiceCount;
- (unsigned int)serviceCount;
- (id)descendentCountString;
- (void)loadDeferredInfo;

@end

@interface OWSharedBookmark (Private)
- (void)_resolve;
- (void)_loadBookmark;
@end

@interface OWSharedBookmark (NotificationsDelegatesDatasources)
- (void)netServiceDidResolveAddress:(id)fp8;
@end

@interface OWSharedBookmarks : NSObject <OWBookmarkDataSource>
{
    id owner;
    NSNetServiceBrowser *browser;
    ONUDPSocket *receiveSocket;
    NSLock *receiveSocketLock;
    NSMutableArray *pendingAdds;
    NSMutableArray *pendingRemoves;
    NSMutableDictionary *serviceNameToBookmarkDictionary;
}

- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (void)dealloc;
- (id)archiveDictionary;
- (id)controlView;
- (id)icon;
- (void)updateUI;
- (void)reloadBookmarks;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;

@end

@interface OWSharedBookmarks (Private)
+ (id)_badgeFolderImageWithFolder:(id)fp8 andBadge:(id)fp12;
- (void)_stopSearch;
- (id)_bookmarkWithDistinctService:(id)fp8;
- (void)_serviceRemovedForBookmark:(id)fp8;
@end

@interface OWSharedBookmarks (NotificationsDelegatesDatasources)
- (void)netServiceBrowser:(id)fp8 didFindService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didRemoveService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didNotSearch:(id)fp12;
- (void)_watchForChanges;
@end

@interface OWSitePreferencesBookmarks : NSObject <OWBookmarkDataSource>
{
    id owner;
    OFMultiValueDictionary *domainsToSitePreferencesDict;
    struct {
        unsigned int needsReload:1;
    } flags;
}

- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (void)dealloc;
- (id)archiveDictionary;
- (id)controlView;
- (id)icon;
- (void)updateUI;
- (void)reloadBookmarks;
- (void)deleteBookmarks:(id)fp8;
- (void)addressDidChange;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
- (id)labelColumnTitle;
- (id)excludedSearchModes;

@end

@interface OWSitePreferencesBookmarks (Private)
- (void)_addBookmarkForDomain:(id)fp8;
- (void)_removeBookmarkForDomain:(id)fp8;
- (void)_releasedHoldOnAddress:(id)fp8;
- (void)_sitePreferenceChanged:(id)fp8;
- (void)_loadSitePreferences;
- (void)_sitePreferencesDidChange:(id)fp8;
- (void)_resetAllDomains;
@end

@interface OWListWindowsSpyglassScriptCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface OWGetWindowInfoSpyglassScriptCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface OWParseURLSpyglassScriptCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface OWStatusBookmarks : NSObject <OWBookmarkDataSource, OWBookmarkObserver>
{
    id owner;
    BOOL redisplayIsQueued;
    struct _OFWeakRetainIvars weakRetainIvars;
}

+ (id)badgeFolderImageWithFolder:(id)fp8 andBadge:(id)fp12;
- (id)initWithOwner:(id)fp8 fromArchiveDictionary:(id)fp12;
- (void)dealloc;
- (id)archiveDictionary;
- (id)controlView;
- (id)icon;
- (void)updateUI;
- (void)reloadBookmarks;
- (id)collectionName;
- (BOOL)isSingleMountedCollection;
- (BOOL)isOptional;
- (void)loadBookmarksWithStatus:(int)fp8;
- (void)bookmarkNeedsRedisplay:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;

@end

@interface OWStatusBookmarks (Private)
- (void)_bookmarkNeedsRedisplayNotification:(id)fp8;
@end

@interface OWStatusBookmarks (NotificationsDelegatesDatasources)
@end

@interface OWURL (OmniWebScriptability)
+ (void)didLoad;
+ (id)coerceString:(id)fp8 toClass:(Class)fp12;
- (void)handleGetCommand:(id)fp8;
@end

@interface OWUnreachableBookmarks : OWStatusBookmarks
{
}

- (id)icon;
- (void)reloadBookmarks;
- (id)collectionName;
- (void)bookmarkNeedsRedisplay:(id)fp8;

@end

@interface OWUtilityWindow : NSPanel
{
}

- (id)initWithContentRect:(struct _NSRect)fp8 styleMask:(unsigned int)fp24 backing:(int)fp28 defer:(BOOL)fp32;
- (BOOL)canBecomeMainWindow;

@end

@interface OWUtilityWindow (Private)
- (void)_setDefaultAttributes;
@end

@interface OWWorkspace (ScriptabilityPrivate)
- (void)_loadIfNecessary;
@end

@interface OWWorkspace (Scriptability)
- (id)objectSpecifier;
- (id)browsers;
- (id)valueInBrowsersAtIndex:(unsigned int)fp8;
- (void)_addBrowser:(id)fp8 atIndex:(int)fp12;
- (void)replaceInBrowsers:(id)fp8 atIndex:(int)fp12;
- (void)insertInBrowsers:(id)fp8 atIndex:(int)fp12;
- (void)insertInBrowsers:(id)fp8;
- (void)removeFromBrowsersAtIndex:(unsigned int)fp8;
- (void)setIsActive:(BOOL)fp8;
@end

@interface OWWorkspace : OFObject
{
    NSString *name;
    NSMutableArray *workspaceWindows;
    NSLock *workspaceWindowsLock;
    NSDictionary *snapshotDictionary;
    double creationDateTimeInterval;
    double modificationDateTimeInterval;
    OAWindowCascade *windowCascade;
    OFScheduledEvent *autosaveEvent;
    NSLock *autosaveEventLock;
    NSTimer *expireTimer;
    struct {
        unsigned int isLoaded:1;
        unsigned int hasChanged:1;
        unsigned int saveWindows:1;
        unsigned int isActive:1;
        unsigned int isDefault:1;
        unsigned int isValid:1;
    } flags;
}

+ (void)didLoad;
+ (void)activateWorkspace:(id)fp8;
+ (void)activateNextWorkspace;
+ (void)activatePreviousWorkspace;
+ (void)closeWorkspace:(id)fp8 delete:(BOOL)fp12;
+ (void)closeWorkspace:(id)fp8 delete:(BOOL)fp12 prompt:(BOOL)fp16;
+ (id)currentWorkspace;
+ (id)defaultWorkspace;
+ (id)workspaces;
+ (id)workspaceNamed:(id)fp8;
+ (id)safeNameForWorkspaceName:(id)fp8;
+ (BOOL)importWorkspaceFile:(id)fp8 andActivate:(BOOL)fp12;
+ (void)synchronizeWorkspaces;
+ (void)invalidateWorkspaces;
+ (void)addWorkspace:(id)fp8;
+ (id)workspacesDirectory;
+ (id)uniqueNameFromSuggestedName:(id)fp8;
+ (id)uniqueName;
- (id)init;
- (id)initWithName:(id)fp8 fromArchiveDictionary:(id)fp12;
- (id)initFromPath:(id)fp8;
- (void)dealloc;
- (id)archiveDictionary;
- (id)debugDictionary;
- (id)workspaceWindows;
- (void)addWorkspaceWindow:(id)fp8;
- (void)insertWorkspaceWindow:(id)fp8 atIndex:(int)fp12;
- (void)addWorkspaceWindowFromArchive:(id)fp8;
- (void)removeWorkspaceWindow:(id)fp8;
- (id)windowCascade;
- (id)webBrowsers;
- (id)webBrowser;
- (id)newWebBrowser;
- (id)newWebBrowserWithTabs:(id)fp8;
- (id)newWebBrowserAtPoint:(struct _NSPoint)fp8 withTabs:(id)fp16;
- (id)frontWebBrowser;
- (id)path;
- (id)name;
- (void)setName:(id)fp8;
- (void)hide;
- (void)show;
- (void)close;
- (void)didChange:(BOOL)fp8;
- (void)saveIfNeeded;
- (void)save;
- (void)autosave;
- (BOOL)isLoaded;
- (void)load;
- (BOOL)hasChanged;
- (void)setChanged:(BOOL)fp8;
- (void)isInvalid;
- (BOOL)isDefault;
- (void)setDefault:(BOOL)fp8;
- (BOOL)hasSnapshot;
- (void)takeSnapshot;
- (void)removeSnapshot;
- (void)restoreFromSnapshot;
- (BOOL)isActive;
- (BOOL)isEmpty;
- (BOOL)savesWindows;
- (void)setSavesWindows:(BOOL)fp8;
- (BOOL)autoSaves;
- (void)setAutoSaves:(BOOL)fp8;
- (int)compareName:(id)fp8;
- (int)compareDate:(id)fp8;
- (int)compare:(id)fp8;

@end

@interface OWWorkspace (Private)
+ (void)_loadWorkspaces;
+ (id)_defaultWorkspaceName;
+ (void)_createDefaultWorkspace;
+ (void)_loadSafeWorkspace;
+ (void)_tellUserAboutSafeMode:(id)fp8;
+ (id)_newWorkspaceWithContentsOfFile:(id)fp8;
+ (void)_updateWorkspacesMenu;
+ (void)_reallyUpdateWorkspacesMenu;
+ (void)_saveCurrentWorkspaceName;
+ (void)_updateWorkspaces;
+ (id)_nameForPath:(id)fp8;
+ (id)_pathForName:(id)fp8;
+ (void)_workspaceChanged:(id)fp8;
+ (BOOL)_promptBeforeClosingWorkspace:(id)fp8;
+ (id)_freezeSound;
- (void)_loadAtStartup:(BOOL)fp8;
- (void)_sortWorkspaceWindows;
- (id)_workspaceWindowsArchive;
- (id)_archiveDictionaryWithWindows:(BOOL)fp8;
- (void)_addWebBrowser:(id)fp8;
- (void)_addWorkspaceWindowsFromStateDictionary:(id)fp8;
- (void)_newWebBrowserWithResultHolder:(id)fp8;
- (void)_showAtStartup:(BOOL)fp8;
- (void)_closeAllWorkspaceWindows;
- (id)_workspaceWindowForController:(id)fp8;
- (void)_remove;
- (void)_scheduleAutosaveEvent;
- (void)_releaseAutosaveEvent;
- (void)_startExpireTimer;
- (void)_stopExpireTimer;
- (void)_expire;
@end

@interface OWWorkspace (NotificationsDelegatesDatasources)
+ (void)controllerStartedRunning:(id)fp8;
@end

@interface OWWorkspaceNameFormatter : NSFormatter
{
}

+ (void)initialize;
- (id)stringForObjectValue:(id)fp8;
- (BOOL)getObjectValue:(id *)fp8 forString:(id)fp12 errorDescription:(id *)fp16;
- (BOOL)isPartialStringValid:(id)fp8 newEditingString:(id *)fp12 errorDescription:(id *)fp16;

@end

@interface OWWorkspaceSwitcher : NSWindowController
{
    OASplitView *splitView;
    OAGradientTableView *workspaceTableView;
    NSOutlineView *windowsAndTabsOutlineView;
    NSButton *newWorkspaceButton;
    NSButton *deleteWorkspaceButton;
    NSButton *freezeButton;
    NSButton *restoreButton;
    NSButton *saveWindowsCheckbox;
    NSArray *cachedWorkspaces;
    NSArray *cachedWindows;
    void *nonretainedLastActiveWorkspace;
    BOOL workspaceSelectionIsChanging;
    NSUndoManager *undoManager;
    struct _NSSize saveWindowsButtonTitleSize;
}

+ (void)didLoad;
+ (void)initialize;
+ (id)sharedWorkspaceSwitcher;
+ (void)controllerStartedRunning:(id)fp8;
- (id)init;
- (id)initWithWindow:(id)fp8;
- (void)dealloc;
- (void)awakeFromNib;
- (void)windowDidLoad;
- (id)newWorkspaceNamed:(id)fp8;
- (void)showWorkspaceSwitcher:(id)fp8;
- (void)newWorkspace:(id)fp8;
- (void)deleteSelectedWorkspaces:(id)fp8;
- (void)freezeWorkspace:(id)fp8;
- (void)restoreWorkspace:(id)fp8;
- (void)activateWorkspace:(id)fp8;
- (void)deleteSelectedWindowsOrTabs:(id)fp8;
- (void)activateWindowOrTab:(id)fp8;
- (void)takeSaveWindowFrom:(id)fp8;
- (void)workspaceSingleClick:(id)fp8;

@end

@interface OWWindowsAndTabsOutlineView : NSOutlineView
{
}

- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (BOOL)ignoreModifierKeysWhileDragging;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;

@end

@interface OWWorkspacesTableView : OAGradientTableView
{
}

- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (BOOL)ignoreModifierKeysWhileDragging;

@end

@interface OWWorkspaceSwitcher (Private)
+ (void)_setupImages;
- (void)_recacheWorkspaces;
- (void)_recacheWindows;
- (id)_panel;
- (void)_updateUI;
- (void)_updateUIForSelectedWorkspace;
- (id)_workspaces;
- (id)_selectedWorkspace;
- (id)_workspaceWindows;
- (id)_selectedTabs;
- (id)_selectedWindows;
- (id)_workspaceWindowContainingItem:(id)fp8;
- (id)_selectedWorkspaceWindowAndTabIndex:(unsigned int *)fp8;
- (void)_switchToWorkspace:(id)fp8;
- (void)_switchToWorkspaceWindow:(id)fp8 tabIndex:(unsigned int)fp12;
- (void)_addWorkspaceFromNameDictionaryToArchiveDictionary:(id)fp8;
- (void)_deleteWorkspace:(id)fp8;
@end

@interface OWWorkspaceSwitcher (NotificationsDelegatesDatasources)
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (BOOL)tableView:(id)fp8 writeRows:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)tableView:(id)fp8 validateDrop:(id)fp12 proposedRow:(int)fp16 proposedDropOperation:(int)fp20;
- (BOOL)tableView:(id)fp8 acceptDrop:(id)fp12 row:(int)fp16 dropOperation:(int)fp20;
- (void)tableViewSelectionDidChange:(id)fp8;
- (BOOL)tableViewShouldEditNextItemWhenEditingEnds:(id)fp8;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 writeItems:(id)fp12 toPasteboard:(id)fp16;
- (unsigned int)outlineView:(id)fp8 validateDrop:(id)fp12 proposedItem:(id)fp16 proposedChildIndex:(int)fp20;
- (BOOL)outlineView:(id)fp8 acceptDrop:(id)fp12 item:(id)fp16 childIndex:(int)fp20;
- (void)splitView:(id)fp8 resizeSubviewsWithOldSize:(struct _NSSize)fp12;
- (void)workspacesDidChange:(id)fp8;
- (void)workspaceDidShow:(id)fp8;
- (void)windowDidResize:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (id)windowWillReturnUndoManager:(id)fp8;
@end

@interface OWWorkspaceWindow : OFObject
{
    OWWorkspace *workspace;
    OWBrowserController *controller;
    NSDictionary *stateDictionary;
}

+ (id)addressForTabDictionary:(id)fp8;
- (void)dealloc;
- (id)workspace;
- (void)setController:(id)fp8;
- (id)controller;
- (void)setStateDictionary:(id)fp8;
- (id)stateDictionary;
- (id)name;
- (id)address;
- (unsigned int)tabCount;
- (id)tabOrTabDictionaryAtIndex:(unsigned int)fp8;
- (void)setWorkspace:(id)fp8;
- (void)load;
- (void)show;
- (void)showObscuredByMainWindow:(BOOL)fp8;
- (void)hide;
- (void)close;
- (void)didChange:(BOOL)fp8;
- (void)save;
- (BOOL)shouldSave;
- (BOOL)minimizeWhenShown;
- (void)setMinimizeWhenShown:(BOOL)fp8;
- (id)debugDictionary;

@end

@interface OWWorkspaceWindow (Private)
- (id)_archivedAddress;
- (unsigned int)_archivedActiveTabIndex;
- (id)_archivedTabs;
- (id)_archivedAddressForTabAtIndex:(unsigned int)fp8;
@end

@interface OZLicenseKeyFormatter : OFSimpleStringFormatter
{
}

- (BOOL)isPartialStringValid:(id *)fp8 proposedSelectedRange:(struct _NSRange *)fp12 originalString:(id)fp16 originalSelectedRange:(struct _NSRange)fp20 errorDescription:(id *)fp28;

@end

@interface OZZuul : NSObject
{
    NSPanel *panel;
    NSTextField *statusField;
    NSTableView *licenseTableView;
    NSTableColumn *seatsColumn;
    NSTableColumn *ownerColumn;
    NSTableColumn *dateEnteredColumn;
    NSTableColumn *dateExpiresColumn;
    NSButton *deleteButton;
    NSButton *helpButton;
    NSButton *buyButton;
    NSPanel *addPanel;
    NSPopUpButton *licenseTypePopUp;
    NSButton *saveButton;
    NSTextField *ownerTextField;
    NSTextField *licenseKeyTextField;
    NSDateFormatter *dateFormatter;
    OZLicenseKeyFormatter *licenseKeyFormatter;
    BOOL sniffing;
    NSMutableDictionary *sniffPending;
    NSMutableArray *resolvingNetServices;
}

+ (id)sharedZuul;
+ (void)initialize;
- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)importLicenseFileAtPath:(id)fp8;
- (void)sendFeedbackEmail:(id)fp8;
- (void)showLicenses:(id)fp8;
- (void)hideLicenses:(id)fp8;
- (BOOL)displayingLicenses;
- (void)showHelp:(id)fp8;
- (void)addLicense:(id)fp8;
- (void)goToOmniStore:(id)fp8;
- (void)updateSaveButtonEnabled;
- (void)saveLicense:(id)fp8;
- (void)cancelLicense:(id)fp8;
- (void)deleteLicense:(id)fp8;
- (void)importLicenseFile:(id)fp8;

@end

@interface OZLicensingTroubleRequestSupportErrorHandler : OASendFeedbackErrorRecovery
{
}

- (void)getFeedbackAddress:(id *)fp8 andSubject:(id *)fp12;
- (id)bodyForError:(id)fp8;

@end

@interface OZZuul (PrivateAPI)
- (void)_performInMainThread:(SEL)fp8;
- (void)_addLicenseFromPath:(id)fp8;
- (id)_validateDrag:(id)fp8;
- (void)_reloadLicenseTableView;
- (void)_waited;
- (void)_switchedWorkspaces:(id)fp8;
- (void)_runNetworkThreadFailed:(id)fp8;
- (void)_setStatus:(id)fp8;
- (void)_updateType;
- (void)_showBadLicensePanel:(id)fp8;
@end

@interface OZZuul (NotificationsDelegatesDatasources)
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableViewSelectionDidChange:(id)fp8;
- (BOOL)panel:(id)fp8 isValidFilename:(id)fp12;
- (BOOL)panel:(id)fp8 shouldShowFilename:(id)fp12;
- (void)controlTextDidChange:(id)fp8;
- (void)controlTextDidEndEditing:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)concludeDragOperation:(id)fp8;
- (void)addSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)deleteSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)netServiceBrowser:(id)fp8 didFindService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didRemoveService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceDidResolveAddress:(id)fp8;
- (void)netService:(id)fp8 didNotResolve:(id)fp12;
@end

@interface OWUnlicensedPageArc : NSObject <OWCacheArc>
{
    OWContent *subject;
    NSDate *created;
}

+ (void)initialize;
- (id)initWithSubject:(id)fp8;
- (void)dealloc;
- (id)entriesWithRelation:(int)fp8;
- (int)arcType;
- (id)subject;
- (id)source;
- (id)object;
- (id)creationDate;
- (unsigned int)invalidInPipeline:(id)fp8;
- (int)traverseInPipeline:(id)fp8;
- (id)expectedResultType;
- (float)expectedCost;
- (BOOL)abortArcTask;
- (id)firstBytesDate;
- (unsigned int)bytesProcessed;
- (unsigned int)totalBytes;
- (int)status;
- (id)statusString;
- (BOOL)resultIsSource;
- (BOOL)resultIsError;
- (BOOL)shouldNotBeCachedOnDisk;
- (void)addArcObserver:(id)fp8;
- (void)removeArcObserver:(id)fp8;

@end

@interface OWUnlicensedPageCache : NSObject <OWCacheArcProvider>
{
}

+ (void)addToCacheGroup;
+ (void)removeFromCacheGroup;
- (id)allArcs;
- (id)arcsWithRelation:(int)fp8 toEntry:(id)fp12 inPipeline:(id)fp16;
- (float)cost;

@end

@interface OWUnlicensedPageCache (Private)
- (BOOL)_shouldFilterAddress:(id)fp8;
@end

@interface OWDragTargetToolbarButton : NSButton <OWSpringLoadHelper>
{
    id delegate;
    NSToolbarItem *_nonretainedToolbarItem;
    OWSpringLoadHelper *springLoadHelper;
}

- (void)dealloc;
- (id)toolbarItem;
- (void)setToolbarItem:(id)fp8;
- (int)controlSize;
- (void)setControlSize:(int)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (void)draggingExited:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (BOOL)springLoadHelperShouldFlash:(id)fp8;
- (void)springLoadHelper:(id)fp8 wantsFlash:(BOOL)fp12;
- (void)springLoadHelperWantsSpringLoad:(id)fp8;

@end

@interface OWDragTargetToolbarButton (Private)
- (void)_startSpringLoad;
- (void)_stopSpringLoad;
@end

@interface OWSpringLoadHelper : NSObject
{
    id nonretainedDelegate;
    NSTimer *springTimer;
    unsigned int flashCount;
    struct _NSRect slopRect;
}

+ (id)springLoadHelperWithDelegate:(id)fp8;
- (void)dealloc;
- (void)beginSpringLoad;
- (void)updateSpringLoad;
- (void)cancelSpringLoad;

@end

@interface OWSpringLoadHelper (Private)
+ (id)_numberFormatter;
- (id)_initWithDelegate:(id)fp8;
- (void)_startSpringTimer;
- (BOOL)_shouldFlash;
- (void)_startFlashing;
- (void)_flash;
- (void)_stopSpringTimer;
- (void)_springLoad;
@end

@interface OWTextField : OATextField
{
}

@end

@interface OWTextField (Private)
- (void)_updateLabel;
@end

@interface OWSafeWorkspacePanel : OFObject
{
    NSPanel *panel;
    NSTextField *titleField;
    OWWorkspace *workspace;
}

+ (void)showSafeWorkspacePanelForWorkspace:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)ok:(id)fp8;
- (void)showHelp:(id)fp8;

@end

@interface OWSafeWorkspacePanel (Private)
- (id)_initWithWorkspace:(id)fp8;
- (void)_show;
@end

@interface OWCacheBrowser : NSWindowController
{
    NSTableView *cachesTableView;
    NSTableView *arcsTableView;
    NSTableView *contentTableView;
    NSDrawer *infoDrawer;
    NSTextView *infoView;
    NSArray *cachedCaches;
    NSArray *cachedArcsForSelectedCache;
    NSArray *cachedContentForSelectedArc;
}

+ (id)sharedCacheBrowser;
- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)showInfo:(id)fp8;
- (void)refresh:(id)fp8;
- (void)flush:(id)fp8;

@end

@interface OWCacheBrowser (Private)
- (void)_updateUI;
- (id)_infoString;
- (id)_caches;
- (void)_recacheCaches;
- (id)_selectedCache;
- (id)_cacheInfoString;
- (id)_arcsForSelectedCache;
- (void)_recacheArcsForSelectedCache;
- (id)_selectedArc;
- (id)_arcInfoString;
- (id)_contentForSelectedArc;
- (void)_recacheContentForSelectedArc;
- (id)_selectedContent;
- (id)_contentInfoString;
@end

@interface OWCacheBrowser (NotificationsDelegatesDatasources)
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableViewSelectionDidChange:(id)fp8;
@end

@interface OWAddress (OWKURLEncoding)
- (id)displayableAddress;
@end

@interface NSTableView (OWExtensions)
+ (int)defaultFocusRingType;
@end

@interface OWBugReporter : NSWindowController <OFWeakRetain, OWTarget>
{
    NSTextField *titleField;
    NSPopUpButton *typePopUp;
    NSPopUpButton *severityPopUp;
    NSTextView *descriptionView;
    NSButton *takeScreenshotButton;
    NSButton *sendMachineInfoButton;
    NSButton *sendButton;
    NSTextField *statusField;
    NSProgressIndicator *statusIndicator;
    NSString *title;
    NSString *type;
    NSString *description;
    NSString *severity;
    NSTimer *clearStatusTimer;
    struct {
        unsigned int takeScreenshot:1;
        unsigned int sendMachineInfo:1;
    } flags;
    struct _OFWeakRetainIvars weakRetainIvars;
}

+ (id)sharedBugReporter;
- (id)init;
- (void)dealloc;
- (void)awakeFromNib;
- (void)setTitle:(id)fp8;
- (void)setType:(id)fp8;
- (void)setSeverity:(id)fp8;
- (void)setTakeScreenshot:(id)fp8;
- (void)setSendMachineInfo:(id)fp8;
- (void)sendBug:(id)fp8;
- (void)textDidChange:(id)fp8;
- (id)targetContentType;
- (void)_reportError:(id)fp8;
- (void)_errorSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (void)pipelineDidEnd:(id)fp8;
- (id)parentContentInfo;
- (id)targetTypeFormatString;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;

@end

@interface OWBugReporter (Private)
- (void)_updateUI;
- (void)_checkSendButton;
- (void)_setStatus:(id)fp8;
- (void)_stopClearStatusTimer;
- (void)_startClearStatusTimer;
- (void)_clearStatus;
@end

@interface OWTab : OFObject <OAFindControllerTarget>
{
    NSView *savePanelAccessoryView;
    NSPopUpButton *saveTypePopUp;
    OWTabCell *tabCell;
    NSTimer *tabUpdateTimer;
    OWBrowserController *browserController;
    WebView *webView;
    OWAddress *pendingAddress;
    NSString *pendingTitle;
    OWAddress *currentAddress;
    NSString *currentTitle;
    WebBackForwardList *backForwardList;
    unsigned int totalResources;
    unsigned int completedResources;
    unsigned int failedResources;
    NSString *linkHoverText;
    NSMutableArray *unloadedImageElements;
    NSMutableArray *unloadedPluginViews;
    NSMutableArray *unrequestedPopUps;
    OWWebTask *mainFrameWebTask;
    NSString *javascriptStatusText;
    int tabCreationBehavior;
    NSMutableString *searchString;
    DOMNode *searchStartNode;
    NSUndoManager *undoManager;
    struct {
        unsigned int isLoading:1;
        unsigned int isVisible:1;
        unsigned int isSwitchingPages:1;
        unsigned int hasUnviewedContent:1;
        unsigned int isDisplayingWebContent:1;
        unsigned int hasWindowScriptObject:1;
        unsigned int bypassURLFilters:1;
        unsigned int inInitFromStateDictionary:1;
    } flags;
}

+ (void)initialize;
+ (void)addObserver:(id)fp8 address:(id)fp12;
+ (void)removeObserver:(id)fp8 address:(id)fp12;
+ (void)frameDidShowAddress:(id)fp8;
- (BOOL)workspacesLoadFromCache;
- (id)initWithFrameName:(id)fp8;
- (id)init;
- (id)initWithStateDictionary:(id)fp8;
- (void)dealloc;
- (void)subscribeToNewsFeed:(id)fp8 title:(id)fp12 shouldPrompt:(BOOL)fp16;
- (void)showAddress:(id)fp8;
- (void)loadRequest:(id)fp8;
- (id)evaluateWebScript:(id)fp8;
- (void)showHistoryItem:(id)fp8;
- (void)goBack;
- (void)goForth;
- (id)previousMarkPoint;
- (id)nextMarkPoint;
- (void)reload:(id)fp8;
- (BOOL)canGoBack;
- (BOOL)canGoForth;
- (BOOL)canReload;
- (BOOL)canExpandZoomedEditor;
- (BOOL)hadError;
- (BOOL)hasUnviewedContent;
- (BOOL)canUseAutoFill;
- (void)addHistoryItem:(id)fp8;
- (void)toggleCurrentPageMarked;
- (void)markCurrentPage;
- (BOOL)itemIsMarkPoint:(id)fp8;
- (BOOL)currentPageIsMarked;
- (void)updateTabThumbnail;
- (void)willHide;
- (void)didShow;
- (void)overrideCharacterEncoding:(unsigned long)fp8;
- (void)windowChangedKeyState;
- (void)setNeedsLayout;
- (void)stopLoading:(id)fp8;
- (void)stopAnimations:(id)fp8;
- (void)viewSource:(id)fp8;
- (void)autoFillForms:(id)fp8;
- (void)saveFormValues:(id)fp8;
- (void)goBackFromContextMenu:(id)fp8;
- (void)goForthFromContextMenu:(id)fp8;
- (void)copy:(id)fp8;
- (void)selectAll:(id)fp8;
- (void)jumpToSelection:(id)fp8;
- (void)startSpeaking:(id)fp8;
- (void)stopSpeaking:(id)fp8;
- (void)saveCurrentPage:(id)fp8;
- (void)saveCurrentPageTo:(id)fp8;
- (void)savePanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)saveTypePopUpDidChange:(id)fp8;
- (void)saveAsNativeFormat:(id)fp8;
- (void)newWindowWithCurrentPage:(id)fp8;
- (void)newObscuredWindowWithCurrentPage:(id)fp8;
- (void)newTabWithCurrentPage:(id)fp8;
- (void)newBackgroundTabWithCurrentPage:(id)fp8;
- (void)addCurrentPageToBookmarks:(id)fp8;
- (void)copyCurrentPageAddress:(id)fp8;
- (void)saveAllLinkedDocuments:(id)fp8;
- (void)saveAllLinkedImages:(id)fp8;
- (void)_selectAnchor:(id)fp8 backwards:(BOOL)fp12;
- (void)_selectNextLinkBackwards:(BOOL)fp8;
- (void)selectNextAnchor:(id)fp8;
- (void)selectPreviousAnchor:(id)fp8;
- (void)subscribeToRSSFeed:(id)fp8;
- (void)subscribeToRSSFeedInOmniWeb:(id)fp8;
- (void)loadFrame:(id)fp8;
- (void)showZoomedEditor:(id)fp8;
- (void)saveSelectedLink:(id)fp8;
- (void)saveSelectedLinkTo:(id)fp8;
- (void)newWindowWithSelectedLink:(id)fp8;
- (void)newObscuredWindowWithSelectedLink:(id)fp8;
- (void)newTabWithSelectedLink:(id)fp8;
- (void)newBackgroundTabWithSelectedLink:(id)fp8;
- (void)addSelectedLinkToBookmarks:(id)fp8;
- (void)copySelectedLinkAddress:(id)fp8;
- (void)openNewWindowWithImage:(id)fp8;
- (void)openNewTabWithImage:(id)fp8;
- (void)openNewBackgroundTabWithImage:(id)fp8;
- (void)saveImage:(id)fp8;
- (void)saveImageTo:(id)fp8;
- (void)copyImage:(id)fp8;
- (void)copyImageAddress:(id)fp8;
- (void)loadImage:(id)fp8;
- (void)loadAllImages:(id)fp8;
- (void)filterImage:(id)fp8;
- (void)viewAsBookmarks:(id)fp8;
- (id)webView;
- (id)mainFrame;
- (id)tabCell;
- (id)favIcon;
- (id)forwardHistoryNodesWithLimit:(int)fp8;
- (id)backwardHistoryNodesWithLimit:(int)fp8;
- (id)historyAddress;
- (id)historyTitle;
- (id)stateDictionary;
- (id)pendingAddress;
- (id)pendingAddressTitleWithDefaultTitle:(id)fp8;
- (id)statusString;
- (id)allFormsForFrame:(id)fp8;
- (id)rssFeedsForFrame:(id)fp8;
- (id)rssFeeds;
- (id)links;
- (id)frameDocuments;
- (id)focusNode;
- (id)undoManager;
- (void)setTabCreationBehavior:(int)fp8;
- (void)showUsingTabCreationBehavior;
- (void)setBrowserController:(id)fp8;
- (id)browserController;
- (BOOL)isLoading;
- (BOOL)isIdle;
- (BOOL)isShowingBookmarks;
- (void)windowWillHide;
- (void)windowDidShow;
- (BOOL)isSwitchingPages;
- (BOOL)isDisplayingWebContent;
- (BOOL)hasUnloadedImages;
- (id)javascriptStatusText;
- (id)preferenceForKey:(id)fp8;
- (id)userAgentForURL:(id)fp8;
- (BOOL)findPattern:(id)fp8 backwards:(BOOL)fp12 wrap:(BOOL)fp16;
- (id)unrequestedPopUps;
- (void)removeUnrequestedPopUp:(id)fp8;
- (void)addUnrequestedPopUp:(id)fp8;
- (void)popUpWasRequested;
- (void)followSpokenLinkNamed:(id)fp8;

@end

@interface OWAutoFillSet : NSObject
{
    NSString *setName;
    NSDictionary *mergedDictionary;
    NSMutableDictionary *customDictionary;
    NSMutableDictionary *addressBookDictionary;
}

+ (id)allSets;
+ (id)currentSet;
+ (id)setNamed:(id)fp8;
+ (id)referenceKeyForFormKey:(id)fp8;
+ (id)LocalizationDictionary;
+ (BOOL)isReferenceKey:(id)fp8;
+ (id)synonymsForFormKey:(id)fp8;
+ (void)removeSynonym:(id)fp8;
+ (void)addSynonym:(id)fp8 forReferenceKey:(id)fp12;
+ (void)setSynonyms:(id)fp8 forFormKey:(id)fp12;
- (id)initWithName:(id)fp8;
- (void)dealloc;
- (id)setName;
- (void)setSetName:(id)fp8;
- (int)compare:(id)fp8;
- (id)displayName;
- (void)makeCurrentSet;
- (void)removeSet;
- (BOOL)canBeDeleted;
- (id)formKeys;
- (id)allValues;
- (id)valueForFormKey:(id)fp8;
- (void)setValue:(id)fp8 forFormKey:(id)fp12;
- (void)removeValueForFormKey:(id)fp8;
- (id)addressBookDictionary;
- (id)customDictionary;

@end

@interface NSArray (OWAutoFillSetExtensions)
- (id)owMutableSetValue;
@end

@interface NSString (OWAutoFillSetExtensions)
- (id)normalizedString;
@end

@interface OWAutoFillSet (Private)
+ (id)_setDictionary;
+ (void)_loadSets;
+ (void)_reloadSets;
+ (id)_setWithName:(id)fp8;
+ (void)_setSynonymDictionary;
+ (void)_populateAutoFillSetsFromAddressBook;
+ (void)_setsDidChange;
- (void)_setValue:(id)fp8 forFormKey:(id)fp12 inDictionary:(id)fp16;
- (id)_initWithName:(id)fp8 values:(id)fp12;
- (void)_updateValues:(id)fp8;
- (void)_setAddressBookValue:(id)fp8 forFormKey:(id)fp12;
- (id)_mergedDictionary;
- (void)_invalidateMergedDictionary;
- (void)_setAutoFillDictionary;
- (void)_currentSetDidChange;
- (void)_currentSetDidUpdate;
@end

@interface OWAutoFillSet (NotificationsDelegatesDatasources)
@end

@interface OWSavedHistoryItem : OWHistoryItem
{
}

- (id)childItemWithName:(id)fp8;

@end

@interface OWHistoryItem : WebHistoryItem
{
}

- (id)initWithStateDictionary:(id)fp8;
- (id)stateDictionary;
- (void)setMarkPoint:(BOOL)fp8;
- (BOOL)isMarkPoint;
- (void)setOverrideCharacterEncoding:(unsigned long)fp8;
- (unsigned long)overrideCharacterEncoding;

@end

@interface WebHistoryItem (Override)
+ (id)allocWithZone:(struct _NSZone *)fp8;
@end

@interface OWSourceViewController : OFObject <OFWeakRetain, FileSaverController>
{
    OAScrollView *scrollView;
    NSWindow *window;
    NSUndoManager *undoManager;
    NSMutableData *urlConnnectionData;
    unsigned int dataEncoding;
    NSToolbar *toolbar;
    WebFrame *webFrame;
    OWSourceTextView *genericSourceView;
    NSString *storeButtonToolTip;
    OWAddress *address;
    NSString *filepath;
    struct {
        unsigned int isNewDocument:1;
        unsigned int canColorize:1;
        unsigned int closeAfterSave:1;
        unsigned int storeInProgress:1;
        unsigned int canStore:1;
    } flags;
    struct _OFWeakRetainIvars weakRetainIvars;
}

+ (void)initialize;
+ (void)viewNewSource;
+ (void)viewSourceWithFrame:(id)fp8;
+ (void)viewSourceWithAddress:(id)fp8;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;
- (id)init;
- (void)dealloc;
- (void)viewSource:(id)fp8;
- (void)displayNewHTML:(id)fp8;
- (void)reformat:(id)fp8;
- (void)recolor:(id)fp8;
- (void)compact:(id)fp8;
- (void)reload:(id)fp8;
- (void)save:(id)fp8;
- (void)saveAs:(id)fp8;
- (void)store:(id)fp8;
- (void)increaseSize:(id)fp8;
- (void)decreaseSize:(id)fp8;
- (void)printDocument:(id)fp8;
- (id)window;
- (void)fileSavedSuccessfully:(id)fp8;
- (void)fileSavedUnsuccessfully:(id)fp8 withReason:(id)fp12;

@end

@interface OWSourceViewController (Private)
+ (id)_contentTypeForMIMEType:(id)fp8 textEncoding:(id)fp12;
- (void)_show;
- (id)_filename;
- (void)_viewNewDocument;
- (void)_setFilePath;
- (void)_viewAddress:(id)fp8;
- (void)_viewSourceFromFrame;
- (void)_appendSourceData:(id)fp8 encoding:(unsigned long)fp12;
- (void)_setDirty:(BOOL)fp8;
- (void)_requestAnyChangesBeAbandoned;
- (void)_performSave;
- (id)_sourceData;
- (void)_saveAsPanelDidEnd:(id)fp8 returnCode:(int)fp12 info:(void *)fp16;
- (void)_reloadSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_abandonSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_reload;
@end

@interface OWSourceViewController (DelegatesAndDataSources)
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (void)textDidChange:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (void)windowWillMiniaturize:(id)fp8;
- (id)undoManager;
- (id)windowWillReturnUndoManager:(id)fp8;
- (void)controllerRequestsTerminate:(id)fp8;
- (void)connection:(id)fp8 didFailWithError:(id)fp12;
- (void)connection:(id)fp8 didReceiveAuthenticationChallenge:(id)fp12;
- (void)connection:(id)fp8 didReceiveData:(id)fp12;
- (void)connection:(id)fp8 didReceiveResponse:(id)fp12;
- (id)connection:(id)fp8 willCacheResponse:(id)fp12;
- (id)connection:(id)fp8 willSendRequest:(id)fp12 redirectResponse:(id)fp16;
- (void)connectionDidFinishLoading:(id)fp8;
- (BOOL)validateToolbarItem:(id)fp8;
- (void)fileSavedSuccessfully:(id)fp8;
- (void)fileSavedUnsuccessfully:(id)fp8 withReason:(id)fp12;
@end

@interface OWOmniWebURLProtocol : NSURLProtocol
{
}

+ (void)didLoad;
+ (BOOL)canInitWithRequest:(id)fp8;
+ (id)canonicalRequestForRequest:(id)fp8;
+ (BOOL)requestIsCacheEquivalent:(id)fp8 toRequest:(id)fp12;
- (void)startLoading;
- (void)stopLoading;

@end

@interface OWOmniWebURLProtocol (Private)
- (id)_pathForResource:(id)fp8 ofType:(id)fp12 inDirectory:(id)fp16;
- (id)_resultPathForURLPath:(id)fp8;
@end

@interface OWOmniWebURLProtocol (DelegatesAndDataSources)
@end

@interface OWFormAutoFill : OFObject
{
}

+ (id)sharedFormAutoFill;
- (BOOL)canAutoFillForm:(id)fp8 inFrame:(id)fp12;
- (void)autoFillForm:(id)fp8 inFrame:(id)fp12;
- (void)saveValuesFromForm:(id)fp8 inFrame:(id)fp12 byExplicitRequest:(BOOL)fp16;

@end

@interface OWFormAutoFill (PrivateAPI)
- (void)_autoFillInputElement:(id)fp8 inFrame:(id)fp12;
- (void)_autoFillSelectElement:(id)fp8 inFrame:(id)fp12;
- (void)_saveValuesFromInputElement:(id)fp8 inFrame:(id)fp12 byExplicitRequest:(BOOL)fp16;
- (void)_saveValuesFromSelectElement:(id)fp8 inFrame:(id)fp12 byExplicitRequest:(BOOL)fp16;
- (id)_bestKeyForElement:(id)fp8;
- (id)_bestValueForElement:(id)fp8;
@end

@interface OWSearchBuilderController : NSObject
{
    OWBrowserController *browserController;
    NSWindow *sheet;
    NSTextField *messageField;
    NSTextField *nameField;
    NSTextField *shortNameField;
    NSButton *okButton;
}

+ (void)buildSearchForBrowserController:(id)fp8;
+ (void)buildSearchForBrowserController:(id)fp8 inputElement:(id)fp12;
+ (id)shortcutInputElementForView:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;

@end

@interface OWSearchBuilderController (Private)
+ (id)webFrameForView:(id)fp8;
- (id)_initWithBrowserController:(id)fp8 inputElement:(id)fp12;
- (void)_buildShortcutWithInputElement:(id)fp8;
- (id)_buildQueryForForm:(id)fp8 webFrame:(id)fp12;
- (void)_buildShortcutSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
@end

@interface OWSearchBuilderController (NotificationsDelegatesDatasources)
- (void)controlTextDidChange:(id)fp8;
- (BOOL)control:(id)fp8 textView:(id)fp12 doCommandBySelector:(SEL)fp16;
@end

@interface OWKWebCoreFieldEditor : NSTextView
{
}

- (void)keyDown:(id)fp8;
- (void)keyUp:(id)fp8;

@end

@interface OWPageInfoController : OWSiteEditorController
{
    NSOutlineView *resourceOutlineView;
    NSButton *displayButton;
    NSButton *saveAsButton;
    NSButton *viewSourceButton;
    OASearchField *searchField;
    OWResource *topResource;
    id findPattern;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)addressDidChange;
- (void)updateUI;
- (void)refreshContent:(id)fp8;
- (void)display:(id)fp8;
- (void)saveAs:(id)fp8;
- (void)viewSource:(id)fp8;
- (void)reload:(id)fp8;
- (void)search:(id)fp8;
- (void)resourceOutlineDoubleClick:(id)fp8;

@end

@interface OWPageInfoOutlineView : OWAlternatingColorsOutlineView
{
}

- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (BOOL)ignoreModifierKeysWhileDragging;

@end

@interface OWPageInfoController (Private)
- (void)_reloadContent;
- (void)_expandAllRows;
- (id)_parentForOutlineItem:(id)fp8;
@end

@interface OWPageInfoController (NotificationsDelegatesDatasources)
- (void)savePanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(id)fp16;
- (id)outlineView:(id)fp8 child:(int)fp12 ofItem:(id)fp16;
- (BOOL)outlineView:(id)fp8 isItemExpandable:(id)fp12;
- (int)outlineView:(id)fp8 numberOfChildrenOfItem:(id)fp12;
- (id)outlineView:(id)fp8 objectValueForTableColumn:(id)fp12 byItem:(id)fp16;
- (void)outlineView:(id)fp8 willDisplayCell:(id)fp12 forTableColumn:(id)fp16 item:(id)fp20;
- (id)outlineView:(id)fp8 toolTipForCell:(id)fp12 rect:(struct _NSRect *)fp16 tableColumn:(id)fp20 item:(id)fp24 mouseLocation:(struct _NSPoint)fp28;
- (BOOL)outlineView:(id)fp8 writeItems:(id)fp12 toPasteboard:(id)fp16;
@end

@interface OWWebPreferences : WebPreferences
{
    NSString *domain;
    BOOL registeredForStyleSheetChangedNotifications;
    NSMutableSet *registeredSitePreferences;
}

- (id)initWithDomain:(id)fp8;
- (void)dealloc;
- (void)setJavaEnabled:(BOOL)fp8;
- (BOOL)isJavaEnabled;
- (void)setJavaScriptEnabled:(BOOL)fp8;
- (BOOL)isJavaScriptEnabled;
- (void)setJavaScriptCanOpenWindowsAutomatically:(BOOL)fp8;
- (BOOL)javaScriptCanOpenWindowsAutomatically;
- (void)setUserStyleSheetEnabled:(BOOL)fp8;
- (BOOL)userStyleSheetEnabled;
- (void)setUserStyleSheetLocation:(id)fp8;
- (id)userStyleSheetLocation;
- (void)setUserStyleSheet:(id)fp8;
- (id)userStyleSheet;
- (void)setFixedFontFamily:(id)fp8;
- (id)fixedFontFamily;
- (void)setStandardFontFamily:(id)fp8;
- (id)standardFontFamily;
- (void)setDefaultFixedFontSize:(int)fp8;
- (int)defaultFixedFontSize;
- (void)setDefaultFontSize:(int)fp8;
- (int)defaultFontSize;
- (void)setMinimumFontSize:(int)fp8;
- (int)minimumFontSize;
- (void)setDefaultTextEncodingName:(id)fp8;
- (id)defaultTextEncodingName;
- (void)setAllowsAnimatedImageLooping:(BOOL)fp8;
- (BOOL)allowsAnimatedImageLooping;
- (void)setAllowsAnimatedImages:(BOOL)fp8;
- (BOOL)allowsAnimatedImages;
- (void)setanimatedImageLoopCount:(int)fp8;
- (int)animatedImageLoopCount;
- (void)setLoadsImagesAutomatically:(BOOL)fp8;
- (BOOL)loadsImagesAutomatically;
- (BOOL)tabsToLinks;
- (void)setTabsToLinks:(BOOL)fp8;
- (void)setShouldMouseFocusOnLinks:(BOOL)fp8;
- (BOOL)shouldMouseFocusOnLinks;
- (void)setMaximumFontSize:(float)fp8;
- (float)maximumFontSize;
- (void)setJavaScriptDebugEnabled:(BOOL)fp8;
- (BOOL)javaScriptDebugEnabled;
- (void)setJavaScriptPopUpPolicy:(unsigned int)fp8;
- (unsigned int)javaScriptPopUpPolicy;
- (void)setShouldOpenUnrequestedPopUps:(BOOL)fp8;
- (BOOL)shouldOpenUnrequestedPopUps;

@end

@interface OWWebPreferences (Private)
- (void)_postPreferencesChangesNotification;
- (void)_preferencesDidChangeNotification:(id)fp8;
- (id)_sitePreferenceForKey:(id)fp8;
@end

@interface NSView (OWKExtensions)
- (void)recursiveDrawRect:(struct _NSRect)fp8;
@end

@interface OWCookieStorage : OFObject
{
}

+ (void)initialize;
+ (id)sharedCookieStorage;
+ (id)requestWithCookiesForRequest:(id)fp8;
+ (void)processResponse:(id)fp8 mainDocumentURL:(id)fp12 firstLog:(BOOL)fp16;
- (id)cookies;
- (void)setCookie:(id)fp8;
- (void)deleteCookie:(id)fp8;
- (id)cookiesForURL:(id)fp8;
- (void)setCookies:(id)fp8 forURL:(id)fp12 mainDocumentURL:(id)fp16;
- (int)cookieAcceptPolicy;
- (void)setCookieAcceptPolicy:(int)fp8;

@end

@interface NSHTTPCookieStorage (Override)
+ (void)performPosing;
+ (id)_replacement_sharedHTTPCookieStorage;
@end

@interface OWCookieStorage (Private)
+ (id)nsCookiesForOWCookies:(id)fp8;
@end

@interface OWCookieStorage (SPI)
- (id)_cookieRequestHeaderFieldsForURL:(id)fp8 withExtraCookies:(id)fp12;
- (id)_cookiesForURL:(id)fp8 withExtraCookies:(id)fp12;
- (void)_setPrivateBrowsingEnabled:(BOOL)fp8;
- (struct OpaqueCFHTTPCookieStorage *)_cookieStorage;
@end

@interface OWBookmarksURLProtocol : NSURLProtocol
{
}

+ (void)didLoad;
+ (BOOL)canInitWithRequest:(id)fp8;
+ (id)canonicalRequestForRequest:(id)fp8;
+ (BOOL)requestIsCacheEquivalent:(id)fp8 toRequest:(id)fp12;
- (void)startLoading;
- (void)stopLoading;

@end

@interface OWBookmarksView : NSView <WebDocumentView, WebDocumentRepresentation>
{
    CDAnonymousStruct2 flags;
}

+ (void)didLoad;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setDataSource:(id)fp8;
- (void)dataSourceUpdated:(id)fp8;
- (void)setNeedsLayout:(BOOL)fp8;
- (void)layout;
- (void)viewWillMoveToHostWindow:(id)fp8;
- (void)viewDidMoveToHostWindow;
- (void)receivedData:(id)fp8 withDataSource:(id)fp12;
- (void)receivedError:(id)fp8 withDataSource:(id)fp12;
- (void)finishedLoadingWithDataSource:(id)fp8;
- (BOOL)canProvideDocumentSource;
- (id)documentSource;
- (id)title;

@end

@interface OWWebView : WebView
{
}

- (void)otherMouseDown:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;

@end

@interface OWWebView (Private)
- (id)_tab;
@end

@interface OWTab (WebFormDelegate_Private)
- (BOOL)getLoginField:(id *)fp8 passwordField:(id *)fp12 forForm:(id)fp16 forFrame:(id)fp20;
- (void)saveRegularForm:(id)fp8 forFrame:(id)fp12 submissionListener:(id)fp16;
- (BOOL)_shouldSavePasswordForURL:(id)fp8;
- (long)_getKCItem:(struct OpaqueSecKeychainItemRef **)fp8 forURL:(id)fp12 login:(id)fp16 password:(id)fp20 createOrUpdate:(BOOL)fp24;
- (long)_getLogin:(id *)fp8 password:(id *)fp12 forURL:(id)fp16;
- (unsigned long)_keychainProtocolForURL:(id)fp8;
- (void)_saveLoginAndPasswordSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
@end

@interface OWTab (WebFormDelegate)
- (void)textFieldDidBeginEditing:(id)fp8 inFrame:(id)fp12;
- (void)textFieldDidEndEditing:(id)fp8 inFrame:(id)fp12;
- (void)textDidChangeInTextField:(id)fp8 inFrame:(id)fp12;
- (void)textDidChangeInTextArea:(id)fp8 inFrame:(id)fp12;
- (BOOL)textField:(id)fp8 doCommandBySelector:(SEL)fp12 inFrame:(id)fp16;
- (BOOL)textField:(id)fp8 shouldHandleEvent:(id)fp12 inFrame:(id)fp16;
- (void)frame:(id)fp8 sourceFrame:(id)fp12 willSubmitForm:(id)fp16 withValues:(id)fp20 submissionListener:(id)fp24;
@end

@interface OWTab (WebPolicyDelegate)
- (void)_downloadFromWebPolicyDecisionListener:(id)fp8;
- (void)webView:(id)fp8 decidePolicyForMIMEType:(id)fp12 request:(id)fp16 frame:(id)fp20 decisionListener:(id)fp24;
- (void)webView:(id)fp8 decidePolicyForNavigationAction:(id)fp12 request:(id)fp16 frame:(id)fp20 decisionListener:(id)fp24;
- (void)resendFormSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)webView:(id)fp8 decidePolicyForNewWindowAction:(id)fp12 request:(id)fp16 newFrameName:(id)fp20 decisionListener:(id)fp24;
- (void)webView:(id)fp8 unableToImplementPolicyWithError:(id)fp12 frame:(id)fp16;
@end

@interface DOMNode (Blocked)
- (BOOL)_omniweb_isFiltered;
@end

@interface DOMElement (Blocking)
- (BOOL)_omniweb_isFiltered;
@end

@interface OWTab (WebUIDelegate)
- (id)webView:(id)fp8 createWebViewWithRequest:(id)fp12;
- (void)webViewShow:(id)fp8;
- (void)webViewClose:(id)fp8;
- (void)webViewFocus:(id)fp8;
- (void)webViewUnfocus:(id)fp8;
- (void)webView:(id)fp8 setStatusText:(id)fp12;
- (id)webViewStatusText:(id)fp8;
- (BOOL)webViewAreToolbarsVisible:(id)fp8;
- (void)webView:(id)fp8 setToolbarsVisible:(BOOL)fp12;
- (BOOL)webViewIsStatusBarVisible:(id)fp8;
- (void)webView:(id)fp8 setStatusBarVisible:(BOOL)fp12;
- (BOOL)webViewIsResizable:(id)fp8;
- (void)webView:(id)fp8 setResizable:(BOOL)fp12;
- (void)webView:(id)fp8 setFrame:(struct _NSRect)fp12;
- (struct _NSRect)webViewFrame:(id)fp8;
- (void)webView:(id)fp8 runJavaScriptAlertPanelWithMessage:(id)fp12 initiatedByFrame:(id)fp16;
- (BOOL)webView:(id)fp8 runJavaScriptConfirmPanelWithMessage:(id)fp12 initiatedByFrame:(id)fp16;
- (id)webView:(id)fp8 runJavaScriptTextInputPanelWithPrompt:(id)fp12 defaultText:(id)fp16 initiatedByFrame:(id)fp20;
- (void)webView:(id)fp8 runOpenPanelForFileButtonWithResultListener:(id)fp12;
- (void)webView:(id)fp8 mouseDidMoveOverElement:(id)fp12 modifierFlags:(unsigned int)fp16;
- (id)webView:(id)fp8 contextMenuItemsForElement:(id)fp12 defaultMenuItems:(id)fp16;
- (void)_startImageDragForView:(id)fp8 sourceEvent:(id)fp12 imageElementDictionary:(id)fp16;
- (unsigned int)webView:(id)fp8 dragSourceActionMaskForPoint:(struct _NSPoint)fp12;
- (void)webView:(id)fp8 setIsUnrequestedPopUpOpenedBy:(id)fp12;
- (void)_searchTimeout;
- (BOOL)webView:(id)fp8 shouldHandleKeyDown:(unsigned short)fp12 forFrame:(id)fp16;
- (id)webView:(id)fp8 dragImageAndOffset:(struct _NSSize *)fp12 forLinkElement:(id)fp16;
- (id)omniWebStringForKey:(id)fp8;
- (float)webViewHeaderHeight:(id)fp8;
- (float)webViewFooterHeight:(id)fp8;
- (void)webView:(id)fp8 drawHeaderInRect:(struct _NSRect)fp12;
- (void)webView:(id)fp8 drawFooterInRect:(struct _NSRect)fp12;
- (id)webView:(id)fp8 willReturnPluginView:(id)fp12 forArguments:(id)fp16 controller:(id)fp20;
- (void)webView:(id)fp8 saveFrameView:(id)fp12 showingPanel:(BOOL)fp16;
- (BOOL)webViewShouldInterruptJavaScript:(id)fp8;
@end

@interface OWTab (WebFrameLoadDelegate_Private)
- (void)_trustPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
@end

@interface OWTab (WebFrameLoadDelegate)
- (void)webView:(id)fp8 didStartProvisionalLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 didReceiveServerRedirectForProvisionalLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 didFinishLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 didCommitLoadForFrame:(id)fp12;
- (void)webView:(id)fp8 didChangeLocationWithinPageForFrame:(id)fp12;
- (void)webView:(id)fp8 didReceiveTitle:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didReceiveIcon:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFailProvisionalLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 didFailLoadWithError:(id)fp12 forFrame:(id)fp16;
- (void)webView:(id)fp8 willPerformClientRedirectToURL:(id)fp12 delay:(double)fp16 fireDate:(id)fp24 forFrame:(id)fp28;
- (void)webView:(id)fp8 windowScriptObjectAvailable:(id)fp12;
@end

@interface OWTab (WebResourceLoadDelegate)
- (void)_setMainFrameWebTask:(id)fp8;
- (id)webView:(id)fp8 identifierForInitialRequest:(id)fp12 fromDataSource:(id)fp16;
- (void)webView:(id)fp8 imageElement:(id)fp12 didNotLoadFromURL:(id)fp16;
- (id)webView:(id)fp8 resource:(id)fp12 willSendRequest:(id)fp16 redirectResponse:(id)fp20 fromDataSource:(id)fp24;
- (void)webView:(id)fp8 resource:(id)fp12 didReceiveResponse:(id)fp16 fromDataSource:(id)fp20;
- (void)webView:(id)fp8 resource:(id)fp12 didReceiveContentLength:(unsigned int)fp16 fromDataSource:(id)fp20;
- (void)webView:(id)fp8 resource:(id)fp12 didFinishLoadingFromDataSource:(id)fp16;
- (void)webView:(id)fp8 resource:(id)fp12 didFailLoadingWithError:(id)fp16 fromDataSource:(id)fp20;
- (BOOL)webView:(id)fp8 shouldFilterImageForElement:(id)fp12 fromURL:(id)fp16;
@end

@interface OWKJSPromptPanel : NSWindowController
{
    NSTextField *titleField;
    NSTextField *promptField;
    NSTextField *inputField;
    int returnCode;
}

- (id)init;
- (void)dealloc;
- (int)runWithTitle:(id)fp8 prompt:(id)fp12 defaultText:(id)fp16 returningText:(id *)fp20;
- (void)ok:(id)fp8;
- (void)cancel:(id)fp8;

@end

@interface OWKJSPromptPanel (Private)
@end

@interface OWKJSPromptPanel (NotificationsDelegatesDatasources)
@end

@interface OWKAlternatePrintColor : NSColor
{
    NSColor *screenColor;
    NSColor *printColor;
}

+ (id)colorWithScreenColor:(id)fp8 printColor:(id)fp12;
- (id)initWithScreenColor:(id)fp8 printColor:(id)fp12;
- (void)dealloc;
- (void)set;
- (id)colorSpaceName;

@end

@interface OWKViewFactory : WebViewFactory
{
}

- (void)dealloc;
- (id)_adBlockedMouseOverColor;
- (id)_errorColor;
- (id)_fillColor;
- (void)drawFilteredContentInRect:(struct _NSRect)fp8 ofView:(id)fp24;
- (void)drawUnloadedImage:(id)fp8 inRect:(struct _NSRect)fp12;

@end

@interface OWKViewFactory (PrivateAPI)
+ (void)_setupImages;
@end

@interface OWBlockedAdInfo : OFObject
{
    NSWindow *infoWindow;
    OWBlockedAdInfoView *infoView;
    WebFrame *frame;
    struct _NSRect currentImageRect;
    NSDictionary *element;
    NSTimer *delayTimer;
    struct _NSRect hoverRect;
    double fadeStartTime;
}

+ (id)sharedBlockedAdInfo;
- (id)init;
- (void)dealloc;
- (struct _NSRect)_infoRectForImageRect:(struct _NSRect)fp8 forParentWindow:(id)fp24;
- (void)attachToElement:(id)fp8;
- (void)_fadeIn;
- (void)_changeFade;
- (void)detach;

@end

@interface OWBorderlessWindow : NSWindow
{
}

- (id)initWithFrame:(struct _NSRect)fp8;

@end

@interface OWBlockedAdInfo (Private)
- (void)_setupInfoWindow;
@end

@interface OWBlockedAdInfo (NotificationsDelegatesDatasources)
@end

@interface OWBlockedAdInfoView : NSView
{
    NSDictionary *info;
    NSString *altString;
    NSString *blockedImageFromString;
    NSString *linksToString;
}

+ (void)didLoad;
- (BOOL)isFlipped;
- (void)drawRect:(struct _NSRect)fp8;
- (id)info;
- (void)setInfo:(id)fp8;
- (struct _NSSize)minSize;

@end

@interface OWBlockedAdInfoView (Private)
+ (void)_setupImages;
- (struct _NSSize)_altSize;
- (struct _NSSize)_blockedFromStringSize;
- (struct _NSSize)_linksToStringSize;
- (struct _NSSize)_textSize;
- (struct _NSSize)_adBlockSize;
- (struct _NSRect)_borderRectForAdBlockSize:(struct _NSSize)fp8;
- (struct _NSPoint)_iconPointForAdBlockSize:(struct _NSSize)fp8;
- (struct _NSRect)_altStringRectForAdBlockSize:(struct _NSSize)fp8;
- (struct _NSRect)_blockedFromStringRectForAdBlockSize:(struct _NSSize)fp8;
- (struct _NSRect)_linksToStringRectForStringSize:(struct _NSSize)fp8;
@end

@interface OWBlockedAdInfoView (NotificationsDelegatesDatasources)
@end

@interface OWPluginStreamResource : OFObject <OWPageInfoResource>
{
    OWAddress *_address;
    NSString *_mimeType;
    NSDictionary *_headers;
    long long _size;
    CDAnonymousStruct4 flags;
}

- (id)initWithPluginResource:(id)fp8;
- (void)dealloc;
- (int)resourceType;
- (id)name;
- (BOOL)nameIsBold;
- (id)drawImage;
- (id)address;
- (id)sizeString;
- (id)typeString;
- (id)modificationDate;
- (id)expirationDate;
- (id)displayedResources;
- (BOOL)wasOpenedByPageInfoPanel;
- (void)setWasOpenedByPageInfoPanel;
- (void)filterUsingPattern:(id)fp8;
- (BOOL)matchesPattern:(id)fp8;

@end

@interface OWPluginResource : OFObject <OWPageInfoResource>
{
    WebBaseNetscapePluginView *_pluginView;
    NSMutableArray *_streamResources;
    NSMutableArray *_displayedStreamResources;
    CDAnonymousStruct4 flags;
}

- (id)initWithPluginView:(id)fp8;
- (void)dealloc;
- (int)resourceType;
- (id)name;
- (BOOL)nameIsBold;
- (id)drawImage;
- (id)address;
- (id)sizeString;
- (id)typeString;
- (id)modificationDate;
- (id)expirationDate;
- (id)displayedResources;
- (BOOL)wasOpenedByPageInfoPanel;
- (void)setWasOpenedByPageInfoPanel;
- (void)filterUsingPattern:(id)fp8;
- (BOOL)matchesPattern:(id)fp8;

@end

@interface OWResource : OFObject <OWPageInfoResource>
{
    WebResource *webResource;
    NSURLResponse *urlResponse;
    int resourceType;
    NSMutableArray *containers;
    NSMutableArray *displayedContainers;
    NSMutableDictionary *containerCache;
    CDAnonymousStruct4 flags;
}

+ (void)_setupImages;
+ (id)drawImageForResourceType:(int)fp8;
- (id)initFromWebFrame:(id)fp8;
- (void)dealloc;
- (id)webResource;
- (BOOL)matchesPattern:(id)fp8;
- (int)resourceType;
- (id)name;
- (BOOL)nameIsBold;
- (id)drawImage;
- (id)address;
- (id)sizeString;
- (id)typeString;
- (id)modificationDate;
- (id)expirationDate;
- (id)displayedResources;
- (BOOL)wasOpenedByPageInfoPanel;
- (void)setWasOpenedByPageInfoPanel;
- (void)filterUsingPattern:(id)fp8;

@end

@interface OWResource (Private)
- (id)_initWithWebResource:(id)fp8 urlResponse:(id)fp12 fromWebFrame:(id)fp16;
- (void)_categorizeResourcesFromWebFrame:(id)fp8;
- (id)_containerForResource:(id)fp8;
@end

@interface OWResourceContainer : OFObject <OWPageInfoResource>
{
    int type;
    NSString *name;
    NSMutableArray *resources;
    NSMutableArray *displayedResources;
    CDAnonymousStruct4 flags;
}

+ (void)_setupImages;
+ (id)drawImageForResourceType:(int)fp8;
- (id)initWithType:(int)fp8;
- (void)dealloc;
- (void)addResource:(id)fp8;
- (void)removeAllResources;
- (int)compareResourceType:(id)fp8;
- (int)resourceType;
- (id)name;
- (BOOL)nameIsBold;
- (id)drawImage;
- (id)address;
- (id)sizeString;
- (id)typeString;
- (id)modificationDate;
- (id)expirationDate;
- (id)displayedResources;
- (BOOL)wasOpenedByPageInfoPanel;
- (void)setWasOpenedByPageInfoPanel;
- (void)filterUsingPattern:(id)fp8;
- (BOOL)matchesPattern:(id)fp8;

@end

@interface OWResourceContainer (Private)
+ (id)_nameForResourceType:(int)fp8;
@end

@interface WebKitDownloadedFileFossil : OWDownloadedFileFossil
{
    OWAddress *siteAddress;
    NSURLRequest *initialRequest;
    OWAddress *lastAddress;
    NSData *resumeData;
    NSURLDownload *_download;
    OWWebTask *webTask;
    struct {
        unsigned int shouldPresent:1;
    } flags;
}

+ (void)downloadAddress:(id)fp8 toFile:(id)fp12 forSiteAddress:(id)fp16 shouldPresent:(BOOL)fp20;
+ (void)downloadAddress:(id)fp8 promptForFileInWindow:(id)fp12 forSiteAddress:(id)fp16;
+ (void)downloadAddresses:(id)fp8 promptForFileInWindow:(id)fp12 forSiteAddress:(id)fp16;
+ (void)setSiteAddress:(id)fp8;
+ (id)downloadWindowForAuthenticationSheet:(id)fp8;
- (id)initWithArchive:(id)fp8;
- (void)dealloc;
- (id)archiveDictionary;
- (BOOL)isActive;
- (id)lastAddress;
- (unsigned long long)startPosition;
- (unsigned long long)workDone;
- (unsigned long long)workToBeDone;
- (double)duration;
- (double)estimatedRemainingTimeInterval;
- (void)abortDownload;
- (void)reload;
- (void)resume;

@end

@interface WebKitDownloadedFileFossil (Private)
+ (id)_fossilForDownload:(id)fp8 createIfAbsent:(BOOL)fp12;
+ (id)_fossilForDownload:(id)fp8;
+ (void)_removeFossilForDownload:(id)fp8;
+ (void)_downloadAddressesSheetDidEndForSavePanel:(id)fp8 returnCode:(int)fp12 callbackInvocation:(id)fp16;
+ (void)_downloadAddress:(id)fp8 toFile:(id)fp12 forSiteAddress:(id)fp16;
- (id)_initWithDownload:(id)fp8;
- (void)_setDownload:(id)fp8;
- (void)_updateLastAddress;
- (void)_cacheResumeData;
- (void)_setShouldPresent:(BOOL)fp8;
- (void)_present;
@end

@interface WebKitDownloadedFileFossil (DelegatesAndDataSources)
+ (void)downloadDidBegin:(id)fp8;
+ (id)download:(id)fp8 willSendRequest:(id)fp12 redirectResponse:(id)fp16;
+ (void)download:(id)fp8 didReceiveAuthenticationChallenge:(id)fp12;
+ (void)download:(id)fp8 didCancelAuthenticationChallenge:(id)fp12;
+ (void)download:(id)fp8 didReceiveResponse:(id)fp12;
+ (void)download:(id)fp8 willResumeWithResponse:(id)fp12 fromByte:(long long)fp16;
+ (void)download:(id)fp8 didReceiveDataOfLength:(unsigned int)fp12;
+ (BOOL)download:(id)fp8 shouldDecodeSourceDataOfMIMEType:(id)fp12;
+ (void)download:(id)fp8 decideDestinationWithSuggestedFilename:(id)fp12;
+ (void)download:(id)fp8 didCreateDestination:(id)fp12;
+ (void)downloadDidFinish:(id)fp8;
+ (void)download:(id)fp8 didFailWithError:(id)fp12;
- (void)downloadDidBegin:(id)fp8;
- (id)download:(id)fp8 willSendRequest:(id)fp12 redirectResponse:(id)fp16;
- (void)download:(id)fp8 didReceiveResponse:(id)fp12;
- (void)download:(id)fp8 willResumeWithResponse:(id)fp12 fromByte:(long long)fp16;
- (void)download:(id)fp8 didReceiveDataOfLength:(unsigned int)fp12;
- (BOOL)download:(id)fp8 shouldDecodeSourceDataOfMIMEType:(id)fp12;
- (void)download:(id)fp8 decideDestinationWithSuggestedFilename:(id)fp12;
- (void)download:(id)fp8 didCreateDestination:(id)fp12;
- (void)downloadDidFinish:(id)fp8;
- (void)download:(id)fp8 didFailWithError:(id)fp12;
@end

@interface OWWebTask : OFObject
{
    NSString *targetTypeFormatString;
    OWAddress *lastAddress;
    NSString *mimeType;
    NSDate *firstBytesDate;
    unsigned long long startPosition;
    unsigned long long workDone;
    unsigned long long workToBeDone;
    NSError *error;
    NSDate *keepActiveDate;
    struct {
        unsigned int isRunning:1;
        unsigned int hasThread:1;
        unsigned int hasBeenExpanded:1;
        unsigned int wasActive:1;
    } flags;
    OWWebTask *parentTask;
    NSMutableArray *activeChildTasks;
    NSString *compositeTypeString;
    id nonretainedStopTarget;
    SEL stopSelector;
    NSString *statusString;
}

+ (void)initialize;
+ (BOOL)hasActiveTasks;
+ (id)activeTasks;
+ (id)topLevelTask;
+ (id)webPagesTask;
+ (id)newsFeedsTask;
+ (id)bookmarksTask;
+ (id)downloadsTask;
- (id)initWithTargetTypeFormatString:(id)fp8 request:(id)fp12 parentTask:(id)fp16 stopWithTarget:(id)fp20 action:(SEL)fp24;
- (void)dealloc;
- (void)abortTask;
- (id)lastAddress;
- (double)timeSinceTreeActivationInterval;
- (double)estimatedRemainingTreeTimeInterval;
- (BOOL)hadError;
- (BOOL)isRunning;
- (BOOL)hasThread;
- (id)compositeTypeString;
- (unsigned long long)workDone;
- (unsigned long long)workToBeDone;
- (unsigned long long)workDoneIncludingChildren;
- (unsigned long long)workToBeDoneIncludingChildren;
- (id)statusString;
- (void)setStatusString:(id)fp8;
- (unsigned int)activeTaskCount;
- (id)activeChildTasks;
- (unsigned int)activeChildTaskCount;
- (BOOL)wasOpenedByProcessPanel;
- (void)setWasOpenedByProcessPanel;
- (void)didBegin;
- (void)willSendRequest:(id)fp8 redirectResponse:(id)fp12;
- (void)didReceiveResponse:(id)fp8;
- (void)willResumeWithResponse:(id)fp8 fromByte:(long long)fp12;
- (void)didReceiveDataOfLength:(unsigned int)fp8;
- (void)didFinishLoading;
- (void)didFailLoadingWithError:(id)fp8;

@end

@interface OWWebTask (Private)
- (id)_initTaskHeaderWithTitle:(id)fp8 parentTask:(id)fp12;
- (void)_setLastAddress:(id)fp8;
- (void)_recalculateCompositeTypeString;
- (void)_addChildTask:(id)fp8;
- (void)_removeChildTask:(id)fp8;
- (void)_keepActiveForTimeInterval:(double)fp8;
- (void)_checkActiveStatus;
- (void)_stopChildTasks;
@end

@interface WebBasePluginPackage (OmniWebOverrides)
+ (void)didLoad;
+ (id)replacement_pluginWithPath:(id)fp8;
- (void)registerWithOFBundleRegistryIndicatingDisabled:(BOOL)fp8;
@end

@interface OWTab (Private)
+ (BOOL)_akamaiStyleDomain:(id)fp8;
- (BOOL)_shouldFilterContentOfSize:(struct _NSSize)fp8 fromURL:(id)fp16;
- (id)_newTabForCommandClickBehavior:(int)fp8 shouldShow:(BOOL)fp12;
- (id)_newTabForCommandClickBehavior:(int)fp8;
- (void)_resignFirstResponder;
- (void)_closeTab;
- (void)_destroy;
- (void)_releaseWebView;
- (void)_closeUnrequestedPopups;
- (void)_detach;
- (void)_setStatusString:(id)fp8;
- (void)_updateStatus;
- (void)_recursiveSaveFormValuesForFrame:(id)fp8;
- (void)_recursiveAutoFillFormForFrame:(id)fp8;
- (BOOL)_recursiveCanUseAutoFillForFrame:(id)fp8;
- (id)_recursiveFindPattern:(id)fp8 inFrame:(id)fp12;
- (id)_heuristicallyReparseAddress:(id)fp8;
- (void)_subscribeToNewsFeed:(id)fp8 title:(id)fp12 shouldPrompt:(BOOL)fp16 forceIntoOmniWeb:(BOOL)fp20;
- (id)_recursiveRSSFeedsForFrame:(id)fp8;
- (id)_linksForFrame:(id)fp8;
- (id)_recursiveLinksForFrame:(id)fp8;
- (void)_recursiveAddDocumentsForFrame:(id)fp8 toMutableArray:(id)fp12;
- (BOOL)_isImageUnloaded:(id)fp8;
- (void)_loadImageElement:(id)fp8 shouldBypassFilters:(BOOL)fp12;
- (void)_showErrorForUnreachablePage:(id)fp8 error:(id)fp12 forFrame:(id)fp16;
- (BOOL)_isOnlyPageInTab;
- (BOOL)_isOnlyTabInWindow;
- (BOOL)_isOnlyPageInWindow;
- (BOOL)_javascriptCanFocus;
- (BOOL)_javascriptCanResize;
- (void)_setupSavePanel:(id)fp8 saveAsWebView:(BOOL)fp12;
- (void)_startTabUpdateTimer;
- (void)_stopTabUpdateTimer;
- (void)_updateTabThumbnailFromTimer;
- (void)_queueTabThumbnailUpdate;
- (void)_updateTabThumbnail;
- (id)tabThumbnailImage;
- (void)_startLoadingURL:(id)fp8;
- (void)_setPendingTitle:(id)fp8;
- (void)_updateCurrentAddress;
- (void)_stopLoading;
- (void)_addMenuItemWithTitle:(id)fp8 action:(SEL)fp12 representedObject:(id)fp16 toMutableArray:(id)fp20;
- (void)_addMenuItemsForLink:(id)fp8 toMutableArray:(id)fp12 withLayout:(int)fp16;
- (void)_addMenuItemsForImage:(id)fp8 toMutableArray:(id)fp12 withLayout:(int)fp16;
- (void)_addMenuItemsForWebFrame:(id)fp8 toMutableArray:(id)fp12 withLayout:(int)fp16;
- (id)_linkedAddressesWithContentTypePrefix:(id)fp8 excludeContentTypePrefix:(id)fp12;
- (id)_webFrameForSender:(id)fp8;
- (id)_addressForWebFrame:(id)fp8;
- (id)_webFrameAddressForSender:(id)fp8;
- (id)_selectedAddress;
- (id)_addressForSender:(id)fp8;
- (id)_addressForElement:(id)fp8;
- (id)_imageAddressForElement:(id)fp8;
- (id)_suggestedTitleForElement:(id)fp8;
- (void)_updateSitePreferenceDomain;
- (void)_startListeningForDefault:(id)fp8 usingSelector:(SEL)fp12 fireNow:(BOOL)fp16;
- (void)_startListeningForDefault:(id)fp8 usingSelector:(SEL)fp12;
- (void)_textSizeMultiplierDidChange:(id)fp8;
- (void)openPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)_recursiveAutofillLoginAndPasswordFormsForFrame:(id)fp8;
- (void)autofillLoginAndPasswordForms;
- (id)_linkInSearchCacheWithPrefix:(id)fp8 followingLink:(id)fp12;
- (id)_nextPageSearchStrings;
- (void)_writePDFFromAddress:(id)fp8 toFile:(id)fp12;
- (void)_logHTTPResponse:(id)fp8;
@end

@interface OWAddress (DownloadExtensions)
+ (id)downloadDirectoryPathForAddress:(id)fp8;
+ (id)lastDownloadDirectory;
+ (void)setLastDownloadDirectory:(id)fp8;
+ (void)_sheetDidEndForSavePanel:(id)fp8 returnCode:(int)fp12 callbackInvocation:(id)fp16;
- (id)downloadDirectoryPath;
- (void)runSavePanelForSiteAddress:(id)fp8 fileType:(id)fp12 relativeToWindow:(id)fp16 callbackTarget:(id)fp20 selector:(SEL)fp24;
@end

@interface OWZoomedTextEditor : NSWindowController
{
    DOMHTMLTextAreaElement *ownerElement;
    WebFrame *webFrame;
    NSToolbar *toolbar;
    NSScrollView *editView;
    BOOL windowIsClosing;
    struct _NSRect doublyZoomedFrame;
}

+ (void)initialize;
- (id)initForElement:(id)fp8 inFrame:(id)fp12;
- (void)dealloc;
- (void)display;
- (void)invalidate;
- (void)importText:(id)fp8;
- (void)windowDidBecomeKey:(id)fp8;
- (void)windowDidResignKey:(id)fp8;
- (struct _NSRect)windowWillUseStandardFrame:(id)fp8 defaultFrame:(struct _NSRect)fp12;
- (void)windowDidResize:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)textStorageDidProcessEditing:(id)fp8;

@end

@interface OWZoomedTextEditor (NSToolbarDelegate)
- (id)toolbar:(id)fp8 itemForItemIdentifier:(id)fp12 willBeInsertedIntoToolbar:(BOOL)fp16;
- (id)toolbarAllowedItemIdentifiers:(id)fp8;
- (id)toolbarDefaultItemIdentifiers:(id)fp8;
- (void)_importTextPanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
@end

@interface OWFilteredURLProtocol : NSURLProtocol
{
}

+ (void)didLoad;
+ (void)initialize;
+ (BOOL)canInitWithRequest:(id)fp8;
+ (id)canonicalRequestForRequest:(id)fp8;
+ (BOOL)requestIsCacheEquivalent:(id)fp8 toRequest:(id)fp12;
- (void)startLoading;
- (void)stopLoading;

@end

@interface NSMutableURLRequest (FilteredProtocol)
- (void)setFiltered:(BOOL)fp8;
@end

@interface NSURLRequest (FilteredProtocol)
- (id)isFiltered;
@end

@interface NSURLConnection (OmniWebOverrides)
+ (void)didLoad;
@end

@interface OWPipelineURLProtocol : NSURLProtocol <OWTarget, OFWeakRetain>
{
    struct _OFWeakRetainIvars weakRetainIvars;
    OWContent *content;
    struct {
        unsigned int reportedFailureToClient:1;
    } _flags;
}

+ (void)didLoad;
+ (BOOL)canInitWithRequest:(id)fp8;
+ (id)canonicalRequestForRequest:(id)fp8;
+ (BOOL)requestIsCacheEquivalent:(id)fp8 toRequest:(id)fp12;
- (id)initWithRequest:(id)fp8 cachedResponse:(id)fp12 client:(id)fp16;
- (void)dealloc;
- (void)startLoading;
- (void)stopLoading;
- (id)targetContentType;
- (id)targetAlternateContentTypes;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (void)pipelineDidEnd:(id)fp8;
- (id)parentContentInfo;
- (id)targetTypeFormatString;
- (void)invalidateWeakRetains;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;

@end

@interface OWPipelineURLProtocol (Private)
- (void)_reportFailureToClient;
@end

@interface OWPluginContainerView : NSView
{
    NSView *blockedPluginView;
    BOOL isFiltered;
    int trackingTag;
    WebPluginController *controller;
    NSURL *baseURL;
}

- (id)initWithView:(id)fp8 controller:(id)fp12 baseURL:(id)fp16;
- (void)dealloc;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewHasMoved:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseUp:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)loadFilteredContent;
- (BOOL)isFiltered;
- (void)webPlugInDestroy;
- (id)objectForWebScript;
- (void)removeTrackingRect;
- (void)resetTrackingRect;
- (BOOL)_omni_isFiltered;
- (id)_omni_blockedURL;

@end

@interface OWFilteredView : NSView <WebDocumentView, WebDocumentRepresentation>
{
    WebDataSource *_dataSource;
    int trackingTag;
    CDAnonymousStruct2 flags;
}

+ (void)didLoad;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (void)drawRect:(struct _NSRect)fp8;
- (void)setDataSource:(id)fp8;
- (void)dataSourceUpdated:(id)fp8;
- (void)setNeedsLayout:(BOOL)fp8;
- (void)layout;
- (void)viewWillMoveToHostWindow:(id)fp8;
- (void)viewDidMoveToHostWindow;
- (void)mouseUp:(id)fp8;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)viewWillMoveToWindow:(id)fp8;
- (void)viewDidMoveToWindow;
- (void)viewHasMoved:(id)fp8;
- (void)receivedData:(id)fp8 withDataSource:(id)fp12;
- (void)receivedError:(id)fp8 withDataSource:(id)fp12;
- (void)finishedLoadingWithDataSource:(id)fp8;
- (BOOL)canProvideDocumentSource;
- (id)documentSource;
- (id)title;
- (void)removeTrackingRect;
- (void)resetTrackingRect;
- (BOOL)_omni_isFiltered;
- (id)_omni_blockedURL;
- (id)_omni_blockedFormat;

@end

@interface WebIconDatabase (OHPageIconCache)
+ (id)scalePageIcon:(id)fp8;
+ (id)fallbackIconForAddress:(id)fp8;
- (id)pageIconForIconAddress:(id)fp8;
- (id)pageIconForDocumentAddress:(id)fp8;
- (void)cachePageIcon:(id)fp8 withAddress:(id)fp12 forDocumentAddress:(id)fp16;
- (void)requestPageIcon:(id)fp8 forAddress:(id)fp12 withDelegate:(id)fp16;
- (void)cancelAllRequestsForDelegate:(id)fp8;
- (void)requestDidFinish:(id)fp8;
@end

@interface OHPageIconCache (WebIconDatabase)
+ (id)sharedCache;
@end

@interface OWBrowserController (Scriptability)
+ (void)didLoad;
+ (id)coerceNumber:(id)fp8 toClass:(Class)fp12;
+ (id)coerceWindow:(id)fp8 toClass:(Class)fp12;
+ (id)browserControllerWithUniqueID:(unsigned int)fp8;
+ (BOOL)accessInstanceVariablesDirectly;
- (void)setAddressString:(id)fp8;
- (id)addressString;
- (void)setShowsTabDrawer:(BOOL)fp8;
- (BOOL)showsTabDrawer;
- (id)valueForKey:(id)fp8;
- (void)takeValue:(id)fp8 forKey:(id)fp12;
- (id)objectSpecifier;
- (void)handleReloadCommand:(id)fp8;
- (void)handleCloseScriptCommand:(id)fp8;
- (void)handlePrintScriptCommand:(id)fp8;
- (void)handleSaveScriptCommand:(id)fp8;
- (id)valueInTabsAtIndex:(unsigned int)fp8;
- (void)replaceInTabs:(id)fp8 atIndex:(int)fp12;
- (void)insertInTabs:(id)fp8 atIndex:(int)fp12;
- (void)insertInTabs:(id)fp8;
- (void)removeFromTabsAtIndex:(int)fp8;
- (void)setTab:(id)fp8;
@end

@interface OWTab (Scriptability)
- (void)setAddressString:(id)fp8;
- (id)addressString;
- (id)objectSpecifier;
- (void)handleCloseCommand:(id)fp8;
- (void)handleReloadCommand:(id)fp8;
- (void)handleStopCommand:(id)fp8;
- (BOOL)canStop;
@end

@interface OWRunScriptStringCommand : NSScriptCommand
{
}

- (id)tab;
- (id)performDefaultImplementation;

@end

@interface OWZoomedTextView : NSTextView
{
}

- (BOOL)readSelectionFromPasteboard:(id)fp8 type:(id)fp12;
- (id)readablePasteboardTypes;
- (id)acceptableDragTypes;

@end

@interface OWCarbonFileURLProtocol : OWPipelineURLProtocol
{
}

+ (void)didLoad;
+ (BOOL)canInitWithRequest:(id)fp8;
+ (id)canonicalRequestForRequest:(id)fp8;
+ (BOOL)requestIsCacheEquivalent:(id)fp8 toRequest:(id)fp12;
- (void)startLoading;

@end

