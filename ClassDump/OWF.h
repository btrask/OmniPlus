class-dump: /Applications/OmniWeb.app/Contents/Frameworks/OWF.framework/Versions/A/OWF

/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

struct OFStringDecoderState {
    unsigned int encoding;
    union {
        struct {
            unsigned int partialCharacter;
            unsigned short utf8octetsremaining;
        } utf8;
    } vars;
};

struct OWStaticArcInitialization {
    int _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    id _field7;
    char _field8;
    char _field9;
    char _field10;
    char _field11;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct _NSZone;

struct _OFWeakRetainIvars {
    CDAnonymousStruct1 lock;
    unsigned int count;
};

struct _OWDataStreamBufferDescriptor {
    char *_field1;
    unsigned int _field2;
    unsigned int _field3;
    struct _OWDataStreamBufferDescriptor *_field4;
};

struct _OWObjectStreamBuffer {
    unsigned int _field1;
    id _field2[128];
    struct _OWObjectStreamBuffer *_field3;
};

struct _opaque_pthread_cond_t {
    long __sig;
    char __opaque[24];
};

struct _opaque_pthread_mutex_t {
    long __sig;
    char __opaque[40];
};

typedef struct {
    unsigned int locked;
} CDAnonymousStruct1;

typedef struct {
    void *group;
    unsigned int priority:16;
    unsigned int maximumSimultaneousThreadsInGroup:8;
    unsigned int _private:8;
} CDAnonymousStruct2;

typedef struct {
    id _field1;
    char *_field2;
    char *_field3;
    char *_field4;
    int _field5;
} CDAnonymousStruct3;

/*
 * File: /Applications/OmniWeb.app/Contents/Frameworks/OWF.framework/Versions/A/OWF
 * Arch: PowerPC (ppc)
 *       Current version: 1.0.0, Compatibility version: 1.0.0
 */

@protocol NSCoding
- (void)encodeWithCoder:(id)fp8;
- (id)initWithCoder:(id)fp8;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)fp8;
@end

@protocol NSObject
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)fp8;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12;
- (id)performSelector:(SEL)fp8 withObject:(id)fp12 withObject:(id)fp16;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)fp8;
- (BOOL)isMemberOfClass:(Class)fp8;
- (BOOL)conformsToProtocol:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned int)retainCount;
- (id)description;
@end

@protocol OFMessageQueuePriority
- (CDAnonymousStruct2)messageQueueSchedulingInfo;
@end

@protocol OFWeakRetain
- (void)invalidateWeakRetains;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (id)strongRetain;
@end

@protocol OWCacheArc <NSObject>
- (id)entriesWithRelation:(int)fp8;
- (id)subject;
- (id)source;
- (id)object;
- (int)arcType;
- (unsigned int)invalidInPipeline:(id)fp8;
- (int)traverseInPipeline:(id)fp8;
- (id)expectedResultType;
- (float)expectedCost;
- (BOOL)abortArcTask;
- (id)firstBytesDate;
- (unsigned int)bytesProcessed;
- (unsigned int)totalBytes;
- (int)status;
- (id)statusString;
- (id)creationDate;
- (BOOL)resultIsSource;
- (BOOL)resultIsError;
- (BOOL)shouldNotBeCachedOnDisk;
- (void)addArcObserver:(id)fp8;
- (void)removeArcObserver:(id)fp8;
@end

@protocol OWCacheArcProvider <NSObject>
- (id)allArcs;
- (id)arcsWithRelation:(int)fp8 toEntry:(id)fp12 inPipeline:(id)fp16;
- (float)cost;
@end

@protocol OWCacheContentProvider <NSObject>
- (BOOL)canStoreContent:(id)fp8;
- (id)storeContent:(id)fp8;
- (void)adjustHandle:(id)fp8 reference:(int)fp12;
- (unsigned int)contentHashForHandle:(id)fp8;
- (id)contentForHandle:(id)fp8;
- (BOOL)canStoreArc:(id)fp8;
- (id)addArc:(id)fp8;
- (void)invalidateResource:(id)fp8 beforeDate:(id)fp12;
- (void)invalidateArc:(id)fp8;
@end

@protocol OWConcreteCacheEntry <NSObject>
- (BOOL)endOfData;
- (BOOL)contentIsValid;
@end

@protocol OWPipelineDeallocationObserver
- (void)pipelineWillDeallocate:(id)fp8;
@end

@protocol OWProcessorContext <NSObject>
- (CDAnonymousStruct2)messageQueueSchedulingInfo;
- (void)processedBytes:(unsigned int)fp8 ofBytes:(unsigned int)fp12;
- (id)firstBytesDate;
- (unsigned int)bytesProcessed;
- (unsigned int)totalBytes;
- (id)tasks;
- (id)promptView;
- (id)outerContentInfos;
- (id)logDescription;
- (void)processorStatusChanged:(id)fp8;
- (void)processorDidRetire:(id)fp8;
- (BOOL)hadError;
- (void)noteErrorName:(id)fp8 reason:(id)fp12;
- (void)mightAffectResource:(id)fp8;
- (void)addContent:(id)fp8 fromProcessor:(id)fp12;
- (void)extraContent:(id)fp8 fromProcessor:(id)fp12 forAddress:(id)fp16;
- (void)cacheControl:(id)fp8;
- (void)addContent:(id)fp8 fromProcessor:(id)fp12 flags:(unsigned int)fp16;
- (void)addRedirectionContent:(id)fp8 sameURI:(BOOL)fp12;
- (void)addUnknownContent:(id)fp8 fromProcessor:(id)fp12;
- (id)contextObjectForKey:(id)fp8;
- (id)contextObjectForKey:(id)fp8 isDependency:(BOOL)fp12;
- (id)preferenceForKey:(id)fp8;
@end

@protocol OWSGMLToken <NSObject>
- (id)sgmlString;
- (id)sgmlStringWithQuotingFlags:(int)fp8;
- (id)string;
- (int)tokenType;
@end

@protocol OWTarget
- (id)targetContentType;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (id)parentContentInfo;
- (id)targetTypeFormatString;
@end

@interface OWCacheControlSettings : OFObject
{
    NSDate *serverDate;
    NSNumber *ageAtFetch;
    NSNumber *maxAge;
    NSDate *explicitExpire;
    BOOL noCache;
    BOOL noStore;
    BOOL mustRevalidate;
}

+ (id)cacheSettingsForHeaderDictionary:(id)fp8;
+ (id)cacheSettingsForMultiValueDictionary:(id)fp8;
+ (id)cacheSettingsWithNoCache;
+ (id)cacheSettingsWithMaxAgeInterval:(double)fp8;
- (void)dealloc;
- (void)setServerDate:(id)fp8;
- (void)setAgeAtFetch:(id)fp8;
- (void)setMaxAge:(id)fp8;
- (void)setExpirationDate:(id)fp8;
- (void)addHeaders:(id)fp8;
- (void)addSettings:(id)fp8;
- (BOOL)mightExpireWithinTimeInterval:(double)fp8;

@end

@interface OWCacheSearch : OFObject
{
    OWContent *sourceEntry;
    int searchRelation;
    OWPipeline *weaklyRetainedPipeline;
    float unacceptableCost;
    OFHeap *cachesToSearch;
    OFHeap *arcsToConsider;
    NSMutableSet *rejectedArcs;
    NSMutableSet *freeArcs;
}

- (id)initForRelation:(int)fp8 toEntry:(id)fp12 inPipeline:(id)fp16;
- (void)dealloc;
- (void)addCaches:(id)fp8;
- (void)addFreeArcs:(id)fp8;
- (void)setRejectedArcs:(id)fp8;
- (void)rejectArc:(id)fp8;
- (void)setCostLimit:(float)fp8;
- (id)source;
- (id)nextArcWithoutBlocking;
- (BOOL)endOfData;
- (void)waitForAvailability;
- (float)estimateCostForArc:(id)fp8;
- (id)debugDictionary;

@end

@interface OWCacheSearch (Private)
- (void)_queryOneCache;
@end

@interface OWContentCacheGroup : NSObject
{
    NSMutableArray *caches;
    id resultCache;
}

+ (void)initialize;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
+ (id)defaultCacheGroup;
+ (id)scheduler;
+ (id)cacheValidationPreference;
+ (void)addObserver:(id)fp8;
+ (void)removeObserver:(id)fp8;
+ (void)invalidateResource:(id)fp8 beforeDate:(id)fp12;
- (id)init;
- (void)dealloc;
- (void)addCache:(id)fp8 atStart:(BOOL)fp12;
- (void)removeCache:(id)fp8;
- (void)setResultCache:(id)fp8;
- (id)caches;
- (id)resultCache;

@end

@interface OWMemoryCache : OFObject <OWCacheArcProvider, OWCacheContentProvider>
{
    NSLock *lock;
    NSMutableDictionary *arcsBySubject;
    NSMutableSet *knownOtherContent;
    id backingCache;
    OFScheduledEvent *expireEvent;
}

- (id)init;
- (void)dealloc;
- (void)setResultCache:(id)fp8;
- (id)resultCache;
- (void)setFlush:(BOOL)fp8;
- (id)allArcs;
- (id)arcsWithRelation:(int)fp8 toEntry:(id)fp12 inPipeline:(id)fp16;
- (float)cost;
- (void)removeArcsWithRelation:(int)fp8 toEntry:(id)fp12;
- (id)addArc:(id)fp8;
- (id)storeContent:(id)fp8;
- (BOOL)canStoreContent:(id)fp8;
- (BOOL)canStoreArc:(id)fp8;
- (void)adjustHandle:(id)fp8 reference:(int)fp12;
- (unsigned int)contentHashForHandle:(id)fp8;
- (id)contentForHandle:(id)fp8;
- (void)invalidateResource:(id)fp8 beforeDate:(id)fp12;
- (void)invalidateArc:(id)fp8;
- (id)debugDictionary;

@end

@interface OWMemoryCacheEntry : OFObject
{
    OWStaticArc *arc;
    OWMemoryCacheEntry *next;
    double lastUsed;
    double reasonableLifetime;
    struct {
        unsigned int hasBeenOfferedToNextCache:1;
        unsigned int superseded:1;
        unsigned int shouldRemove:1;
        unsigned int hasValidator:1;
    } flags;
}

- (id)initWithArc:(id)fp8;
- (void)dealloc;
- (id)arc;
- (void)touch;
- (void)invalidate;
- (void)substituteArc:(id)fp8;

@end

@interface OWMemoryCache (Private)
- (void)_scanArcsForSubject:(id)fp8 giving:(id)fp12;
- (void)_scanArcsFor:(id)fp8 relation:(int)fp12 giving:(id)fp16;
- (id)_keyForSubject:(id)fp8;
- (void)_flushCache:(id)fp8;
- (void)_scheduleExpireBeforeDate:(id)fp8;
- (void)_expire;
- (void)_purgeMarkedEntriesFromRows:(id)fp8;
- (void)_lockedCancelCurrentExpireEvent;
- (void)_removeAllArcs;
- (void)_invalidateAllArcs;
@end

@interface OWStaticArc : OFObject <OWCacheArc>
{
    int arcType;
    OWContent *source;
    OWContent *subject;
    OWContent *object;
    NSDictionary *contextDependencies;
    NSDate *creationDate;
    NSDate *freshUntil;
    BOOL resultIsSource;
    BOOL resultIsError;
    BOOL shouldNotBeCachedOnDisk;
    BOOL invalidated;
    BOOL nonReusable;
}

+ (void)initialize;
+ (id)stringFromInvalidityFlags:(unsigned int)fp8;
+ (BOOL)deserializeProperties:(struct OWStaticArcInitialization *)fp8 fromBuffer:(id)fp12;
- (id)serialize;
- (id)initWithArcInitializationProperties:(struct OWStaticArcInitialization)fp8;
- (void)dealloc;
- (int)arcType;
- (id)subject;
- (id)source;
- (id)object;
- (id)entriesWithRelation:(int)fp8;
- (int)relationsOfEntry:(id)fp8 intern:(id *)fp12;
- (unsigned int)invalidInPipeline:(id)fp8;
- (int)traverseInPipeline:(id)fp8;
- (id)expectedResultType;
- (float)expectedCost;
- (BOOL)abortArcTask;
- (id)firstBytesDate;
- (unsigned int)bytesProcessed;
- (unsigned int)totalBytes;
- (int)status;
- (id)statusString;
- (id)creationDate;
- (BOOL)resultIsSource;
- (BOOL)resultIsError;
- (BOOL)shouldNotBeCachedOnDisk;
- (BOOL)dominatesArc:(id)fp8;
- (void)invalidate;
- (id)debugDictionary;
- (void)addArcObserver:(id)fp8;
- (void)removeArcObserver:(id)fp8;

@end

@interface OWAddress : OFObject <OWConcreteCacheEntry, NSCopying>
{
    OWURL *url;
    NSString *target;
    NSString *methodString;
    NSDictionary *methodDictionary;
    struct {
        unsigned int effect:3;
        unsigned int forceAlwaysUnique:1;
    } flags;
    NSString *cacheKey;
    NSDictionary *contextDictionary;
}

+ (void)initialize;
+ (void)controllerDidInitialize:(id)fp8;
+ (id)shortcutDictionary;
+ (void)setShortcutDictionary:(id)fp8;
+ (void)registerDefaultShortcutDictionary;
+ (void)reloadShortcutDictionaryFromDefaults;
+ (void)reloadAddressFilterArrayFromDefaults;
+ (void)addAddressToWhitelist:(id)fp8;
+ (void)addAddressToBlacklist:(id)fp8;
+ (id)stringForEffect:(int)fp8;
+ (int)effectForString:(id)fp8;
+ (id)addressWithURL:(id)fp8 target:(id)fp12 methodString:(id)fp16 methodDictionary:(id)fp20 effect:(int)fp24 forceAlwaysUnique:(BOOL)fp28 contextDictionary:(id)fp32;
+ (id)addressWithURL:(id)fp8 target:(id)fp12 methodString:(id)fp16 methodDictionary:(id)fp20 effect:(int)fp24 forceAlwaysUnique:(BOOL)fp28;
+ (id)addressWithURL:(id)fp8 target:(id)fp12 effect:(int)fp16;
+ (id)addressWithURL:(id)fp8;
+ (id)addressForString:(id)fp8;
+ (id)addressForDirtyString:(id)fp8;
+ (id)addressWithFilename:(id)fp8;
+ (id)addressFromNSURL:(id)fp8;
- (id)initWithURL:(id)fp8 target:(id)fp12 methodString:(id)fp16 methodDictionary:(id)fp20 effect:(int)fp24 forceAlwaysUnique:(BOOL)fp28 contextDictionary:(id)fp32;
- (id)initWithURL:(id)fp8 target:(id)fp12 methodString:(id)fp16 methodDictionary:(id)fp20 effect:(int)fp24 forceAlwaysUnique:(BOOL)fp28;
- (id)initWithURL:(id)fp8 target:(id)fp12 effect:(int)fp16;
- (id)initWithURL:(id)fp8;
- (id)initWithArchiveDictionary:(id)fp8;
- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (id)url;
- (id)proxyURL;
- (id)methodString;
- (id)methodDictionary;
- (id)target;
- (id)localFilename;
- (id)addressString;
- (id)stringValue;
- (int)effect;
- (id)effectString;
- (id)archiveDictionary;
- (void)encodeWithCoder:(id)fp8;
- (id)drawLabel;
- (BOOL)isVisited;
- (BOOL)isSecure;
- (id)bestKnownTitleWithFragment;
- (unsigned int)hash;
- (BOOL)isEqual:(id)fp8;
- (BOOL)isSameDocumentAsAddress:(id)fp8;
- (BOOL)representsFile;
- (id)contextDictionary;
- (id)probableContentTypeBasedOnPath;
- (id)contentType;
- (BOOL)endOfData;
- (BOOL)contentIsValid;
- (id)cacheKey;
- (id)shortDisplayString;
- (id)bestKnownTitle;
- (BOOL)isAlwaysUnique;
- (id)addressForRelativeString:(id)fp8;
- (id)addressForRelativeString:(id)fp8 target:(id)fp12 effect:(int)fp16;
- (id)addressForRelativeString:(id)fp8 inProcessorContext:(id)fp12 target:(id)fp16 effect:(int)fp20;
- (id)addressForDirtyRelativeString:(id)fp8;
- (id)addressWithGetQuery:(id)fp8;
- (id)addressWithPath:(id)fp8;
- (id)addressWithMethodString:(id)fp8;
- (id)addressWithMethodString:(id)fp8 methodDictionary:(id)fp12 forceAlwaysUnique:(BOOL)fp16;
- (id)addressWithTarget:(id)fp8;
- (id)addressWithEffect:(int)fp8;
- (id)addressWithForceAlwaysUnique:(BOOL)fp8;
- (id)newUniqueVersionOfAddress;
- (id)addressWithoutFragment;
- (id)addressWithContextDictionary:(id)fp8;
- (id)addressWithContextObject:(id)fp8 forKey:(id)fp12;
- (id)suggestedFilename;
- (id)suggestedFileType;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)debugDictionary;
- (id)shortDescription;
- (BOOL)isFiltered;
- (BOOL)isWhitelisted;
- (id)NSURL;
- (id)NSURLRequest;

@end

@interface OWAddress (Private)
+ (void)_readDefaults;
@end

@interface OWNetLocation : OFObject
{
    NSString *username;
    NSString *password;
    NSString *hostname;
    NSString *port;
    NSString *shortDisplayName;
}

+ (id)netLocationWithString:(id)fp8;
- (id)initWithUsername:(id)fp8 password:(id)fp12 hostname:(id)fp16 port:(id)fp20;
- (void)dealloc;
- (id)username;
- (id)password;
- (id)hostname;
- (id)port;
- (id)hostnameWithPort;
- (id)displayString;
- (id)shortDisplayString;
- (id)debugDictionary;
- (id)shortDescription;

@end

@interface OWProxyServer : OFObject
{
}

+ (void)initialize;
+ (id)proxyURLForURL:(id)fp8;
+ (BOOL)usePassiveFTP;

@end

@interface OWProxyServer (Private)
+ (void)_startMonitoringProxySettings;
+ (void)_updateProxySettingsFromDictionary:(id)fp8;
+ (void)_setProxySettingsDictionary:(id)fp8;
+ (id)_proxySettingsDictionary;
+ (id)_proxyURLWithHost:(id)fp8 port:(unsigned int)fp12;
@end

@interface OWURL : OFObject <NSCopying>
{
    NSString *scheme;
    NSString *netLocation;
    NSString *path;
    NSString *params;
    NSString *query;
    NSString *fragment;
    NSString *schemeSpecificPart;
    CDAnonymousStruct1 derivedAttributesSimpleLock;
    NSString *_cachedCompositeString;
    NSString *_cachedShortDisplayString;
    OWNetLocation *_cachedParsedNetLocation;
    NSString *_cachedDomain;
    NSString *_cacheKey;
    OWContentType *_contentType;
}

+ (void)initialize;
+ (void)didLoad;
+ (void)readDefaults;
+ (id)urlWithScheme:(id)fp8 netLocation:(id)fp12 path:(id)fp16 params:(id)fp20 query:(id)fp24 fragment:(id)fp28;
+ (id)urlWithScheme:(id)fp8 netLocation:(id)fp12 path:(id)fp16 params:(id)fp20 queryDictionary:(id)fp24 fragment:(id)fp28;
+ (id)urlWithScheme:(id)fp8 schemeSpecificPart:(id)fp12 fragment:(id)fp16;
+ (id)urlFromString:(id)fp8;
+ (id)urlFromDirtyString:(id)fp8;
+ (id)urlFromFilthyString:(id)fp8;
+ (id)urlFromNSURL:(id)fp8;
+ (id)cleanURLString:(id)fp8;
+ (void)setURLEncoding:(unsigned long)fp8;
+ (unsigned long)urlEncoding;
+ (id)decodeURLString:(id)fp8 encoding:(unsigned long)fp12;
+ (id)decodeURLString:(id)fp8;
+ (id)encodeURLString:(id)fp8 asQuery:(BOOL)fp12 leaveSlashes:(BOOL)fp16 leaveColons:(BOOL)fp20;
+ (id)encodeURLString:(id)fp8 encoding:(unsigned long)fp12 asQuery:(BOOL)fp16 leaveSlashes:(BOOL)fp20 leaveColons:(BOOL)fp24;
+ (id)contentTypeForScheme:(id)fp8;
+ (void)registerSecureScheme:(id)fp8;
+ (id)pathComponentsForPath:(id)fp8;
+ (id)lastPathComponentForPath:(id)fp8;
+ (id)stringByDeletingLastPathComponentFromPath:(id)fp8;
+ (unsigned int)minimumDomainComponentsForDomainComponents:(id)fp8;
+ (id)domainForHostname:(id)fp8;
- (void)dealloc;
- (id)NSURL;
- (id)scheme;
- (id)netLocation;
- (id)path;
- (id)params;
- (id)query;
- (id)fragment;
- (id)schemeSpecificPart;
- (id)compositeString;
- (id)cacheKey;
- (id)stringToNetLocation;
- (id)fetchPath;
- (id)proxyFetchPath;
- (id)pathComponents;
- (id)lastPathComponent;
- (id)stringByDeletingLastPathComponent;
- (id)parsedNetLocation;
- (id)hostname;
- (id)domain;
- (id)shortDisplayString;
- (unsigned int)hash;
- (BOOL)isEqual:(id)fp8;
- (id)contentType;
- (BOOL)isSecure;
- (id)urlFromRelativeString:(id)fp8;
- (id)urlForPath:(id)fp8;
- (id)urlForQuery:(id)fp8;
- (id)urlWithoutFragment;
- (id)urlWithFragment:(id)fp8;
- (id)urlWithoutUsernamePasswordOrFragment;
- (id)baseURL;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)debugDictionary;
- (id)shortDescription;

@end

@interface NSURL (OWExtensions)
- (id)_ow_originalDataAsString;
@end

@interface OWURL (Private)
+ (void)controllerDidInitialize:(id)fp8;
+ (id)urlWithLowercaseScheme:(id)fp8 netLocation:(id)fp12 path:(id)fp16 params:(id)fp20 query:(id)fp24 fragment:(id)fp28;
+ (id)urlWithLowercaseScheme:(id)fp8 schemeSpecificPart:(id)fp12 fragment:(id)fp16;
- (id)_initWithLowercaseScheme:(id)fp8;
- (id)initWithLowercaseScheme:(id)fp8 netLocation:(id)fp12 path:(id)fp16 params:(id)fp20 query:(id)fp24 fragment:(id)fp28;
- (id)initWithScheme:(id)fp8 netLocation:(id)fp12 path:(id)fp16 params:(id)fp20 query:(id)fp24 fragment:(id)fp28;
- (id)initWithLowercaseScheme:(id)fp8 schemeSpecificPart:(id)fp12 fragment:(id)fp16;
- (id)initWithScheme:(id)fp8 schemeSpecificPart:(id)fp12 fragment:(id)fp16;
- (id)fakeRootURL;
- (void)_locked_parseNetLocation;
- (id)_newURLStringWithEncodedHostname:(BOOL)fp8;
@end

@interface NSException (OWConcreteCacheEntry) <OWConcreteCacheEntry>
- (BOOL)endOfData;
- (BOOL)contentIsValid;
- (id)contentType;
@end

@interface OWAbstractContent : OFObject <OWConcreteCacheEntry>
{
}

- (id)init;
- (id)initWithName:(id)fp8;
- (void)dealloc;
- (BOOL)endOfData;
- (BOOL)contentIsValid;

@end

@interface OWAbstractObjectStream : OWStream
{
}

- (void)writeObject:(id)fp8;
- (void)writeFormat:(id)fp8;
- (id)objectAtIndex:(unsigned int)fp8;
- (id)objectAtIndex:(unsigned int)fp8 withHint:(void **)fp12;
- (unsigned int)objectCount;
- (BOOL)isIndexPastEnd:(unsigned int)fp8;
- (id)newCursor;

@end

@interface OWCompoundObjectStream : OWAbstractObjectStream
{
    OWAbstractObjectStream *framingStream;
    OWAbstractObjectStream *interjectedStream;
    unsigned int interjectedAtIndex;
}

+ (id)cursorAtCursor:(id)fp8 beforeStream:(id)fp12;
- (id)initWithStream:(id)fp8 interjectingStream:(id)fp12 atIndex:(unsigned int)fp16;
- (void)dealloc;
- (id)objectAtIndex:(unsigned int)fp8;
- (unsigned int)objectCount;
- (unsigned int)translateIndex:(unsigned int)fp8 fromStream:(id)fp12;
- (void)waitForDataEnd;

@end

@interface OWContent : OFObject
{
    OWContentInfo *contentInfo;
    CDAnonymousStruct1 lock;
    NSConditionLock *metadataCompleteCondition;
    id concreteContent;
    NSMutableDictionary *containingCaches;
    OFMultiValueDictionary *metaData;
    unsigned int metadataHash;
    unsigned int contentHash;
    BOOL metadataComplete;
    unsigned char dataComplete;
    unsigned char hasValidator;
    unsigned char smallConcreteType;
    OWParameterizedContentType *cachedContentType;
    NSArray *cachedContentEncodings;
}

+ (void)initialize;
+ (struct _NSZone *)contentZone;
+ (id)contentWithAddress:(id)fp8;
+ (id)contentWithAddress:(id)fp8 redirectionFlags:(unsigned int)fp12 interimContent:(id)fp16;
+ (id)contentWithDataStream:(id)fp8 isSource:(BOOL)fp12;
+ (id)contentWithData:(id)fp8 headers:(id)fp12;
+ (id)contentWithString:(id)fp8 contentType:(id)fp12 isSource:(BOOL)fp16;
+ (id)contentWithConcreteCacheEntry:(id)fp8;
+ (id)unknownContentFromContent:(id)fp8;
- (id)initWithContent:(id)fp8;
- (id)initWithContent:(id)fp8 type:(id)fp12;
- (id)initWithName:(id)fp8 content:(id)fp12;
- (id)initWithName:(id)fp8;
- (void)dealloc;
- (id)contentInfo;
- (BOOL)checkForAvailability:(BOOL)fp8;
- (id)contentType;
- (id)fullContentType;
- (id)contentEncodings;
- (BOOL)isAddress;
- (id)address;
- (BOOL)isDataStream;
- (id)dataCursor;
- (id)objectCursor;
- (id)objectValue;
- (BOOL)isException;
- (BOOL)endOfData;
- (BOOL)isHashable;
- (BOOL)contentIsValid;
- (BOOL)isStorable;
- (BOOL)isSource;
- (BOOL)hasValidator;
- (void)addHeader:(id)fp8 value:(id)fp12;
- (void)addHeader:(id)fp8 values:(id)fp12;
- (void)addHeaders:(id)fp8;
- (void)removeHeader:(id)fp8;
- (void)setContentTypeString:(id)fp8;
- (void)setContentType:(id)fp8;
- (void)setFullContentType:(id)fp8;
- (void)setCharsetProvenance:(int)fp8;
- (void)markEndOfHeaders;
- (BOOL)endOfHeaders;
- (void)waitForEndOfHeaders;
- (id)headers;
- (id)lastObjectForKey:(id)fp8;
- (id)cacheControlSettings;
- (id)headersAsPropertyList;
- (void)addHeadersFromPropertyList:(id)fp8;
- (id)suggestedFileAttributesWithAddress:(id)fp8;
- (BOOL)isEqual:(id)fp8;
- (unsigned int)hash;
- (unsigned int)contentHash;
- (void)useHandle:(id)fp8 forCache:(id)fp12;
- (id)handleForCache:(id)fp8;
- (id)copyWithMutableHeaders;

@end

@interface OWContent (Private)
- (id)_invalidContentType:(SEL)fp8;
- (void)_locked_fillContent;
- (void)_shareHandles:(id)fp8;
- (BOOL)_locked_addHeader:(id)fp8 values:(id)fp12 value:(id)fp16;
- (id)debugDictionary;
@end

@interface OWCursor : OFObject
{
    NSException *abortException;
}

+ (void)initialize;
- (id)initFromCursor:(id)fp8;
- (void)dealloc;
- (id)newCursor;
- (unsigned int)seekToOffset:(int)fp8 fromPosition:(int)fp12;
- (BOOL)isAtEOF;
- (void)abortWithException:(id)fp8;
- (void)abort;
- (void)scheduleInQueue:(id)fp8 invocation:(id)fp12;
- (id)debugDictionary;

@end

@interface OWDataStream : OWStream
{
    struct _opaque_pthread_mutex_t lengthMutex;
    struct _opaque_pthread_cond_t lengthChangedCondition;
    struct _OWDataStreamBufferDescriptor *_first;
    struct _OWDataStreamBufferDescriptor *_last;
    unsigned int dataLength;
    unsigned int readLength;
    unsigned int writeEncoding;
    struct {
        unsigned int endOfData:1;
        unsigned int hasThrownAwayData:1;
        unsigned int shouldPreservePartialFile:1;
    } flags;
    NSMutableArray *lengthChangedInvocations;
    NSString *saveFilename;
    NSFileHandle *saveFileHandle;
    NSMutableDictionary *finalFileAttributes;
    unsigned long long startPositionInFile;
    unsigned int savedInBuffer;
    struct _OWDataStreamBufferDescriptor *savedBuffer;
}

+ (void)initialize;
- (id)initWithLength:(unsigned int)fp8;
- (id)init;
- (id)initWithName:(id)fp8;
- (void)dealloc;
- (id)newCursor;
- (id)bufferedData;
- (unsigned int)bufferedDataLength;
- (unsigned int)accessUnderlyingBuffer:(void **)fp8 startingAtLocation:(unsigned int)fp12;
- (unsigned int)dataLength;
- (BOOL)knowsDataLength;
- (BOOL)getBytes:(void *)fp8 range:(struct _NSRange)fp12;
- (id)dataWithRange:(struct _NSRange)fp8;
- (BOOL)waitForMoreData;
- (BOOL)waitForBufferedDataLength:(unsigned int)fp8;
- (BOOL)_checkForAvailableIndex:(unsigned int)fp8 orInvoke:(id)fp12;
- (void)scheduleInvocationAtEOF:(id)fp8 inQueue:(id)fp12;
- (void)writeData:(id)fp8;
- (void)setWriteEncoding:(unsigned long)fp8;
- (void)writeString:(id)fp8;
- (void)writeFormat:(id)fp8;
- (unsigned int)appendToUnderlyingBuffer:(void **)fp8;
- (void)wroteBytesToUnderlyingBuffer:(unsigned int)fp8;
- (BOOL)pipeToFilename:(id)fp8 contentType:(id)fp12 shouldPreservePartialFile:(BOOL)fp16;
- (BOOL)pipeToFilename:(id)fp8 withAttributes:(id)fp12 shouldPreservePartialFile:(BOOL)fp16;
- (void)appendToFilename:(id)fp8;
- (id)filename;
- (BOOL)hasThrownAwayData;
- (unsigned int)bytesWrittenToFile;
- (unsigned long long)startPositionInFile;
- (void)setStartPositionInFile:(unsigned long long)fp8;
- (void)dataEnd;
- (void)dataAbort;
- (void)waitForDataEnd;
- (BOOL)endOfData;
- (BOOL)contentIsValid;
- (void)raiseIfInvalid;
- (id)md5Signature;
- (BOOL)isEqualToDataStream:(id)fp8;
- (id)debugDictionary;

@end

@interface OWDataStream (Private)
- (void)flushContentsToFile;
- (void)flushAndCloseSaveFile;
- (void)_noMoreData;
- (void)_adviseDataPages:(int)fp8;
@end

@interface OWDataStreamCharacterCursor : OWCursor
{
    OWDataStreamCursor *byteSource;
    int stringEncodingType;
    unsigned int stringEncoding;
    struct OFStringDecoderState conversionState;
    NSString *stringBuffer;
    struct _NSRange stringBufferValidRange;
}

+ (void)initialize;
- (id)initForDataCursor:(id)fp8 encoding:(unsigned long)fp12;
- (void)dealloc;
- (void)setCFStringEncoding:(unsigned long)fp8;
- (unsigned long)stringEncoding;
- (void)setEncoding:(unsigned int)fp8;
- (void)discardReadahead;
- (unsigned int)seekToOffset:(int)fp8 fromPosition:(int)fp12;
- (id)dataStreamCursor;
- (unsigned int)readCharactersIntoBuffer:(unsigned short *)fp8 maximum:(unsigned int)fp12 peek:(BOOL)fp16;
- (BOOL)_enlargeBufferedString;
- (id)readString;
- (id)readAllAsString;
- (BOOL)isAtEOF;
- (id)readLineAndAdvance:(BOOL)fp8;
- (id)readLine;
- (id)peekLine;
- (void)skipLine;
- (id)readTokenAndAdvance:(BOOL)fp8;
- (id)readToken;
- (id)peekToken;
- (id)debugDictionary;

@end

@interface OWDataStreamConcreteCursor : OWDataStreamCursor
{
    OWDataStream *dataStream;
}

- (id)initForDataStream:(id)fp8;
- (id)initFromCursor:(id)fp8;
- (void)dealloc;
- (id)dataStream;
- (id)underlyingDataStream;
- (unsigned int)dataLength;
- (BOOL)isAtEOF;
- (BOOL)haveFinishedReadingData;
- (void)readBytes:(unsigned int)fp8 intoBuffer:(void *)fp12;
- (void)peekBytes:(unsigned int)fp8 intoBuffer:(void *)fp12;
- (void)bufferBytes:(unsigned int)fp8;
- (BOOL)haveBufferedBytes:(unsigned int)fp8;
- (unsigned int)copyBytesToBuffer:(void *)fp8 minimumBytes:(unsigned int)fp12 maximumBytes:(unsigned int)fp16 advance:(BOOL)fp20;
- (id)readData;
- (id)peekData;
- (unsigned int)peekUnderlyingBuffer:(void **)fp8;
- (id)readAllData;
- (id)readBytes:(unsigned int)fp8;
- (id)peekBytes:(unsigned int)fp8;
- (id)peekBytesOrUntilEOF:(unsigned int)fp8;
- (unsigned char)readByte;
- (unsigned char)peekByte;
- (void)scheduleInQueue:(id)fp8 invocation:(id)fp12;
- (id)debugDictionary;

@end

@interface OWDataStreamCursor : OWCursor
{
    int byteOrder;
    unsigned int dataOffset;
    unsigned char partialByte;
    unsigned int bitsLeft;
}

+ (void)initialize;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
+ (id)cursorToRemoveEncoding:(id)fp8 fromCursor:(id)fp12;
+ (id)cursorToApplyEncoding:(id)fp8 toCursor:(id)fp12;
+ (BOOL)availableEncoding:(id)fp8 apply:(BOOL)fp12 remove:(BOOL)fp16 tryLoad:(BOOL)fp20;
+ (id)availableEncodingsToRemove;
- (id)initForDataStream:(id)fp8;
- (void)setByteOrder:(int)fp8;
- (id)initFromCursor:(id)fp8;
- (BOOL)isAtEOF;
- (BOOL)haveFinishedReadingData;
- (id)underlyingDataStream;
- (unsigned int)dataLength;
- (void)readBytes:(unsigned int)fp8 intoBuffer:(void *)fp12;
- (void)peekBytes:(unsigned int)fp8 intoBuffer:(void *)fp12;
- (id)peekBytesOrUntilEOF:(unsigned int)fp8;
- (void)bufferBytes:(unsigned int)fp8;
- (BOOL)haveBufferedBytes:(unsigned int)fp8;
- (unsigned int)copyBytesToBuffer:(void *)fp8 minimumBytes:(unsigned int)fp12 maximumBytes:(unsigned int)fp16 advance:(BOOL)fp20;
- (unsigned int)peekUnderlyingBuffer:(void **)fp8;
- (id)readAllData;
- (unsigned int)currentOffset;
- (void)skipBytes:(unsigned int)fp8;
- (id)readData;
- (id)peekData;
- (id)readBytes:(unsigned int)fp8;
- (id)peekBytes:(unsigned int)fp8;
- (unsigned int)readMaximumBytes:(unsigned int)fp8 intoBuffer:(void *)fp12;
- (unsigned int)peekMaximumBytes:(unsigned int)fp8 intoBuffer:(void *)fp12;
- (int)readInt;
- (int)peekInt;
- (short)readShort;
- (short)peekShort;
- (long)readLong;
- (long)peekLong;
- (long long)readLongLong;
- (long long)peekLongLong;
- (float)readFloat;
- (float)peekFloat;
- (double)readDouble;
- (double)peekDouble;
- (unsigned char)readByte;
- (unsigned char)peekByte;
- (unsigned int)readBits:(unsigned int)fp8;
- (int)readSignedBits:(unsigned int)fp8;
- (void)skipToNextFullByte;
- (unsigned int)scanUpToByte:(unsigned char)fp8;
- (unsigned int)readUnderlyingBuffer:(void **)fp8;
- (id)readUpToByte:(unsigned char)fp8;
- (unsigned int)seekToOffset:(int)fp8 fromPosition:(int)fp12;
- (id)debugDictionary;
- (id)logDescription;

@end

@interface OWDataStreamFilterCursor : OWDataStreamCursor
{
    NSMutableData *bufferedData;
    unsigned int bufferedDataStart;
    unsigned int bufferedDataValidLength;
    BOOL canFillMoreBuffer;
    BOOL haveStartedFilter;
}

+ (void)initialize;
- (id)init;
- (void)dealloc;
- (void)processBegin;
- (void)_processBegin;
- (BOOL)enlargeBuffer;
- (void)bufferBytes:(unsigned int)fp8;
- (BOOL)haveBufferedBytes:(unsigned int)fp8;
- (unsigned int)copyBytesToBuffer:(void *)fp8 minimumBytes:(unsigned int)fp12 maximumBytes:(unsigned int)fp16 advance:(BOOL)fp20;
- (void)readBytes:(unsigned int)fp8 intoBuffer:(void *)fp12;
- (void)peekBytes:(unsigned int)fp8 intoBuffer:(void *)fp12;
- (unsigned int)peekUnderlyingBuffer:(void **)fp8;
- (unsigned int)dataLength;
- (BOOL)isAtEOF;
- (BOOL)haveFinishedReadingData;
- (id)peekBytesOrUntilEOF:(unsigned int)fp8;
- (id)readAllData;
- (void)fillBuffer:(void *)fp8 length:(unsigned int)fp12 filledToIndex:(unsigned int *)fp16;
- (void)_bufferInThreadAndThenScheduleInQueue:(id)fp8 invocation:(id)fp12;
- (void)scheduleInQueue:(id)fp8 invocation:(id)fp12;

@end

@interface OWDataStreamScanner : OFCharacterScanner
{
    OWDataStreamCharacterCursor *streamCursor;
    unsigned short *buffer;
    unsigned int bufferLength;
    unsigned int bufferSize;
    unsigned int bufferOffset;
    unsigned int minimumReadBufferLength;
}

- (id)initWithCursor:(id)fp8 bufferLength:(unsigned int)fp12;
- (id)initWithCursor:(id)fp8;
- (void)dealloc;
- (BOOL)fetchMoreData;
- (id)dataStreamCursor;
- (void)discardReadahead;
- (id)debugDictionary;

@end

@interface OWDocumentTitle : OFObject
{
}

+ (void)_flushCache:(id)fp8;
+ (void)initialize;
+ (id)titleForAddress:(id)fp8;
+ (void)cacheRealTitle:(id)fp8 forAddress:(id)fp12;
+ (void)cacheGuessTitle:(id)fp8 forAddress:(id)fp12;
+ (void)invalidateGuessTitleForAddress:(id)fp8;
+ (void)addObserver:(id)fp8 selector:(SEL)fp12 address:(id)fp16;
+ (void)removeObserver:(id)fp8 address:(id)fp12;
+ (void)removeObserver:(id)fp8;
+ (void)postNotificationForAddress:(id)fp8;

@end

@interface OWFileDataStream : OWDataStream
{
    NSString *inputFilename;
}

- (id)initWithData:(id)fp8 filename:(id)fp12;
- (id)initWithContentsOfFile:(id)fp8;
- (id)initWithContentsOfMappedFile:(id)fp8;
- (id)initWithData:(id)fp8;
- (void)dealloc;
- (BOOL)pipeToFilename:(id)fp8 withAttributes:(id)fp12 shouldPreservePartialFile:(BOOL)fp16;
- (id)filename;

@end

@interface OWFileInfo : OFObject <OWConcreteCacheEntry>
{
    OWAddress *address;
    NSNumber *size;
    struct {
        unsigned int fileTypeKnown:1;
        unsigned int isDirectory:1;
        unsigned int isShortcut:1;
        unsigned int fixed:1;
    } flags;
    NSDate *lastChangeDate;
    NSString *cachedTitle;
    NSString *cachedName;
}

+ (void)initialize;
+ (id)contentType;
- (id)initWithAddress:(id)fp8 size:(id)fp12 isDirectory:(BOOL)fp16 isShortcut:(BOOL)fp20 lastChangeDate:(id)fp24;
- (id)initWithLastChangeDate:(id)fp8;
- (void)dealloc;
- (void)setName:(id)fp8;
- (void)setTitle:(id)fp8;
- (id)address;
- (id)size;
- (BOOL)isDirectory;
- (BOOL)isShortcut;
- (id)lastChangeDate;
- (id)name;
- (id)title;
- (id)addressString;
- (id)contentType;
- (BOOL)endOfData;
- (BOOL)contentIsValid;

@end

@interface OWImmutableObjectStream : OWAbstractObjectStream
{
    NSArray *objects;
}

- (id)initWithObject:(id)fp8;
- (id)initWithArray:(id)fp8;
- (void)dealloc;
- (id)objectAtIndex:(unsigned int)fp8;
- (id)objectAtIndex:(unsigned int)fp8 withHint:(void **)fp12;
- (unsigned int)objectCount;
- (BOOL)isIndexPastEnd:(unsigned int)fp8;

@end

@interface OWObjectStream : OWAbstractObjectStream
{
    id *nextObjectInBuffer;
    id *beyondBuffer;
    struct _OWObjectStreamBuffer *first;
    struct _OWObjectStreamBuffer *last;
    unsigned int count;
    BOOL endOfObjects;
    NSConditionLock *objectsLock;
    NSConditionLock *endOfDataLock;
}

- (id)initWithName:(id)fp8;
- (void)dealloc;
- (void)writeObject:(id)fp8;
- (id)objectAtIndex:(unsigned int)fp8 withHint:(void **)fp12;
- (id)objectAtIndex:(unsigned int)fp8;
- (unsigned int)objectCount;
- (BOOL)isIndexPastEnd:(unsigned int)fp8;
- (void)dataEnd;
- (void)dataAbort;
- (void)waitForDataEnd;
- (BOOL)endOfData;
- (id)debugDictionary;

@end

@interface OWObjectStream (Private)
- (void)_noMoreData;
@end

@interface OWObjectStreamCursor : OWCursor <NSCopying>
{
    OWAbstractObjectStream *objectStream;
    void *hint;
    unsigned int streamIndex;
}

- (id)initForObjectStream:(id)fp8;
- (id)initFromCursor:(id)fp8;
- (void)dealloc;
- (id)objectStream;
- (unsigned int)streamIndex;
- (id)readObject;
- (void)skipObjects:(int)fp8;
- (void)ungetObject:(id)fp8;
- (unsigned int)seekToOffset:(int)fp8 fromPosition:(int)fp12;
- (BOOL)isAtEOF;
- (void)scheduleInQueue:(id)fp8 invocation:(id)fp12;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)debugDictionary;

@end

@interface OWStream : OWAbstractContent <OWConcreteCacheEntry>
{
    NSLock *_lock;
    int issuedCursorsCount;
}

- (id)initWithName:(id)fp8;
- (void)dealloc;
- (id)newCursor;
- (void)dataEnd;
- (void)dataAbort;
- (void)waitForDataEnd;
- (BOOL)endOfData;
- (BOOL)contentIsValid;
- (int)cursorCount;
- (id)debugDictionary;
- (void)_adjustCursorCount:(int)fp8;

@end

@interface OWSimpleTarget : OFObject <OWTarget, OFWeakRetain>
{
    OWContent *initialContent;
    OWContentInfo *parentContentInfo;
    OWContentType *targetContentType;
    NSString *targetTypeFormatString;
    NSConditionLock *resultLock;
    OWContent *resultingContent;
    int resultingContentFlags;
    OWAddress *addressOfLastContent;
    struct _OFWeakRetainIvars weakRetainIvars;
}

- (id)initWithParentContentInfo:(id)fp8 targetContentType:(id)fp12 initialContent:(id)fp16;
- (void)dealloc;
- (void)setTargetTypeFormatString:(id)fp8;
- (void)startProcessingContent;
- (id)resultingContent;
- (int)resultingContentFlags;
- (id)lastAddress;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;
- (id)targetContentType;
- (int)pipeline:(id)fp8 hasContent:(id)fp12 flags:(int)fp16;
- (BOOL)acceptsAlternateContent;
- (void)pipelineDidEnd:(id)fp8;
- (id)targetTypeFormatString;
- (id)parentContentInfo;

@end

@interface OWSimpleTarget (Private)
- (void)_setResultingContent:(id)fp8;
@end

@interface OWSitePreference : OFObject
{
    OFPreference *globalPreference;
    OFPreference *siteSpecificPreference;
}

+ (void)initialize;
+ (void)addObserver:(id)fp8 selector:(SEL)fp12 forSitePreference:(id)fp16;
+ (void)removeObserver:(id)fp8 forSitePreference:(id)fp12;
+ (id)domainForAddress:(id)fp8;
+ (id)domainForURL:(id)fp8;
+ (id)preferenceForKey:(id)fp8 domain:(id)fp12;
+ (id)preferenceForKey:(id)fp8 address:(id)fp12;
+ (id)domainCache;
+ (BOOL)siteHasPreferences:(id)fp8;
+ (void)resetPreferencesForDomain:(id)fp8;
- (void)dealloc;
- (id)siteSpecificPreference;
- (id)globalKey;
- (id)defaultObjectValue;
- (BOOL)hasNonDefaultValue;
- (void)restoreDefaultValue;
- (id)objectValue;
- (void)setObjectValue:(id)fp8;
- (id)stringValue;
- (void)setStringValue:(id)fp8;
- (BOOL)boolValue;
- (void)setBoolValue:(BOOL)fp8;
- (int)integerValue;
- (void)setIntegerValue:(int)fp8;
- (float)floatValue;
- (void)setFloatValue:(float)fp8;

@end

@interface OWSitePreference (Private)
+ (id)_lockedPreferenceCacheForDomain:(id)fp8;
- (id)_initWithKey:(id)fp8 domain:(id)fp12;
- (id)_preferenceForReading;
- (id)_preferenceForWriting;
- (void)_preferenceDidChange:(id)fp8;
@end

@interface OWTopLevelActiveContentInfo : OWContentInfo
{
}

- (void)_treeActiveStatusMayHaveChanged;

@end

@interface OWContentInfo : OFObject
{
    OWContent *nonretainedContent;
    NSMutableArray *tasks;
    NSLock *tasksLock;
    NSMutableArray *childTasks;
    NSLock *childTasksLock;
    NSMutableArray *childFossils;
    NSLock *childFossilsLock;
    NSMutableArray *activeChildTasks;
    NSLock *activeChildTasksLock;
    NSString *typeString;
    OWAddress *address;
    NSLock *addressLock;
    struct {
        unsigned int wasActiveOnLastCheck:1;
        unsigned int isHeader:1;
    } flags;
    NSLock *flagsLock;
    int workToBeDoneIncludingChildren;
    CDAnonymousStruct2 schedulingInfo;
}

+ (void)initialize;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
+ (id)topLevelActiveContentInfo;
+ (id)headerContentInfoWithName:(id)fp8;
+ (id)orphanParentContentInfo;
+ (id)allActiveTasks;
- (id)initWithContent:(id)fp8;
- (id)initWithContent:(id)fp8 typeString:(id)fp12;
- (void)dealloc;
- (id)content;
- (void)nullifyContent;
- (id)typeString;
- (BOOL)isHeader;
- (void)setAddress:(id)fp8;
- (id)address;
- (id)tasks;
- (void)addTask:(id)fp8;
- (void)removeTask:(id)fp8;
- (void)addChildTask:(id)fp8;
- (void)removeChildTask:(id)fp8;
- (id)childTasks;
- (id)childTaskAtIndex:(unsigned int)fp8;
- (unsigned int)childTasksCount;
- (int)workDoneByChildTasks;
- (int)workToBeDoneByChildTasks;
- (void)calculateDeadPipelines:(unsigned int *)fp8 totalPipelines:(unsigned int *)fp12;
- (void)addChildFossil:(id)fp8;
- (BOOL)treeHasActiveChildren;
- (void)addActiveChildTask:(id)fp8;
- (void)removeActiveChildTask:(id)fp8;
- (id)activeChildTasks;
- (id)activeChildTaskAtIndex:(unsigned int)fp8;
- (unsigned int)activeChildTasksCount;
- (void)abortActiveChildTasks;
- (double)timeSinceTreeActivationIntervalForActiveChildTasks;
- (double)estimatedRemainingTreeTimeIntervalForActiveChildTasks;
- (CDAnonymousStruct2)messageQueueSchedulingInfo;
- (id)debugDictionary;

@end

@interface OWContentInfo (Private)
- (void)_treeActiveStatusMayHaveChanged;
- (id)_taskWithLowestPriority;
- (unsigned int)_indexOfTaskWithLowestPriority;
@end

@interface OWContentType : OFObject <NSCoding>
{
    NSString *contentTypeString;
    unsigned int hash;
    NSMutableArray *links;
    NSMutableSet *reverseLinks;
    NSMutableDictionary *bestPathByType;
    NSArray *extensions;
    unsigned long hfsType;
    unsigned long hfsCreator;
    double expirationTimeInterval;
    NSString *imageName;
    NSString *readableString;
    struct {
        unsigned int isEncoding:1;
        unsigned int isPublic:1;
        unsigned int isInteresting:1;
    } flags;
}

+ (void)didLoad;
+ (void)initialize;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
+ (void)updateExpirationTimeIntervalsFromDefaults;
+ (id)contentTypeForString:(id)fp8;
+ (id)contentEncodingForString:(id)fp8;
+ (id)existingContentTypeForString:(id)fp8;
+ (id)wildcardContentType;
+ (id)sourceContentType;
+ (id)retypedSourceContentType;
+ (id)unknownContentType;
+ (id)errorContentType;
+ (id)nothingContentType;
+ (id)contentEncodings;
+ (id)contentTypes;
+ (void)setDefaultExpirationTimeInterval:(double)fp8;
+ (id)linkForTargetContentType:(id)fp8 fromContentType:(id)fp12 orContentTypes:(id)fp16;
+ (void)registerFileExtension:(id)fp8 forContentType:(id)fp12;
+ (id)contentTypeForExtension:(id)fp8;
+ (id)contentTypeForFilename:(id)fp8 isLocalFile:(BOOL)fp12;
+ (id)contentTypeAndEncodingForFilename:(id)fp8 isLocalFile:(BOOL)fp12;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (id)retain;
- (id)autorelease;
- (void)release;
- (void)dealloc;
- (id)initWithCoder:(id)fp8;
- (id)awakeAfterUsingCoder:(id)fp8;
- (void)encodeWithCoder:(id)fp8;
- (void)setExtensions:(id)fp8;
- (id)extensions;
- (id)primaryExtension;
- (void)setHFSType:(unsigned long)fp8;
- (unsigned long)hfsType;
- (void)setHFSCreator:(unsigned long)fp8;
- (unsigned long)hfsCreator;
- (void)setImageName:(id)fp8;
- (id)imageName;
- (id)contentTypeString;
- (id)readableString;
- (BOOL)isEncoding;
- (BOOL)isPublic;
- (BOOL)isInteresting;
- (void)registerAlias:(id)fp8;
- (void)linkToContentType:(id)fp8 usingProcessorDescription:(id)fp12 cost:(float)fp16;
- (id)bestPathForTargetContentType:(id)fp8;
- (id)directTargetContentTypes;
- (id)directSourceContentTypes;
- (id)indirectSourceContentTypes;
- (double)expirationTimeInterval;
- (void)setExpirationTimeInterval:(double)fp8;
- (id)pathForEncodings:(id)fp8 givenOriginalPath:(id)fp12;
- (unsigned int)hash;
- (id)shortDescription;
- (id)debugDictionary;

@end

@interface OWContentType (Private)
+ (void)controllerDidInitialize:(id)fp8;
+ (void)reloadExpirationTimeIntervals:(id)fp8;
+ (void)registerAliasesDictionary:(id)fp8;
+ (void)registerExtensionsDictionary:(id)fp8;
+ (unsigned long)osTypeForString:(id)fp8;
+ (void)registerHFSTypesDictionary:(id)fp8;
+ (void)registerHFSCreatorsDictionary:(id)fp8;
+ (void)registerIconsDictionary:(id)fp8;
+ (void)registerFlagsDictionary:(id)fp8;
- (id)_initWithContentTypeString:(id)fp8;
- (void)_addReverseContentType:(id)fp8;
- (void)_locked_flushConversionPaths;
- (id)_locked_computeBestPathForType:(id)fp8 visitedTypes:(id)fp12 recursionLevel:(unsigned int)fp16;
@end

@interface OWContentTypeLink : OFObject
{
    OWContentType *sourceContentType;
    OWContentType *targetContentType;
    OWProcessorDescription *processorDescription;
    float cost;
}

- (id)initWithProcessorDescription:(id)fp8 sourceContentType:(id)fp12 targetContentType:(id)fp16 cost:(float)fp20;
- (void)dealloc;
- (id)sourceContentType;
- (id)targetContentType;
- (id)processorDescription;
- (id)processorClassName;
- (float)cost;
- (id)debugDictionary;

@end

@interface OWConversionPathElement : OFObject
{
    OWConversionPathElement *nextElement;
    OWContentTypeLink *link;
    float totalCost;
}

+ (id)elementLink:(id)fp8 nextElement:(id)fp12;
- (id)initWithLink:(id)fp8 nextElement:(id)fp12;
- (void)dealloc;
- (id)nextElement;
- (id)link;
- (float)totalCost;
- (id)debugDictionary;

@end

@interface OWHeaderDictionary : OFObject
{
    OFMultiValueDictionary *headerDictionary;
    NSLock *parameterizedContentTypeLock;
    OWParameterizedContentType *parameterizedContentType;
}

+ (void)initialize;
+ (void)setDebug:(BOOL)fp8;
+ (id)parseParameterizedHeader:(id)fp8 intoDictionary:(id)fp12 valueChars:(id)fp16;
+ (id)formatHeaderParameter:(id)fp8 value:(id)fp12;
+ (id)formatHeaderParameters:(id)fp8 onlyLastValue:(BOOL)fp12;
+ (id)splitHeaderValues:(id)fp8;
- (id)init;
- (void)dealloc;
- (id)stringArrayForKey:(id)fp8;
- (id)firstStringForKey:(id)fp8;
- (id)lastStringForKey:(id)fp8;
- (id)keyEnumerator;
- (id)dictionaryCopy;
- (void)addString:(id)fp8 forKey:(id)fp12;
- (void)addStringsFromDictionary:(id)fp8;
- (void)parseRFC822Header:(id)fp8;
- (void)readRFC822HeadersFrom:(id)fp8;
- (void)readRFC822HeadersFromDataCursor:(id)fp8;
- (void)readRFC822HeadersFromCursor:(id)fp8;
- (void)readRFC822HeadersFromScanner:(id)fp8;
- (void)readRFC822HeadersFromSocketStream:(id)fp8;
- (id)formatRFC822HeaderLines;
- (id)parameterizedContentType;
- (id)contentEncoding;
- (id)contentDispositionFilename;
- (id)debugDictionary;

@end

@interface OWHeaderDictionary (Private)
- (void)_locked_parseParameterizedContentType;
@end

@interface OWParameterizedContentType : OFObject <NSMutableCopying>
{
    OWContentType *contentType;
    OFMultiValueDictionary *_parameters;
    NSLock *_parameterLock;
}

+ (id)contentTypeForString:(id)fp8;
- (id)initWithContentType:(id)fp8;
- (id)initWithContentType:(id)fp8 parameters:(id)fp12;
- (void)dealloc;
- (id)contentType;
- (id)parameters;
- (id)objectForKey:(id)fp8;
- (void)setObject:(id)fp8 forKey:(id)fp12;
- (id)contentTypeString;
- (id)mutableCopyWithZone:(struct _NSZone *)fp8;
- (id)debugDictionary;

@end

@interface OWPipeline : OWTask <OFWeakRetain>
{
    struct _OFWeakRetainIvars weakRetainIvars;
    id _target;
    struct {
        unsigned int pipelineDidBegin:1;
        unsigned int pipelineDidEnd:1;
        unsigned int pipelineTreeDidActivate:1;
        unsigned int pipelineTreeDidDeactivate:1;
        unsigned int updateStatusForPipeline:1;
        unsigned int expectedContentDescriptionString:1;
        unsigned int pipelineHasNewMetadata:1;
        unsigned int preferenceForKey:1;
    } targetRespondsTo;
    NSMutableDictionary *costEstimates;
    OWContentCacheGroup *caches;
    NSMutableSet *rejectedArcs;
    NSMutableArray *followedArcs;
    NSMutableArray *followedContent;
    NSMutableArray *activeArcs;
    NSMutableSet *followedArcsWithThreads;
    NSMutableArray *givenArcs;
    OWCacheSearch *cacheSearch;
    unsigned int firstErrorContent;
    NSDictionary *targetAcceptableContentTypes;
    OWContent *mostRecentAddress;
    unsigned int addressCount;
    OWContent *mostRecentlyOffered;
    id mostRecentArcProducingSource;
    NSLock *contextLock;
    NSMutableDictionary *context;
    NSMutableArray *deallocationObservers;
    struct {
        unsigned int contentError:1;
        unsigned int everHadContentError:1;
        unsigned int processingError:1;
        unsigned int delayedForError:1;
        unsigned int traversingLastArc:1;
        unsigned int delayedNotificationWaitingArc:1;
        unsigned int debug:1;
    } flags;
    OFInvocation *continuationEvent;
    NSString *targetTypeFormatString;
    unsigned int maximumWorkToBeDone;
    unsigned int threadsUsedCount;
    NSString *errorNameString;
    NSString *errorReasonString;
    NSDate *errorDelayDate;
}

+ (void)initialize;
+ (void)setDebug:(BOOL)fp8;
+ (void)addObserver:(id)fp8 selector:(SEL)fp12 address:(id)fp16;
+ (void)removeObserver:(id)fp8 address:(id)fp12;
+ (void)removeObserver:(id)fp8;
+ (void)invalidatePipelinesForTarget:(id)fp8;
+ (void)abortTreeActivityForTarget:(id)fp8;
+ (void)abortPipelinesForTarget:(id)fp8;
+ (id)currentPipelineForTarget:(id)fp8;
+ (id)pipelinesForTarget:(id)fp8;
+ (id)firstActivePipelineForTarget:(id)fp8;
+ (id)lastActivePipelineForTarget:(id)fp8;
+ (void)activeTreeHasChanged;
+ (void)startActiveStatusUpdateTimer;
+ (void)stopActiveStatusUpdateTimer;
+ (void)lock;
+ (void)unlock;
+ (BOOL)isLockHeldByCallingThread;
+ (void)_blockAndPostNotifications;
+ (void)postSelector:(SEL)fp8 toPipelines:(id)fp12 withObject:(id)fp16;
+ (id)stringForTargetContentOffer:(int)fp8;
+ (void)startPipelineWithAddress:(id)fp8 target:(id)fp12;
- (void)addObserver:(id)fp8 selector:(SEL)fp12;
- (id)initWithAddress:(id)fp8 target:(id)fp12;
- (id)initWithContent:(id)fp8 target:(id)fp12;
- (id)initWithCacheGroup:(id)fp8 content:(id)fp12 arcs:(id)fp16 target:(id)fp20;
- (void)dealloc;
- (id)lastAddress;
- (BOOL)treeHasActiveChildren;
- (void)activateInTree;
- (void)deactivateInTree;
- (void)abortTask;
- (double)estimatedRemainingTimeInterval;
- (BOOL)hadError;
- (BOOL)isRunning;
- (BOOL)hasThread;
- (id)errorNameString;
- (id)errorReasonString;
- (id)compositeTypeString;
- (unsigned int)workDone;
- (unsigned int)workToBeDone;
- (id)statusString;
- (void)setContentInfo:(id)fp8;
- (CDAnonymousStruct2)messageQueueSchedulingInfo;
- (void)startProcessingContent;
- (void)fetch;
- (id)target;
- (void)invalidate;
- (void)parentContentInfoLostContent;
- (void)updateStatusOnTarget;
- (void)setErrorName:(id)fp8 reason:(id)fp12;
- (id)contextObjectForKey:(id)fp8;
- (id)contextObjectForKey:(id)fp8 arc:(id)fp12;
- (id)preferenceForKey:(id)fp8 arc:(id)fp12;
- (void)setContextObject:(id)fp8 forKey:(id)fp12;
- (id)setContextObjectNoReplace:(id)fp8 forKey:(id)fp12;
- (id)contextDictionary;
- (void)setReferringAddress:(id)fp8;
- (void)setReferringContentInfo:(id)fp8;
- (id)fetchDate;
- (id)headerDictionary;
- (id)validator;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (void)invalidateWeakRetains;
- (id)cloneWithTarget:(id)fp8;
- (id)estimateCostFromType:(id)fp8;
- (void)arcHasStatus:(id)fp8;
- (void)arcHasResult:(id)fp8;
- (void)addDeallocationObserver:(id)fp8;
- (void)removeDeallocationObserver:(id)fp8;

@end

@interface OWPipeline (Private)
+ (void)_updateStatusMonitors:(id)fp8;
+ (void)_addPipeline:(id)fp8 forTarget:(id)fp12;
+ (void)_reorderPipeline:(id)fp8 forTarget:(id)fp12 nextToPipeline:(id)fp16 placeBefore:(BOOL)fp20;
+ (void)_removePipeline:(id)fp8 forTarget:(id)fp12;
+ (void)_target:(id)fp8 acceptedContentFromPipeline:(id)fp12;
- (void)_deactivateIfPipelineHasNoProcessors;
- (void)__deactivateIfPipelineHasNoProcessors;
- (void)_cleanupPipelineIfDead;
- (void)_startProcessingContentWithCloneParent:(id)fp8 insertBefore:(BOOL)fp12;
- (int)_traverseArcFromSearch:(id)fp8;
- (BOOL)_incorporateOneEntry:(id)fp8 fromArc:(id)fp12;
- (void)_spawnCloneThroughArc:(unsigned int)fp8 addingContent:(id)fp12 beforeSelf:(BOOL)fp16;
- (void)_arcFinished:(id)fp8;
- (void)_migrateArc:(id)fp8;
- (void)_removeActiveArc:(id)fp8;
- (void)_forgetArc:(id)fp8;
- (void)_weAreAtAnImpasse;
- (void)_startProcessingContentInThread;
- (id)_processContent;
- (id)_deliveryCostOfContent:(id)fp8;
- (void)_offerContentToTarget;
- (void)_blockThenProcess;
- (void)_computeAcceptableContentTypes;
- (id)_mostRecentArcProducingSource;
- (void)_sendPipelineFetchNotificationForArc:(id)fp8;
- (void)_notifyDeallocationObservers;
- (void)_notifyTargetOfTreeActivation;
- (void)_notifyTargetOfTreeDeactivation;
- (void)_notifyTargetOfTreeActivation:(id)fp8;
- (void)_notifyTargetOfTreeDeactivation:(id)fp8;
- (void)_updateStatusOnTarget:(id)fp8;
- (void)_rebuildCompositeTypeString;
- (id)_headerDictionaryWaitForCompleteHeaders:(BOOL)fp8;
- (id)debugDictionary;
@end

@interface OWPipeline (SubclassesOnly)
- (void)deactivate;
@end

@interface OWProcessorCache : OFObject <OWCacheArcProvider>
{
    NSLock *lock;
    OFMultiValueDictionary *processorsFromHashableSources;
    NSMutableArray *otherProcessors;
}

- (id)init;
- (void)dealloc;
- (id)allArcs;
- (id)arcsWithRelation:(int)fp8 toEntry:(id)fp12 inPipeline:(id)fp16;
- (float)cost;
- (void)removeArc:(id)fp8;
- (id)debugDictionary;

@end

@interface OWProcessorCache (Private)
- (void)_allocateProcessorContainers;
- (void)_flushCache:(id)fp8;
@end

@interface OWProcessorCacheArc : OFObject <OWCacheArc, OWProcessorContext, OFWeakRetain>
{
    OWContent *source;
    OWContent *object;
    int arcType;
    struct {
        unsigned int state:8;
        unsigned int objectIsSource:1;
        unsigned int objectIsError:1;
        unsigned int arcShouldNotBeCachedOnDisk:1;
        unsigned int possiblyProducesSource:1;
        unsigned int traversalIsAction:1;
        unsigned int havePassedOn:1;
        unsigned int haveRemovedFromCache:1;
        unsigned int _pad:1;
    } flags;
    OWProcessorCache *owner;
    OWContentTypeLink *link;
    OWProcessor *processor;
    NSLock *lock;
    NSMutableDictionary *dependentContext;
    NSDate *processStarted;
    NSDate *processGotResponse;
    int previousStatus;
    OWCacheControlSettings *cacheControl;
    double clockSkew;
    NSDate *arcCreationDate;
    unsigned short cachedTaskPriority;
    OWTask *cachedTaskInfo;
    OWPipeline *context;
    CDAnonymousStruct1 displayablesSimpleLock;
    NSDate *firstBytesDate;
    unsigned int bytesProcessed;
    unsigned int totalBytes;
    NSMutableArray *observers;
    NSMutableArray *auxiliaryContent;
    struct _OFWeakRetainIvars weakRetainIvars;
}

- (id)initWithSource:(id)fp8 link:(id)fp12 inCache:(id)fp16 forPipeline:(id)fp20;
- (void)dealloc;
- (void)incrementWeakRetainCount;
- (void)decrementWeakRetainCount;
- (void)_releaseFromWeakRetainHelper;
- (id)strongRetain;
- (void)release;
- (unsigned int)hash;
- (BOOL)isEqual:(id)fp8;
- (id)expectedResultType;
- (float)expectedCost;
- (id)processorDescription;
- (unsigned int)invalidInPipeline:(id)fp8;
- (int)traverseInPipeline:(id)fp8;
- (BOOL)abortArcTask;
- (int)status;
- (id)statusString;
- (BOOL)isOwnedByPipeline:(id)fp8;
- (CDAnonymousStruct2)messageQueueSchedulingInfo;
- (void)processedBytes:(unsigned int)fp8 ofBytes:(unsigned int)fp12;
- (id)firstBytesDate;
- (unsigned int)bytesProcessed;
- (unsigned int)totalBytes;
- (void)processorStatusChanged:(id)fp8;
- (void)processorDidRetire:(id)fp8;
- (void)mightAffectResource:(id)fp8;
- (void)addContent:(id)fp8 fromProcessor:(id)fp12;
- (void)addContent:(id)fp8 fromProcessor:(id)fp12 flags:(unsigned int)fp16;
- (void)addRedirectionContent:(id)fp8 sameURI:(BOOL)fp12;
- (void)addUnknownContent:(id)fp8 fromProcessor:(id)fp12;
- (void)extraContent:(id)fp8 fromProcessor:(id)fp12 forAddress:(id)fp16;
- (void)cacheControl:(id)fp8;
- (BOOL)resultIsSource;
- (BOOL)resultIsError;
- (BOOL)shouldNotBeCachedOnDisk;
- (id)contextObjectForKey:(id)fp8;
- (id)contextObjectForKey:(id)fp8 isDependency:(BOOL)fp12;
- (id)preferenceForKey:(id)fp8;
- (id)tasks;
- (id)promptView;
- (id)outerContentInfos;
- (void)noteErrorName:(id)fp8 reason:(id)fp12;
- (BOOL)hadError;
- (id)entriesWithRelation:(int)fp8;
- (int)arcType;
- (id)source;
- (id)subject;
- (id)object;
- (id)creationDate;
- (id)addToCache:(id)fp8;
- (void)removeFromCache;
- (void)invalidateWeakRetains;
- (id)debugDictionary;
- (id)shortDescription;
- (id)logDescription;
- (void)addArcObserver:(id)fp8;
- (void)removeArcObserver:(id)fp8;

@end

@interface OWProcessorCacheArc (Private) <OWPipelineDeallocationObserver>
- (BOOL)_startProcessor;
- (void)_loadAndProcess;
- (void)_unlockAndPostInfo:(id)fp8;
- (id)_contextObjectForKey:(id)fp8;
- (void)_adjustDates;
- (void)_clearContext;
- (void)pipelineWillDeallocate:(id)fp8;
@end

@interface OWTask : OFObject
{
    OWContentInfo *_contentInfo;
    NSLock *_contentInfoLock;
    OWContentInfo *parentContentInfo;
    NSLock *parentContentInfoLock;
    double lastActivationTimeInterval;
    struct {
        unsigned int wasActiveOnLastCheck:1;
        unsigned int wasOpenedByProcessPanel:2;
    } taskFlags;
    int state;
    CDAnonymousStruct1 displayablesSimpleLock;
    NSString *compositeTypeString;
}

+ (void)initialize;
+ (id)HMSStringFromTimeInterval:(double)fp8;
- (id)init;
- (id)initWithName:(id)fp8 contentInfo:(id)fp12 parentContentInfo:(id)fp16;
- (void)dealloc;
- (void)abortTask;
- (BOOL)treeHasActiveChildren;
- (void)treeActiveStatusMayHaveChanged;
- (void)activateInTree;
- (void)deactivateInTree;
- (void)abortTreeActivity;
- (int)state;
- (id)lastAddress;
- (double)timeSinceTreeActivationInterval;
- (double)estimatedRemainingTimeInterval;
- (double)estimatedRemainingTreeTimeInterval;
- (BOOL)hadError;
- (BOOL)isRunning;
- (BOOL)hasThread;
- (id)errorNameString;
- (id)errorReasonString;
- (id)compositeTypeString;
- (void)calculateDeadPipelines:(unsigned int *)fp8 totalPipelines:(unsigned int *)fp12;
- (unsigned int)workDone;
- (unsigned int)workToBeDone;
- (unsigned int)workDoneIfNotFinished;
- (unsigned int)workToBeDoneIfNotFinished;
- (unsigned int)workDoneIncludingChildren;
- (unsigned int)workToBeDoneIncludingChildren;
- (id)statusString;
- (BOOL)wasOpenedByProcessPanelIndex:(unsigned int)fp8;
- (void)setWasOpenedByProcessPanelIndex:(unsigned int)fp8;
- (void)setParentContentInfo:(id)fp8;
- (id)parentContentInfo;
- (void)setContentInfo:(id)fp8;
- (id)contentInfo;
- (void)nullifyContentInfo;
- (CDAnonymousStruct2)messageQueueSchedulingInfo;
- (int)comparePriority:(id)fp8;

@end

@interface OWTask (Private)
- (id)debugDictionary;
@end

@interface OWWebPipeline : OWPipeline
{
    int historyAction;
}

+ (void)initialize;
- (id)initWithContent:(id)fp8 target:(id)fp12;
- (int)historyAction;
- (void)setHistoryAction:(int)fp8;
- (BOOL)proxyCacheDisabled;
- (void)setProxyCacheDisabled:(BOOL)fp8;

@end

@interface OWWebPipeline (Private)
@end

@interface OWAddressProcessor : OWProcessor
{
    OWAddress *sourceAddress;
}

- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (id)sourceAddress;
- (id)debugDictionary;

@end

@interface OWDataStreamCharacterProcessor : OWProcessor
{
    OWDataStreamCharacterCursor *characterCursor;
}

+ (void)initialize;
+ (unsigned long)stringEncodingForAddress:(id)fp8;
+ (unsigned long)defaultStringEncoding;
+ (unsigned long)stringEncodingForDefault:(id)fp8;
+ (id)defaultForCFEncoding:(unsigned long)fp8;
+ (unsigned long)stringEncodingForIANACharSetName:(id)fp8;
+ (unsigned long)stringEncodingForContentType:(id)fp8;
+ (id)charsetForCFEncoding:(unsigned long)fp8;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)abortProcessing;
- (unsigned long)chooseStringEncoding:(id)fp8 content:(id)fp12;
- (id)debugDictionary;

@end

@interface OWDataStreamProcessor : OWProcessor
{
    OWDataStreamCursor *dataCursor;
}

- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (id)debugDictionary;

@end

@interface OWFilteredAddressArc : NSObject <OWCacheArc>
{
    OWContent *subject;
    NSDate *created;
}

+ (void)initialize;
- (id)initWithSubject:(id)fp8;
- (void)dealloc;
- (id)entriesWithRelation:(int)fp8;
- (int)arcType;
- (id)subject;
- (id)source;
- (id)object;
- (id)creationDate;
- (unsigned int)invalidInPipeline:(id)fp8;
- (int)traverseInPipeline:(id)fp8;
- (id)expectedResultType;
- (float)expectedCost;
- (BOOL)abortArcTask;
- (id)firstBytesDate;
- (unsigned int)bytesProcessed;
- (unsigned int)totalBytes;
- (int)status;
- (id)statusString;
- (BOOL)resultIsSource;
- (BOOL)resultIsError;
- (BOOL)shouldNotBeCachedOnDisk;
- (void)addArcObserver:(id)fp8;
- (void)removeArcObserver:(id)fp8;

@end

@interface OWFilteredAddressCache : OFObject <OWCacheArcProvider>
{
}

- (id)allArcs;
- (id)arcsWithRelation:(int)fp8 toEntry:(id)fp12 inPipeline:(id)fp16;
- (float)cost;

@end

@interface OWMultipartDataStreamProcessor : OWDataStreamProcessor
{
    char *delimiter;
    unsigned int delimiterLength;
    unsigned int inputBufferSize;
    unsigned int delimiterSkipTable[256];
}

+ (void)initialize;
- (void)dealloc;
- (BOOL)readDelimiter;
- (void)processPartIntoStream:(id)fp8;
- (void)processDataStreamPart:(id)fp8 headers:(id)fp12;
- (void)processContentWithHeaders:(id)fp8;
- (void)process;
- (id)debugDictionary;

@end

@interface OWObjectStreamProcessor : OWProcessor
{
    OWObjectStreamCursor *objectCursor;
}

- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)abortProcessing;
- (id)debugDictionary;

@end

@interface OWObjectToDataStreamProcessor : OWObjectStreamProcessor
{
    OWDataStream *outputStream;
}

+ (id)resultContentType;
- (void)startProcessing;
- (void)dealloc;
- (void)processAbort;

@end

@interface OWProcessor : OFObject <OFMessageQueuePriority>
{
    id pipeline;
    OWContent *originalContent;
    CDAnonymousStruct1 displayablesSimpleLock;
    int status;
    NSString *statusString;
}

+ (void)initialize;
+ (id)readableClassName;
+ (BOOL)processorUsesNetwork;
+ (id)processorQueue;
+ (void)registerProcessorClass:(Class)fp8 fromContentType:(id)fp12 toContentType:(id)fp16 cost:(float)fp20 producingSource:(BOOL)fp24;
+ (void)registerProcessorClass:(Class)fp8 fromContentTypeString:(id)fp12 toContentTypeString:(id)fp16 cost:(float)fp20 producingSource:(BOOL)fp24;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
- (id)init;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (id)pipeline;
- (void)startProcessingInQueue:(id)fp8;
- (void)startProcessing;
- (void)abortProcessing;
- (void)setStatus:(int)fp8;
- (int)status;
- (void)setStatusString:(id)fp8;
- (void)setStatusFormat:(id)fp8;
- (void)setStatusStringWithClassName:(id)fp8;
- (id)statusString;
- (void)processedBytes:(unsigned int)fp8;
- (void)processedBytes:(unsigned int)fp8 ofBytes:(unsigned int)fp12;
- (id)firstBytesDate;
- (unsigned int)bytesProcessed;
- (unsigned int)totalBytes;
- (CDAnonymousStruct2)messageQueueSchedulingInfo;

@end

@interface OWProcessor (SubclassesOnly)
- (void)processBegin;
- (void)process;
- (void)processEnd;
- (void)processAbort;
- (void)processInThread;
- (void)retire;
- (void)handleProcessingException:(id)fp8;
- (id)cacheDate:(id)fp8 forAddress:(id)fp12;
- (id)debugDictionary;
@end

@interface OWProcessorDescription : OFObject
{
    NSString *bundlePath;
    NSString *name;
    NSString *description;
    NSMutableArray *sourceContentTypes;
    BOOL usesNetwork;
    NSDictionary *proxiedTypeTable;
    NSString *processorClassName;
    OFBundledClass *processorClass;
}

+ (void)initialize;
+ (id)processorDescriptionForProcessorClassName:(id)fp8;
+ (id)createUnregisteredProcessorDescriptionForProcessorClassName:(id)fp8;
+ (id)processorDescriptions;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
- (id)init;
- (void)dealloc;
- (id)processorClassName;
- (id)sourceContentTypes;
- (id)processorClass;
- (id)bundlePath;
- (void)setBundlePath:(id)fp8;
- (id)name;
- (void)setName:(id)fp8;
- (id)description;
- (void)setDescription:(id)fp8;
- (BOOL)usesNetwork;
- (void)setUsesNetwork:(BOOL)fp8;
- (id)contentTypeForURL:(id)fp8 whenProxiedBy:(id)fp12;
- (void)registerProcessesContentType:(id)fp8 toContentType:(id)fp12 cost:(float)fp16;
- (void)registerProcessesContentType:(id)fp8 toContentType:(id)fp12 cost:(float)fp16 producingSource:(BOOL)fp20;
- (id)debugDictionary;
- (id)shortDescription;

@end

@interface OWProcessorDescription (PrivateAPI)
- (id)_initWithProcessorClassName:(id)fp8;
- (void)setProxyTypes:(id)fp8;
@end

@interface OWURLFileProcessor : OWDataStreamCharacterProcessor
{
}

+ (void)initialize;
+ (void)didLoad;
+ (id)sourceContentType;
- (void)process;

@end

@interface OWUnknownDataStreamProcessor : OWDataStreamProcessor
{
    OWContent *workingContent;
}

+ (void)initialize;
+ (void)didLoad;
+ (id)unknownContentType;
+ (void)registerGuessesDictionary:(id)fp8;
- (void)dealloc;
- (id)contentTypeGuessForBytes:(id)fp8;
- (id)contentTypeGuessForCharacters:(id)fp8;
- (id)contentTypeGuessForXML;
- (id)contentTypeGuess;
- (void)process;

@end

@interface OWXMLURLFileProcessor : OWDataStreamCharacterProcessor
{
}

+ (void)initialize;
+ (void)didLoad;
+ (id)sourceContentType;
- (void)process;

@end

@interface OWXMLURLFileProcessor (Private)
- (id)addressFromXMLData;
- (id)addressFromResourceFork;
@end

@interface OWFTPListingProcessor : OWDataStreamCharacterProcessor
{
    OWObjectStream *objectStream;
    OWAddress *baseAddress;
    unsigned int lineNumber;
}

+ (void)registerForContentTypeString:(id)fp8 cost:(int)fp12;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)startProcessing;
- (void)addFileForLine:(id)fp8;
- (id)fileInfoForLine:(id)fp8;
- (void)process;
- (void)processAbort;

@end

@interface OWFTPProcessor : OWAddressProcessor
{
    OWFTPSession *ftpSession;
}

+ (void)didLoad;
+ (BOOL)processorUsesNetwork;
- (void)process;
- (void)abortProcessing;

@end

@interface OWFTPSession : OFObject
{
    NSString *sessionCacheKey;
    ONSocketStream *controlSocketStream;
    NSString *currentPath;
    NSString *currentTransferType;
    NSString *systemType;
    NSDictionary *systemFeatures;
    NSString *lastReply;
    unsigned int lastReplyIntValue;
    NSString *lastMessage;
    NSMutableArray *failedCredentials;
    OWAddress *ftpAddress;
    id nonretainedProcessorContext;
    OWProcessor *nonretainedProcessor;
    ONSocket *abortSocket;
    BOOL abortOperation;
    int serverSupportsMLST;
    int serverSupportsUTF8;
    int serverSupportsTVFS;
}

+ (void)initialize;
+ (void)didLoad;
+ (void)controllerDidInitialize:(id)fp8;
+ (void)readDefaults;
+ (id)ftpSessionForNetLocation:(id)fp8;
+ (id)ftpSessionForAddress:(id)fp8;
+ (int)defaultPort;
- (id)initWithNetLocation:(id)fp8;
- (void)dealloc;
- (void)fetchForProcessor:(id)fp8 inContext:(id)fp12;
- (void)abortOperation;

@end

@interface OWFTPSession (Private)
+ (void)contentCacheFlushedNotification:(id)fp8;
- (id)storeData;
- (void)setAddress:(id)fp8;
- (void)setProcessor:(id)fp8;
- (void)cacheSession;
- (void)setCurrentTransferType:(id)fp8;
- (id)systemType;
- (BOOL)querySystemFeatures;
- (BOOL)readResponse;
- (BOOL)sendCommand:(id)fp8;
- (BOOL)sendCommand:(id)fp8 argumentString:(id)fp12;
- (BOOL)sendCommand:(id)fp8 argument:(id)fp12;
- (void)connect;
- (void)disconnect;
- (id)passiveDataSocket;
- (id)activeDataSocket;
- (id)dataSocketStream;
- (void)changeAbsoluteDirectory:(id)fp8;
- (void)getFile:(id)fp8;
- (void)getDirectory:(id)fp8;
- (void)storeData:(id)fp8 atPath:(id)fp12;
- (void)removeFileAtPath:(id)fp8;
- (void)makeNewDirectoryAtPath:(id)fp8;
- (id)systemTypeForSystemReply:(id)fp8;
@end

@interface OWMLSTFTPProcessor : OWFTPListingProcessor
{
    NSString *lastNameCharset;
    unsigned int lastNameEncoding;
}

+ (void)didLoad;
+ (id)parseDate:(id)fp8;
- (void)dealloc;
- (unsigned long)chooseStringEncoding:(id)fp8 content:(id)fp12;
- (id)fileInfoForLine:(id)fp8;

@end

@interface OWMacOSPeterLewisFTPProcessor : OWFTPListingProcessor
{
}

+ (void)didLoad;
- (id)fileInfoForLine:(id)fp8;

@end

@interface OWUnixFTPProcessor : OWFTPListingProcessor
{
}

+ (void)didLoad;
- (id)fileInfoForLine:(id)fp8;

@end

@interface OWHoursMinutesSeconds : OFObject
{
    unsigned int hours;
    unsigned int minutes;
    unsigned int seconds;
}

+ (id)objectHoldingHours:(unsigned int)fp8 minutes:(unsigned int)fp12 seconds:(unsigned int)fp16;
- (id)initWithHours:(unsigned int)fp8 minutes:(unsigned int)fp12 seconds:(unsigned int)fp16;

@end

@interface NSDate (OWExtensions)
+ (void)didLoad;
+ (void)setDebugHTTPDateParsing:(BOOL)fp8;
+ (id)dateWithHTTPDateString:(id)fp8;
+ (id)readRFCFormatDateFromScanner:(id)fp8;
+ (id)readAsctimeDateFromScanner:(id)fp8;
+ (id)readTimeFromScanner:(id)fp8;
@end

@interface OWAuthSchemeHTTPBasic : OWAuthorizationPassword
{
}

- (id)httpHeaderStringForProcessor:(id)fp8;
- (BOOL)appliesToHTTPChallenge:(id)fp8;

@end

@interface OWAuthSchemeHTTPDigest : OWAuthorizationPassword
{
    NSString *nonce;
    NSString *opaque;
    int qop;
    int digest_algorithm;
    NSString *client_nonce;
    unsigned int client_nonce_count;
    unsigned int client_nonce_use_count;
    double client_nonce_created;
}

- (id)init;
- (id)initAsCopyOf:(id)fp8;
- (void)dealloc;
- (void)setParameters:(id)fp8;
- (int)compareToNewCredential:(id)fp8;
- (void)_freshenNonce;
- (id)httpHeaderStringForProcessor:(id)fp8;
- (BOOL)appliesToHTTPChallenge:(id)fp8;
- (void)authorizationSucceeded:(BOOL)fp8 response:(id)fp12;
- (id)debugDictionary;

@end

@interface OWCookie : OFObject
{
    NSString *_domain;
    NSString *_path;
    NSString *_name;
    NSString *_value;
    NSDate *_expirationDate;
    BOOL _secure;
    NSString *_site;
    NSString *_siteDomain;
    int _status;
}

- (id)initWithDomain:(id)fp8 path:(id)fp12 name:(id)fp16 value:(id)fp20 expirationDate:(id)fp24 secure:(BOOL)fp28;
- (void)dealloc;
- (id)domain;
- (id)path;
- (id)name;
- (id)value;
- (id)expirationDate;
- (BOOL)isExpired;
- (BOOL)secure;
- (id)site;
- (void)setSite:(id)fp8;
- (id)siteDomain;
- (int)status;
- (void)setStatus:(int)fp8;
- (void)setStatus:(int)fp8 andNotify:(BOOL)fp12;
- (BOOL)appliesToAddress:(id)fp8;
- (BOOL)appliesToHostname:(id)fp8;
- (BOOL)appliesToHostname:(id)fp8 path:(id)fp12;
- (BOOL)appliesToPath:(id)fp8;
- (void)appendXML:(CDAnonymousStruct3 *)fp8;
- (int)compare:(id)fp8;
- (id)debugDictionary;

@end

@interface OWCookie (NSHTTPCookie)
- (id)initWithNSCookie:(id)fp8;
- (id)nsCookie;
@end

@interface OWCookieDomain : OFObject <NSCopying>
{
    NSString *_name;
    NSString *_nameDomain;
    NSMutableArray *_cookiePaths;
}

+ (void)initialize;
+ (void)didLoad;
+ (void)readDefaults;
+ (void)registerCookie:(id)fp8 fromURL:(id)fp12 siteURL:(id)fp16;
+ (void)registerCookiesFromURL:(id)fp8 outerContentInfos:(id)fp12 headerValue:(id)fp16;
+ (void)registerCookiesFromURL:(id)fp8 context:(id)fp12 headerDictionary:(id)fp16;
+ (id)cookiesForURL:(id)fp8;
+ (id)cookieHeaderStringForURL:(id)fp8;
+ (BOOL)hasCookiesForSiteDomain:(id)fp8;
+ (id)cookiesForSiteDomain:(id)fp8;
+ (void)didChange;
+ (id)allDomains;
+ (id)sortedDomains;
+ (id)domainNamed:(id)fp8;
+ (void)deleteDomain:(id)fp8;
+ (void)deleteCookie:(id)fp8;
+ (void)setDelegate:(id)fp8;
+ (id)delegate;
- (id)name;
- (id)nameDomain;
- (id)stringValue;
- (id)paths;
- (id)pathNamed:(id)fp8;
- (void)appendXML:(CDAnonymousStruct3 *)fp8;
- (void)addCookie:(id)fp8;
- (void)removeCookie:(id)fp8;
- (id)cookies;
- (int)compare:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;

@end

@interface OWCookieDomain (PrivateAPI)
+ (void)controllerDidInitialize:(id)fp8;
+ (void)controllerWillTerminate:(id)fp8;
+ (void)saveCookies;
+ (id)cookiePath:(id)fp8;
+ (void)locked_didChange;
+ (void)notifyCookiesChanged;
+ (id)domainNamed:(id)fp8 andNotify:(BOOL)fp12;
+ (id)searchDomainsForDomain:(id)fp8;
+ (id)cookieFromHeaderValue:(id)fp8 defaultDomain:(id)fp12 defaultPath:(id)fp16;
+ (BOOL)locked_readOW5Cookies;
- (void)addCookie:(id)fp8 andNotify:(BOOL)fp12;
- (id)locked_pathNamed:(id)fp8 shouldCreate:(BOOL)fp12;
- (void)locked_addApplicableCookies:(id)fp8 forPath:(id)fp12 urlIsSecure:(BOOL)fp16 includeRejected:(BOOL)fp20;
- (id)initWithDomain:(id)fp8;
- (void)dealloc;
- (id)debugDictionary;
@end

@interface OWCookiePath : OFObject
{
    NSString *_path;
    NSMutableArray *_cookies;
}

+ (void)initialize;
- (id)initWithPath:(id)fp8;
- (void)dealloc;
- (id)path;
- (BOOL)appliesToPath:(id)fp8;
- (void)addCookie:(id)fp8;
- (void)removeCookie:(id)fp8;
- (id)cookies;
- (id)cookieNamed:(id)fp8;
- (void)addCookie:(id)fp8 andNotify:(BOOL)fp12;
- (void)addNonExpiredCookiesToArray:(id)fp8 usageIsSecure:(BOOL)fp12 includeRejected:(BOOL)fp16;
- (void)addCookiesToSaveToArray:(id)fp8;
- (int)compare:(id)fp8;
- (id)debugDictionary;

@end

@interface OWHTTPProcessor : OWAddressProcessor
{
    OWHTTPSessionQueue *queue;
    OWDataStream *dataStream;
    OWContent *httpContent;
    unsigned int httpContentFlags;
    NSArray *credentials;
    int httpStatusCode;
}

+ (void)didLoad;
+ (void)initialize;
+ (BOOL)processorUsesNetwork;
- (void)dealloc;
- (Class)sessionQueueClass;
- (void)startProcessingInHTTPSessionQueue:(id)fp8;
- (void)handleSessionException:(id)fp8;
- (id)dataStream;
- (void)setDataStream:(id)fp8;
- (void)invalidateForHeaders:(id)fp8;
- (void)addHeaders:(id)fp8;
- (void)markEndOfHeaders;
- (void)addContent;
- (void)flagResult:(unsigned int)fp8;
- (id)content;
- (unsigned int)flags;
- (id)credentials;
- (void)addCredential:(id)fp8;
- (void)setHTTPStatusCode:(int)fp8;
- (void)startProcessing;
- (void)processBegin;
- (void)processInThread;
- (void)abortProcessing;

@end

@interface OWHTTPSession : OFObject
{
    OWHTTPSessionQueue *queue;
    OWNetLocation *proxyLocation;
    NSMutableArray *processorQueue;
    NSLock *processorQueueLock;
    ONSocketStream *socketStream;
    struct {
        unsigned int connectingViaProxyServer:1;
        unsigned int pipeliningRequests:1;
        unsigned int serverIsLocal:1;
    } flags;
    unsigned int failedRequests;
    unsigned int requestsSentThisConnection;
    OWDataStream *interruptedDataStream;
    struct _NSRange desiredRange;
    struct _NSRange receivedRange;
    NSArray *proxyCredentials;
    OWAddress *fetchAddress;
    OWURL *fetchURL;
    OWHeaderDictionary *headerDictionary;
    struct {
        unsigned int distrustContentType:1;
        unsigned int fakeAcceptHeader:1;
        unsigned int fakeAcceptEncodingHeader:1;
        unsigned int forceTrueIdentityInUAHeader:1;
        unsigned int suppressAcceptEncodingHeader:1;
    } kludge;
    struct {
        unsigned int incompleteResult:1;
    } fetchFlags;
}

+ (void)initialize;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
+ (void)didLoad;
+ (void)controllerDidInitialize:(id)fp8;
+ (Class)socketClass;
+ (int)defaultPort;
+ (id)browserIdentifierNames;
+ (id)browserIdentificationDictionaryForAddress:(id)fp8;
+ (id)userAgentHeaderFormatStringForAddress:(id)fp8;
+ (id)userAgentInfoForAddress:(id)fp8 forceRevealIdentity:(BOOL)fp12;
+ (void)readDefaults;
+ (void)setDebug:(BOOL)fp8;
+ (id)primaryUserAgentInfo;
+ (id)preferredDateFormat;
+ (id)acceptLanguages;
+ (id)acceptLanguageValue;
+ (id)nonTokenCharacterSet;
- (id)initWithAddress:(id)fp8 inQueue:(id)fp12;
- (void)dealloc;
- (void)runSession;
- (BOOL)prepareConnectionForProcessor:(id)fp8;
- (void)abortProcessingForProcessor:(id)fp8;
- (void)setStatusString:(id)fp8;
- (void)setStatusFormat:(id)fp8;
- (id)debugDictionary;

@end

@interface OWHTTPSession (Private)
+ (void)_readLanguageDefaults;
+ (void)_calculatePrimaryUserAgentInfo;
+ (id)_acceptEncodingsHeaderString;
+ (id)_customBrowserIdentityDictionary;
+ (id)stringForHeader:(id)fp8 value:(id)fp12;
- (id)commandStringForAddress:(id)fp8;
- (id)acceptEncodingHeaderStringForPipeline:(id)fp8;
- (id)acceptCharsetHeaderStringForPipeline:(id)fp8;
- (id)acceptHeaderStringForPipeline:(id)fp8;
- (id)acceptLanguageHeadersStringForPipeline:(id)fp8;
- (id)referrerHeaderStringForPipeline:(id)fp8;
- (id)cacheControlHeaderStringForPipeline:(id)fp8;
- (id)validationHeaderStringForPipeline:(id)fp8;
- (id)hostHeaderStringForURL:(id)fp8;
- (id)rangeStringForProcessor:(id)fp8;
- (id)keepAliveString;
- (id)cookiesForURL:(id)fp8 pipeline:(id)fp12;
- (id)contentTypeHeaderStringForAddress:(id)fp8;
- (id)contentLengthHeaderStringForAddress:(id)fp8;
- (id)contentStringForAddress:(id)fp8;
- (BOOL)readResponseForProcessor:(id)fp8;
- (void)readBodyForProcessor:(id)fp8 ignore:(BOOL)fp12;
- (BOOL)readHeadForProcessor:(id)fp8;
- (void)readHeadersForProcessor:(id)fp8;
- (unsigned int)intValueFromHexString:(id)fp8;
- (void)readChunkedBodyIntoStream:(id)fp8 precedingSkipLength:(unsigned int)fp12 forProcessor:(id)fp16;
- (void)readStandardBodyIntoStream:(id)fp8 precedingSkipLength:(unsigned int)fp12 forProcessor:(id)fp16;
- (void)readClosingBodyIntoStream:(id)fp8 precedingSkipLength:(unsigned int)fp12 forProcessor:(id)fp16;
- (void)_closeSocketStream;
- (void)notifyProcessor:(id)fp8 ofSessionException:(id)fp12;
@end

@interface OWHTTPSession (SubclassesOnly)
- (void)connect;
- (void)disconnectAndRequeueProcessors;
- (BOOL)fetchForProcessor:(id)fp8;
- (void)setKludgesForProcessor:(id)fp8 address:(id)fp12;
- (id)requestStringForProcessor:(id)fp8;
- (id)authorizationStringForAddress:(id)fp8 processor:(id)fp12;
- (id)userAgentHeaderStringForAddress:(id)fp8;
- (BOOL)sendRequest;
- (BOOL)sendRequests;
@end

@interface OWHTTPSessionQueue : OFObject
{
    OWAddress *address;
    NSMutableArray *idleSessions;
    NSMutableArray *sessions;
    NSMutableArray *queuedProcessors;
    NSMutableSet *abortedProcessors;
    NSLock *lock;
    struct {
        unsigned int serverUnderstandsPipelinedRequests:1;
        unsigned int serverCannotHandlePipelinedRequestsReliably:1;
    } flags;
}

+ (void)initialize;
+ (id)httpSessionQueueForAddress:(id)fp8;
+ (id)cacheKeyForSessionQueueForAddress:(id)fp8;
+ (Class)sessionClass;
+ (id)cache;
+ (unsigned int)maximumSessionsPerServer;
- (id)initWithAddress:(id)fp8;
- (void)dealloc;
- (BOOL)queueProcessor:(id)fp8;
- (void)runSession;
- (void)abortProcessingForProcessor:(id)fp8;
- (id)nextProcessor;
- (id)anyProcessor;
- (BOOL)sessionIsIdle:(id)fp8;
- (void)session:(id)fp8 hasStatusString:(id)fp12;
- (BOOL)queueEmptyAndAllSessionsIdle;
- (id)queueKey;
- (void)setServerUnderstandsPipelinedRequests;
- (BOOL)serverUnderstandsPipelinedRequests;
- (void)setServerCannotHandlePipelinedRequestsReliably;
- (BOOL)serverCannotHandlePipelinedRequestsReliably;
- (BOOL)shouldPipelineRequests;
- (unsigned int)maximumNumberOfRequestsToPipeline;

@end

@interface OWHTTPSessionQueue (Private)
+ (void)_contentCacheFlushedNotification:(id)fp8;
+ (void)_lockedCleanSessionQueuesOlderThanTimeoutExcludingQueue:(id)fp8;
+ (void)_lockedFlushSessionQueuesOlderThanDate:(id)fp8 excludingQueue:(id)fp12;
- (id)_queuedProcessorsSnapshot;
@end

@interface OWAboutURLProcessor : OWAddressProcessor
{
}

+ (void)didLoad;
+ (void)initialize;
- (void)startProcessing;
- (void)process;

@end

@interface OWAuthorizationCredential : OFObject
{
    NSString *hostname;
    int type;
    unsigned int port;
    NSString *realm;
    double lastSucceededTimeInterval;
    double lastFailedTimeInterval;
    id keychainTag;
}

+ (void)initialize;
+ (id)nullCredential;
- (id)initForRequest:(id)fp8 realm:(id)fp12;
- (id)initAsCopyOf:(id)fp8;
- (void)dealloc;
- (id)hostname;
- (int)type;
- (unsigned int)port;
- (id)realm;
- (id)httpHeaderStringForProcessor:(id)fp8;
- (BOOL)appliesToHTTPChallenge:(id)fp8;
- (id)keychainTag;
- (void)setKeychainTag:(id)fp8;
- (int)compareToNewCredential:(id)fp8;
- (id)debugDictionary;
- (void)authorizationSucceeded:(BOOL)fp8 response:(id)fp12;

@end

@interface OWAuthorizationCredential (Private)
@end

@interface OWAuthorizationPassword : OWAuthorizationCredential
{
    NSString *username;
    NSString *password;
}

- (id)initForRequest:(id)fp8 realm:(id)fp12 username:(id)fp16 password:(id)fp20;
- (id)initAsCopyOf:(id)fp8;
- (void)dealloc;
- (int)compareToNewCredential:(id)fp8;
- (id)debugDictionary;

@end

@interface OWAuthorizationPassword (Private)
@end

@interface OWAuthorizationRequest : NSObject
{
    int type;
    OWNetLocation *server;
    id pipeline;
    OWHeaderDictionary *challenge;
    NSArray *theseDidntWork;
    NSString *parsedHostname;
    unsigned int parsedPortnumber;
    unsigned int defaultPortnumber;
    NSArray *parsedChallenges;
    NSConditionLock *requestCondition;
    NSArray *results;
    NSString *errorString;
}

+ (Class)authorizationRequestClass;
+ (void)setAuthorizationRequestClass:(Class)fp8;
+ (id)entropy;
+ (void)initialize;
+ (void)flushCache:(id)fp8;
+ (BOOL)cacheCredentialIfAbsent:(id)fp8;
+ (id)findParametersOfType:(int)fp8 headers:(id)fp12;
- (id)initForType:(int)fp8 netLocation:(id)fp12 defaultPort:(unsigned int)fp16 context:(id)fp20 challenge:(id)fp24 promptForMoreThan:(id)fp28;
- (void)dealloc;
- (int)type;
- (id)hostname;
- (unsigned int)port;
- (BOOL)checkForSatisfaction;
- (id)credentials;
- (id)errorString;
- (void)failedToCreateCredentials:(id)fp8;
- (BOOL)cacheUsername:(id)fp8 password:(id)fp12 forChallenge:(id)fp16;
- (BOOL)cacheUsername:(id)fp8 password:(id)fp12 forChallenge:(id)fp16 saveInKeychain:(BOOL)fp20;

@end

@interface OWAuthorizationRequest (KeychainPrivate)
- (id)keychainTags;
- (BOOL)getPasswordFromKeychain:(id)fp8;
@end

@interface OWAuthorizationRequest (Private)
- (BOOL)_schemeIsSupported:(id)fp8;
- (int)_compareChallenge:(id)fp8 toChallenge:(id)fp12;
- (id)_bestSupportedScheme:(id)fp8;
- (void)_gatherCredentials;
- (void)mainThreadGetPassword:(id)fp8;
- (void)getPasswordFallback:(id)fp8;
- (id)findCachedCredentials;
- (id)_credentialForUsername:(id)fp8 password:(id)fp12 challenge:(id)fp16;
@end

@interface OWDataURLProcessor : OWAddressProcessor
{
}

+ (void)didLoad;
- (void)startProcessing;
- (void)process;

@end

@interface OWFileProcessor : OWAddressProcessor
{
}

+ (void)didLoad;
+ (id)headersForFilename:(id)fp8;
- (void)process;

@end

@interface OWFileProcessor (Private)
- (void)_processDirectoryAtPath:(id)fp8;
- (BOOL)_processLocationFromPath:(id)fp8;
- (void)_fetchDirectory:(id)fp8;
- (void)_fetchRegularFile:(id)fp8;
- (BOOL)_redirectToFTP;
- (id)_pathForVolumeNamed:(id)fp8;
- (BOOL)_redirectHFSPathToPosixPath;
@end

@interface NSString (OWSGMLStringPrivate)
+ (void)didLoad;
+ (id)needsEscapeCharacterSet;
@end

@interface NSString (OWSGMLString) <OWSGMLToken>
- (id)stringWithEntitiesQuoted;
- (id)stringWithEntitiesQuoted:(int)fp8;
- (id)sgmlString;
- (id)sgmlStringWithQuotingFlags:(int)fp8;
- (id)string;
- (int)tokenType;
@end

@interface OWHTMLToSGMLObjects : OWDataStreamCharacterProcessor
{
    OWObjectStream *objectStream;
    OWDataStreamScanner *scanner;
    OFTrie *tagTrie;
    OWSGMLDTD *sourceContentDTD;
    struct {
        unsigned int netscapeCompatibleComments:1;
        unsigned int netscapeCompatibleNewlineAfterEntity:1;
        unsigned int netscapeCompatibleNonterminatedEntities:1;
        unsigned int shouldObeyMetaTag:1;
        unsigned int haveAddedObjectStreamToPipeline:1;
    } flags;
    OWSGMLTagType *metaCharsetHackTagType;
    OWSGMLTagType *endMetaCharsetHackTagType;
    unsigned int resetSourceEncoding;
}

+ (void)initialize;
+ (void)registerItemName:(id)fp8 bundle:(id)fp12 description:(id)fp16;
+ (BOOL)recognizesEntityNamed:(id)fp8;
+ (id)entityNameForCharacter:(unsigned short)fp8;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)processBegin;
- (void)process;
- (void)processAbort;
- (id)debugDictionary;

@end

@interface OWDataStreamScanner (SpecialScanning)
- (id)_readFragmentUpToLeftAngleBracketOrAmpersand;
@end

@interface OWHTMLToSGMLObjects (Private)
+ (void)_decodeEntriesFromCharacterDictionary:(id)fp8 intoStringDictionary:(id)fp12;
+ (id)_invertEntitiesFromDictionary:(id)fp8;
- (void)_initStreams;
- (void)_scanContent;
- (void)_scanTag;
- (void)_scanBeginTag;
- (void)_objectStreamIsValid;
- (void)_metaCharsetTagHack:(id)fp8;
- (void)_updateCharacterSetEncoding:(unsigned long)fp8;
- (id)_readValueWithDelimiterOFCharacterSet:(id)fp8 newlinesAreDelimiters:(BOOL)fp12;
- (void)_scanEndTag;
- (void)_scanMarkupDeclaration;
- (void)_scanComment;
- (void)_scanProcessingInstruction;
- (id)_readEntity;
- (id)_readCharacterReference;
- (id)_readEntityReference;
- (unsigned int)_readNumber;
- (unsigned int)_readHexNumber;
- (void)_skipToEndOfTag;
- (void)_scanNonSGMLContent:(id)fp8;
@end

@interface OWSGMLAppliedMethods : OFObject
{
    void **tagImplementation;
    SEL *tagSelector;
    void **endTagImplementation;
    SEL *endTagSelector;
    unsigned int tagCount;
}

- (id)initFromSGMLMethods:(id)fp8 dtd:(id)fp12 forTargetClass:(Class)fp16;
- (void)dealloc;
- (void)invokeTagAtIndex:(unsigned int)fp8 forTarget:(id)fp12 withObject:(id)fp16;
- (BOOL)invokeEndTagAtIndex:(unsigned int)fp8 forTarget:(id)fp12 withObject:(id)fp16;

@end

@interface OWSGMLAttribute : OFTrieBucket
{
    unsigned int offset;
}

- (id)initWithOffset:(unsigned int)fp8;
- (unsigned int)offset;

@end

@interface OWSGMLDTD : OFObject
{
    OFTrie *tagTrie;
    NSMutableArray *allTags;
    OWContentType *sourceType;
    OWContentType *destinationType;
    unsigned int tagCount;
}

+ (void)initialize;
+ (id)dtdForSourceContentType:(id)fp8;
+ (id)allDTDs;
+ (id)registeredDTDForSourceContentType:(id)fp8 destinationContentType:(id)fp12;
- (id)initWithSourceType:(id)fp8 destinationType:(id)fp12;
- (id)tagTrie;
- (id)sourceType;
- (id)destinationType;
- (unsigned int)tagCount;
- (id)tagTypeAtIndex:(unsigned int)fp8;
- (id)tagTypeNamed:(id)fp8;
- (BOOL)hasTagTypeNamed:(id)fp8;
- (id)debugDictionary;

@end

@interface OWSGMLMethods : OFObject
{
    OWSGMLMethods *parent;
    NSMutableDictionary *implementationForTagDictionary;
    NSMutableDictionary *implementationForEndTagDictionary;
}

- (id)initWithParent:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)registerSelector:(SEL)fp8 forTagName:(id)fp12 inDictionary:(id)fp16;
- (void)registerSelector:(SEL)fp8 forTagName:(id)fp12;
- (void)registerMethod:(id)fp8 forTagName:(id)fp12;
- (void)registerSelector:(SEL)fp8 forEndTagName:(id)fp12;
- (void)registerMethod:(id)fp8 forEndTagName:(id)fp12;
- (id)implementationForTagDictionary;
- (id)implementationForEndTagDictionary;
- (id)debugDictionary;

@end

@interface OWSGMLMethods (DTD)
- (void)registerTagsWithDTD:(id)fp8;
@end

@interface OWSGMLProcessor : OWObjectStreamProcessor
{
    OWSGMLAppliedMethods *appliedMethods;
    OWAddress *baseAddress;
    unsigned int *openTags;
    unsigned int *implicitlyClosedTags;
    NSMutableArray *undoers;
}

+ (void)initialize;
+ (id)sgmlMethods;
+ (id)dtd;
+ (void)setDebug:(BOOL)fp8;
- (id)initWithContent:(id)fp8 context:(id)fp12;
- (void)dealloc;
- (void)setBaseAddress:(id)fp8;
- (BOOL)hasOpenTagOfType:(id)fp8;
- (void)openTagOfType:(id)fp8;
- (void)closeTagOfType:(id)fp8;
- (void)processContentForTag:(id)fp8;
- (void)processUnknownTag:(id)fp8;
- (void)processIgnoredContentsTag:(id)fp8;
- (void)processTag:(id)fp8;
- (BOOL)processEndTag:(id)fp8;
- (void)processCData:(id)fp8;
- (void)process;
- (id)baseAddress;
- (id)debugDictionary;

@end

@interface OWSGMLProcessor (Private)
@end

@interface OWSGMLProcessor (SubclassesOnly)
- (BOOL)_hasOpenTagOfTypeIndex:(unsigned int)fp8;
- (void)_openTagOfTypeIndex:(unsigned int)fp8;
- (void)_implicitlyCloseTagAtIndex:(unsigned int)fp8;
- (BOOL)_closeTagAtIndexWasImplicit:(unsigned int)fp8;
@end

@interface OWSGMLProcessor (Tags)
+ (void)didLoad;
- (id)addressForAnchorTag:(id)fp8;
- (void)processMeaninglessTag:(id)fp8;
- (void)processBaseTag:(id)fp8;
- (void)processMetaTag:(id)fp8;
- (void)processHTTPEquivalent:(id)fp8 value:(id)fp12;
- (void)processTitleTag:(id)fp8;
- (void)processStyleTag:(id)fp8;
@end

@interface OWSGMLTag : OFObject <OWSGMLToken>
{
    int tokenType;
    OWSGMLTagType *nonretainedTagType;
    NSMutableDictionary *extraAttributes;
    unsigned char attributeCount;
    NSString *attributes[0];
}

+ (void)initialize;
+ (id)retainedTagWithTokenType:(int)fp8 tagType:(id)fp12;
+ (id)tagWithTokenType:(int)fp8 tagType:(id)fp12;
+ (id)startTagOfType:(id)fp8;
+ (id)endTagOfType:(id)fp8;
- (void)dealloc;
- (id)tagType;
- (id)name;
- (id)attributes;
- (BOOL)isNamed:(id)fp8;
- (void)setValue:(id)fp8 atIndex:(unsigned int)fp12;
- (id)valueForAttribute:(id)fp8;
- (BOOL)attributePresent:(id)fp8;
- (id)valueForAttributeAtIndex:(unsigned int)fp8;
- (BOOL)attributePresentAtIndex:(unsigned int)fp8;
- (id)extraAttributes;
- (void)setValue:(id)fp8 forExtraAttribute:(id)fp12;
- (id)valueForIDAttribute;
- (id)valueForClassAttribute;
- (id)valueForStyleAttribute;
- (id)sgmlString;
- (id)sgmlStringWithQuotingFlags:(int)fp8;
- (id)string;
- (int)tokenType;
- (id)shortDescription;
- (id)debugDictionary;

@end

@interface OWSGMLTagType : OFTrieBucket
{
    NSString *name;
    unsigned int dtdIndex;
    OWSGMLTagType *masterAttributesTagType;
    NSMutableArray *attributeNames;
    OFTrie *attributeTrie;
    int contentHandling;
    OWSGMLTag *attributelessStartTag;
    OWSGMLTag *attributelessEndTag;
}

+ (unsigned int)idAttributeIndex;
+ (unsigned int)classAttributeIndex;
+ (unsigned int)styleAttributeIndex;
- (id)initWithName:(id)fp8 dtdIndex:(unsigned int)fp12;
- (void)dealloc;
- (id)name;
- (unsigned int)dtdIndex;
- (id)masterAttributesTagType;
- (id)attributeNames;
- (id)attributeTrie;
- (void)shareAttributesWithTagType:(id)fp8;
- (unsigned int)addAttributeNamed:(id)fp8;
- (unsigned int)indexOfAttribute:(id)fp8;
- (unsigned int)attributeCount;
- (BOOL)hasAttributeNamed:(id)fp8;
- (void)setContentHandling:(int)fp8;
- (int)contentHandling;
- (id)attributelessStartTag;
- (id)attributelessEndTag;
- (id)debugDictionary;

@end

